<?xml version="1.0" encoding="UTF-8"?>
        <tumblr version="1.0"><posts><post id="173330647680" url="https://dummdida.tumblr.com/post/173330647680" url-with-slug="https://dummdida.tumblr.com/post/173330647680/cheap-and-lazy-releases" type="regular" date-gmt="2018-04-26 18:58:55 GMT" date="Thu, 26 Apr 2018 20:58:55" unix-timestamp="1524769135" format="markdown" reblog-key="lp6Ys1ly" slug="cheap-and-lazy-releases" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Cheap and lazy releases</regular-title><regular-body>&lt;p&gt;Release early and release often.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s fine if it&amp;rsquo;s close to a noop.
The Cockpit team also has great atuomation in this area, but here a few words on how we do this in KubeVirt.&lt;/p&gt;

&lt;p&gt;Assumption: The git tree is our source and git tags map to logical releases.&lt;/p&gt;

&lt;p&gt;Kudos: To GitHub and Travis CI.&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Have a working CI in order toverify that a commit is good&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You&amp;rsquo;ll need to write test cases and have travis running them. I strongly recommended to have a &lt;em&gt;great&lt;/em&gt; coverage, it keeps your .. inbox clean.&lt;/p&gt;

&lt;ol start="2"&gt;&lt;li&gt;Tagging and release in order to mark a commit as a release&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Here you want to either use plain annotated git tags, or even better &lt;a href="https://github.com/cgwalters/git-evtag"&gt;git-evtag&lt;/a&gt; which is signing the whole tree.&lt;/p&gt;

&lt;ol start="3"&gt;&lt;li&gt;Building images and binaries
Travis has everything you need to build images and binaries (although I wonder when buildah will land here).
Besides &lt;a href="https://docs.travis-ci.com/user/docker/"&gt;building images you can also push them&lt;/a&gt; to a registry of your choice.
All triggered by tags mentioned above.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The travis deployment feature is also pretty handy, as you can directly create a &lt;a href="https://docs.travis-ci.com/user/deployment/releases/"&gt;GitHub release and upload artifacts&lt;/a&gt;.&lt;/p&gt;

&lt;ol start="4"&gt;&lt;li&gt;Announce&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Do it manually. You can generate changelogs, but reading them &amp;hellip; is nto nice for humans. Thus maybe a sentenc or two - but written by a real human - might be good.&lt;/p&gt;

&lt;p&gt;All steps combined should give you: CI on each commit, github releases and pushed images for every tag you do.&lt;/p&gt;

&lt;p&gt;All in all it&amp;rsquo;s a lazy - or cheap - release.&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>travis</tag><tag>github</tag><tag>release</tag><tag>fedora</tag></post><post id="173023497050" url="https://dummdida.tumblr.com/post/173023497050" url-with-slug="https://dummdida.tumblr.com/post/173023497050/running-minikube-v0260-with-crio-and-kvm-nesting" type="regular" date-gmt="2018-04-17 08:05:43 GMT" date="Tue, 17 Apr 2018 10:05:43" unix-timestamp="1523952343" format="markdown" reblog-key="jMGSWa6I" slug="running-minikube-v0260-with-crio-and-kvm-nesting" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Running minikube v0.26.0 with CRIO and KVM nesting enabled by default</regular-title><regular-body>&lt;p&gt;Probably not worth a post, as it&amp;rsquo;s mentioned in &lt;a href="https://github.com/kubernetes/minikube/blob/master/docs/alternative_runtimes.md#using-cri-o"&gt;the readme&lt;/a&gt;, but CRIO was recently updated in &lt;a href="https://github.com/kubernetes/minikube/releases/tag/v0.26.0"&gt;minikube v0.26.0&lt;/a&gt; which now makes it work like a charm.&lt;/p&gt;

&lt;p&gt;When updating to 0.26 make sure to update the &lt;code&gt;minikube&lt;/code&gt; binary, but also the &lt;code&gt;docker-machine-driver-kvm2&lt;/code&gt; binary.&lt;/p&gt;

&lt;p&gt;Like in the past it is possible to switch to CRIO using&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ minikube start --container-runtime=cri-o
Starting local Kubernetes v1.10.0 cluster...
Starting VM...
Getting VM IP address...
Moving files into cluster...
Setting up certs...
Connecting to cluster...
Setting up kubeconfig...
Starting cluster components...
Kubectl is now configured to use the cluster.
Loading cached images from config file.
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, my favorit launch line is:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;minikube start --container-runtime=cri-o --network-plugin=cni --bootstrapper=kubeadm --vm-driver=kvm2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will use CRIO as the container runtime, CNI for networking, kubeadm for bringing up kube inside a KVM VM.&lt;/p&gt;</regular-body><tag>virtualization</tag><tag>minikube</tag><tag>kubevirt</tag><tag>fedora</tag><tag>crio</tag><tag>cni</tag><tag>kvm</tag></post><post id="171798262665" url="https://dummdida.tumblr.com/post/171798262665" url-with-slug="https://dummdida.tumblr.com/post/171798262665/running-ubuntu-on-kubernetes-with-kubevirt-v030" type="regular" date-gmt="2018-03-12 15:56:59 GMT" date="Mon, 12 Mar 2018 16:56:59" unix-timestamp="1520870219" format="markdown" reblog-key="ptk5K4tT" slug="running-ubuntu-on-kubernetes-with-kubevirt-v030" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Running Ubuntu on Kubernetes with KubeVirt v0.3.0</regular-title><regular-body>&lt;p&gt;You have this image, of a VM, which you want to run - alongside containers - why? - well, you need it. Some people would say it&amp;rsquo;s dope, but sometimes you really need it, because it has an app you want to integrate with pods.&lt;/p&gt;

&lt;p&gt;Here is how you can do this with &lt;a href="https://github.com/kubevirt"&gt;KubeVirt&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;1 Deploy KubeVirt&lt;/h2&gt;

&lt;p&gt;Deploy KubeVirt on your cluster - or follow the &lt;a href="https://github.com/kubevirt/demo"&gt;demo guide&lt;/a&gt; to setup a fresh minikube cluster.&lt;/p&gt;

&lt;h2&gt;2 Download Ubuntu&lt;/h2&gt;

&lt;p&gt;While KubeVirt comes up (use &lt;code&gt;kubectl get --all-namespaces pods&lt;/code&gt;), download &lt;a href="https://www.ubuntu.com/download/server"&gt;Ubuntu Server&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;3 Install kubectl plugin&lt;/h2&gt;

&lt;p&gt;Make sure to have the latest or recent &lt;code&gt;kubectl&lt;/code&gt; tool installed, and install the &lt;a href="https://github.com/fabiand/kubectl-plugin-pvc"&gt;&lt;code&gt;pvc&lt;/code&gt; plugin&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L &lt;a href="https://github.com/fabiand/kubectl-plugin-pvc/raw/master/install.sh"&gt;https://github.com/fabiand/kubectl-plugin-pvc/raw/master/install.sh&lt;/a&gt; | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;4 Create disk&lt;/h2&gt;

&lt;p&gt;Upload the Ubuntu server image:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ kubectl plugin pvc create ubuntu1704 1Gi $PWD/ubuntu-17.04-server-amd64.iso disk.img
Creating PVC
persistentvolumeclaim "ubuntu1704" created
Populating PVC
pod "ubuntu1704" created
total 701444
701444 -rw-rw-r--    1 1000     1000      685.0M Aug 25  2017 disk.img
Cleanup
pod "ubuntu1704" deleted
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;5 Create and launch VM&lt;/h2&gt;

&lt;p&gt;Create a VM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl apply -f -
apiVersion: kubevirt.io/v1alpha1
kind: VirtualMachinePreset
metadata:
  name: large
spec:
  selector:
    matchLabels:
      kubevirt.io/size: large
  domain:
    resources:
      requests:
        memory: 1Gi
---
apiVersion: kubevirt.io/v1alpha1
kind: OfflineVirtualMachine
metadata:
  name: ubuntu
spec:
  running: true
  selector:
    matchLabels:
      guest: ubuntu
  template:
    metadata:
      labels: 
        guest: ubuntu
        kubevirt.io/size: large
    spec:
      domain:
        devices:
          disks:
            - name: ubuntu
              volumeName: ubuntu
              disk:
                bus: virtio
      volumes:
        - name: ubuntu
          claimName: ubuntu1710
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;6 Connect to VM&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ./virtctl-v0.3.0-linux-amd64 vnc --kubeconfig ~/.kube/config ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Final notes - This is booting the Ubuntu ISO image. But this flow should work for existing images, which might be much more useful.&lt;/p&gt;</regular-body><tag>kubernetes</tag><tag>kubevirt</tag><tag>ubuntu</tag><tag>virtualization</tag></post><post id="171586901885" url="https://dummdida.tumblr.com/post/171586901885" url-with-slug="https://dummdida.tumblr.com/post/171586901885/v2v-job-v020-poc-for-importing-vms-into-kubevirt" type="regular" date-gmt="2018-03-06 10:41:44 GMT" date="Tue, 06 Mar 2018 11:41:44" unix-timestamp="1520332904" format="markdown" reblog-key="a0eukH8b" slug="v2v-job-v020-poc-for-importing-vms-into-kubevirt" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>v2v-job v0.2.0 POC for importing VMs into KubeVirt</regular-title><regular-body>&lt;p&gt;KubeVirt becomes usable. And to make it easier to use it would be nice to be able to import existing VMs.
After all migration is a strong point of KubeVirt.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://libguestfs.org/virt-v2v.1.html"&gt;&lt;code&gt;virt-v2v&lt;/code&gt;&lt;/a&gt; is the tool of choice to convert some guest to run on the KVM hypervisor.
What a great fit.&lt;/p&gt;

&lt;p&gt;Thus recently I started a &lt;a href="https://github.com/fabiand/v2v-job"&gt;little POC&lt;/a&gt; to check if this would really work.&lt;/p&gt;

&lt;p&gt;This post is just to wrap it up, as I just tagged v0.2.0 and finished a nice OVA import.&lt;/p&gt;

&lt;p&gt;What the POC does:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Take an URL pointing to an OVA&lt;/li&gt;
&lt;li&gt;Download and convert the OVA to a domxml and raw disk image&lt;/li&gt;
&lt;li&gt;Create a PVC and move the raw disk image to it&lt;/li&gt;
&lt;li&gt;Create an &lt;a href="https://github.com/kubevirt/kubevirt/pull/667"&gt;OfflineVirtualMachine&lt;/a&gt; from the domxml using xslt&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is pretty straight forward and currently living in a Job which can be found here: &lt;a href="https://github.com/fabiand/v2v-job"&gt;https://github.com/fabiand/v2v-job&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s actually using an &lt;a href="https://docs.openshift.org/latest/dev_guide/templates.html"&gt;OpenShift Template&lt;/a&gt;, but only works on Kubernetes so far, because I didn&amp;rsquo;t finish the RBAC profiles.
However, using the &lt;code&gt;oc&lt;/code&gt; tool you can even run it on Kubernetes without Template support by using:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ oc process --local -f manifests/template.yaml \
    -p SOURCE_TYPE=ova \
    -p SOURCE_NAME=http://192.168.42.1:8000/my.ova \
  | kubectl apply -f -
serviceaccount "kubevirt-privileged" created
job "v2v" created

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The interested reader can take a peek at the whole process in &lt;a href="https://gist.github.com/fabiand/49db654c78c9c3b5597eb14cb0f8783c"&gt;this log&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And btw - This &lt;a href="https://github.com/libguestfs/libguestfs/commit/286b88891c2288fb7f64c9538296599ece04bcb1"&gt;little but awesome patch on libguestfs&lt;/a&gt; by Pino - will help this job to auto-detect - well, guess - the the guest operating system and set the OfflineVirtualMachine &lt;a href="https://kubevirt.gitbooks.io/user-guide/guest-os-info.html"&gt;annotations&lt;/a&gt; correctly, in order to then - at runtime - apply the right &lt;a href="https://kubevirt.gitbooks.io/user-guide/vm-presets.html"&gt;VirtualMachinePresets&lt;/a&gt;, in order to launch the guest with optimized defaults.&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>fedora</tag><tag>guestfish</tag><tag>virt-v2v</tag><tag>libvirtd</tag><tag>kubernetes</tag><tag>openshift</tag><tag>virtualization</tag></post><post id="171195837375" url="https://dummdida.tumblr.com/post/171195837375" url-with-slug="https://dummdida.tumblr.com/post/171195837375/kubevirt-v030-alpha3-kubernetes-native" type="regular" date-gmt="2018-02-23 11:06:34 GMT" date="Fri, 23 Feb 2018 12:06:34" unix-timestamp="1519383994" format="markdown" reblog-key="eS88SwZm" slug="kubevirt-v030-alpha3-kubernetes-native" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>KubeVirt v0.3.0-alpha.3: Kubernetes native networking and storage</regular-title><regular-body>&lt;p&gt;First post for quite some time. A side effect of being busy to get streamline our KubeVirt user experience.&lt;/p&gt;

&lt;p&gt;KubeVirt v0.3.0 was not released at the beginnig of the month.&lt;/p&gt;

&lt;p&gt;That release was intended to be a little bigger, because it included a &lt;a href="https://github.com/kubevirt/kubevirt/pull/663"&gt;large architecture change (to the good)&lt;/a&gt;.
The change itself was amazingly friendly and went in without much problems - even if it took some time.&lt;/p&gt;

&lt;p&gt;But, the work which was building upon this patch in the storage and network areas was delayed and didn&amp;rsquo;t make it in time.
Thus we skipped the release in order to let storage and network catch up.&lt;/p&gt;

&lt;p&gt;The important thing about these two areas is, that KubeVirt was able to connect a VM to a network, and was able to boot of a iSCSI target, but this was not really tightly integrated with Kubernetes.&lt;/p&gt;

&lt;p&gt;Now, just this week two patches landed which actually do integrate these areas with Kubernetes.&lt;/p&gt;

&lt;h2&gt;Storage&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/kubevirt/kubevirt/pull/734"&gt;The first is storage&lt;/a&gt; - mainly written by Artyom, and finalized by David - which allows a user to use a persistent volume as the backing storage for a VM disk:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;metadata:
  name: myvm
apiVersion: kubevirt.io/v1alpha1
kind: VirtualMachine
spec:
  domain:
    devices:
      disks:
      - name: mypvcdisk
        volumeName: mypvc
        lun: {}
  volumes:
    - name: mypvc
      persistentVolumeClaim:
        claimName: mypvc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that any storage solution supported by Kubernetes to provide PVs can be used to store virtual machine images.
This is a big step forward in terms of compatibility.&lt;/p&gt;

&lt;p&gt;This actually works by taking this claim, and attaching it to the VM&amp;rsquo;s pod definition, in order to let the &lt;code&gt;kubelet&lt;/code&gt; then mount the respective volume to the VM&amp;rsquo;s pod. Once that is done, KubeVirt will take care to connect the disk image within that PV to the VM itself.
This is only possible because the architecture change caused libvirt to run inside every VM pod, and thus allow the VM to consume the pod resources.&lt;/p&gt;

&lt;p&gt;Side note, another project is in progress to actually let a user upload a virtual machine disk to the cluster in a convenient way: &lt;a href="https://github.com/kubevirt/containerized-data-importer."&gt;https://github.com/kubevirt/containerized-data-importer.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Network&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/kubevirt/kubevirt/pull/686"&gt;The second change is about network&lt;/a&gt; which Vladik worked on for some time.
This change also required the architectural changes, in order to allow the VM and libvirt to consume the pod&amp;rsquo;s network resource.&lt;/p&gt;

&lt;p&gt;Just like with pods the user does not need to do anything to get basic network connectivity.
KubeVirt will connect the VM to the NIC of the pod in order to give it the most compatible intergation.
Thus now you are able to expose a TCP or UDP port of the VM to the outside world using regular Kubernetes Services.&lt;/p&gt;

&lt;p&gt;A side note here is that despite this integration we are now looking to enhance this further to allow the usage of side cars like Istio.&lt;/p&gt;

&lt;h2&gt;Alpha Release&lt;/h2&gt;

&lt;p&gt;The three changes - and their delay - caused the delay of v0.3.0 - which will now be released in the beginnig of March.
But we have done a few pre-releases in order to allow interested users to try this code right now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kubevirt/kubevirt/releases/tag/v0.3.0-alpha.3"&gt;KubeVirt v0.3.0-alpha.3&lt;/a&gt; is the most recent alpha release and should work fairly well.&lt;/p&gt;

&lt;h2&gt;More&lt;/h2&gt;

&lt;p&gt;But these items were just a small fraction of what we have been doing.&lt;/p&gt;

&lt;p&gt;If you look at the &lt;a href="https://github.com/kubevirt/"&gt;kubevirt org on GitHub&lt;/a&gt; you will notice many more repositories there, covering storage, cockpit, and deployment with ansible - and it will be another post to write about how all of this is fitting together.&lt;/p&gt;

&lt;h2&gt;Welcome aboard!&lt;/h2&gt;

&lt;p&gt;KubeVirt is really speeding up and we are still looking for support. So if you are interested in working on a bleeding edge project tightly coupled with Kubernetes, but also having it&amp;rsquo;s own notion, and an great team, then just reach out to &lt;a href="http://fabiand@redhat.com"&gt;me&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>kubernetes</tag><tag>libvirt</tag><tag>fedora</tag><tag>virtualization</tag></post><post id="168784245160" url="https://dummdida.tumblr.com/post/168784245160" url-with-slug="https://dummdida.tumblr.com/post/168784245160/kubevirt-status-0x7e1-2017" type="regular" date-gmt="2017-12-21 12:30:32 GMT" date="Thu, 21 Dec 2017 13:30:32" unix-timestamp="1513859432" format="markdown" reblog-key="mttNSFUb" slug="kubevirt-status-0x7e1-2017" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>KubeVirt Status 0x7E1 (2017)</regular-title><regular-body>&lt;p&gt;Where do we stand with KubeVirt at the end of the year? (This virtual machine management add-on for Kubernetes)&lt;/p&gt;

&lt;p&gt;We gained some speed again, but before going into what we are doing right now; let&amp;rsquo;s take a look at the past year.&lt;/p&gt;

&lt;h1&gt;Retro&lt;/h1&gt;

&lt;p&gt;The year started with publishing KubeVirt. The first few months flew by, and we were mainly driven by demoing and PoCing parts of KubeVirt.
Quickly we were able to launch machines, and to even live migrate them.&lt;/p&gt;

&lt;p&gt;We had the chance to speak about KubeVirt at a couple of conferences: FOSDEM 2017, devconf.cz 2017, KubeCon EU 2017, FrOSCon 2017.
And our work was mainly around sorting out technical details, and understanding how things could work - in many areas. with many open ends.&lt;/p&gt;

&lt;p&gt;At that time we had settled with CRD based solution, but aiming at a User API Server (to be used with API server aggregation), a single libvirt in a pod nicluding extensions to move the qemu processes into VM pods, and storage based on PVCs and iSSCI leveraging qemu&amp;rsquo;s built-in drivers. And we were also struggling with a nice deployment.
To name just a few of the big items we were looking at.&lt;/p&gt;

&lt;h2&gt;Low-level changes and storage&lt;/h2&gt;

&lt;p&gt;Around the middle of the year we were seeing all the features which we would like to consume  - RAW block storage for volumes, device manager, resource classes (now delayed) - to go into Kubernetes 1.9. But at the same time we started to notice, that our current implementation was not suited to consume those features.
The problem we were facing was that the VM processes lived in a single libvirtd pod, and were only living in te cgroups of the VM pods in order to allow Kubernets to see the VM resource consumption.
But because the VMs were in a singlel ibvirt pod from a namespace perspective, we weren&amp;rsquo;t bale to use any feature which was namespace related.
I.e. &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/storage/raw-block-pv.md"&gt;raw block storage for volumes&lt;/a&gt; is a pretty big thing for us, as it will allow us to directly attach a raw block device to a VM. However, the block devices are exposed to pods, to the VM pods (the pods we spawn for every VM) - and up to now our VMs did not see the mount namespace of a pod, thus it&amp;rsquo;s not possible to consume raw block devices.
It&amp;rsquo;s similar for the &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/resource-management/device-plugin.md"&gt;device manager work&lt;/a&gt;. It will allow us to bring devices to pods, but we are not able to consume them, because our VM proccesses live in the libvirt pod.&lt;/p&gt;

&lt;p&gt;And it was even worse, we spent a significant amount of time on finding workarounds in order to allow VM processes to see the pods&amp;rsquo; namespaces in order to consume the features.&lt;/p&gt;

&lt;p&gt;All of this due to the fact that we wanted to use libvirtd as intended: A single instance per host with a host wide view.&lt;/p&gt;

&lt;p&gt;Why we do this initially - using libvirtd? Well, there were different opinions about this within the team. In the end we stuck to it, because there are some benefits over direct qemu, mainly API stability and support when it comes to things like live migrations.
Further more - if we did use qemu directly, we would probably come up with something similar to libvirt - and that is not where we want to focus on (the node level virtualization).&lt;/p&gt;

&lt;p&gt;We engaged internally and publicly with the libvirtd team and tried to understand how a future could look.
The bottom line is that the libvirtd team - or parts of it - &lt;a href="https://www.redhat.com/archives/libvir-list/2017-November/msg00525.html"&gt;acknowledged the fact that the landscape if evolving, and that libvirtd want&amp;rsquo;s to be part of this change - also in it&amp;rsquo;s own interest to stay relevant&lt;/a&gt;.
And this happened pretty recently, but it&amp;rsquo;s an improtant change which will allow us to consume Kubernetes features much better. And should free time because we will spend much less time on finding workarounds.&lt;/p&gt;

&lt;h2&gt;API layer&lt;/h2&gt;

&lt;p&gt;The API layer was also exciting.&lt;/p&gt;

&lt;p&gt;We spend a vast amount of time writing our own user API server to be used with &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/aggregated-api-servers.md"&gt;API server aggregation&lt;/a&gt;.
We went with this because it would have provided us with the full controll over our entity types and http endpoints, which was relevant in order to provide access to serial and graphical consoles of a VM.&lt;/p&gt;

&lt;p&gt;We worked this based on the assumption that Kubernetes will provide anything to make it easy to integrate and run those custom API servers.&lt;/p&gt;

&lt;p&gt;But in the end these assumptions were not met.
The biggest blocker was that &lt;a href="https://github.com/kubernetes/kubernetes/issues/46351"&gt;Kubernetes does not provide a convenient way to store an custom APIs data&lt;/a&gt;. Instead it is left to the API server to provide it&amp;rsquo;s own mechanism to store it&amp;rsquo;s data (state).
This sounds small, but is annoying.
This gap increases the burden on the operator to decide where to store data, it could eventually add dependencies for a custom etcd instance, or adds a dependency for PV in the cluster. In the end all of this might be there, but it wasis a goal of KubeVirt to be an easy to deploy add-on to Kubernetes. Taking care of these pretty cluster specific data storage problems took us to much off track.&lt;/p&gt;

&lt;p&gt;Rigth now we are re-focusing on CRDs. We are looking at using &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/customresources-validation.md"&gt;jsonscheme for validation&lt;/a&gt; which landed pretty recently. And we try to get rid of our subresources to remove the need of a custom API server.&lt;/p&gt;

&lt;h2&gt;Network&lt;/h2&gt;

&lt;p&gt;Networking was also an issue where we spend a lot of time on. It still is a difficult topic.&lt;/p&gt;

&lt;p&gt;Traditionally (this word is used intentionally) VMs are connected in a layer 2 or layer 3 fashion.
However, as we (will really) run VMs in a pod, there are several ways of how we can connect a VM to a Kubernetes network&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Layer 2 - Is not in Kubernetes&lt;/li&gt;
&lt;li&gt;Layer 3 - We&amp;rsquo;d hijack the pod&amp;rsquo;s IP and leave it to the VM&lt;/li&gt;
&lt;li&gt;Layer 4 - This is how applications behave within a pod - If we make VMs work this way, then we are most compatible, but restrict the functionality of a VM&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Besides of this - VMs often have multiple interfaces - and Kubernetes does not have a concept for this.&lt;/p&gt;

&lt;p&gt;Thus it&amp;rsquo;s a mix of technical and conceptual problems by itself.
It becomes even more complex if you consider that the traditional layer 2 and 3 connectivity helped to solve problems, but in the cloud native worlds the same problems might be solved in a different way and  in a different place. Thus here it is a challenge to understand what problems were solved, and how could they be solved today, in order to understand if feature slike layer 2 connectivity are really needed.&lt;/p&gt;

&lt;h1&gt;Forward&lt;/h1&gt;

&lt;p&gt;As you see, or read, we&amp;rsquo;ve spent a lot of time on reseraching, PoCing, and failing.
Today it looks different, and I&amp;rsquo;m positive for the future.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;libvirt changes, this will allow us to consume Kubernetes features much more easily&lt;/li&gt;
&lt;li&gt;Our deployment is &lt;a href="https://github.com/kubevirt/kubevirt/releases"&gt;much better today&lt;/a&gt; - this shall allow us to move to other clusters (Tectonic, OpenShift, …)&lt;/li&gt;
&lt;li&gt;We are not at an end with how networking will look, but we are implemeting something which is pretty compatible (missing link)&lt;/li&gt;
&lt;li&gt;We care about storage and see that we tie &lt;a href="https://github.com/kubevirt/kubevirt/pull/619"&gt;much better into the Kubernetes storage world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/kubevirt/kubevirt/pull/606"&gt;API is getting refactored&lt;/a&gt; and is looking much more Kube-ish now&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/kubevirt/kubevirt/pull/618"&gt;focus on CRDs&lt;/a&gt; and can simplify other things&lt;/li&gt;
&lt;li&gt;People are starting to add a Cockpit UI to KubeVirt: &lt;a href="https://www.youtube.com/watch?v=nT2EA6wYkKI"&gt;https://www.youtube.com/watch?v=nT2EA6wYkKI&lt;/a&gt; (this UI will get a KubeVirt backend)&lt;/li&gt;
&lt;li&gt;And a ManageIQ provider: &lt;a href="https://www.youtube.com/watch?v=6Z_kGj9_s6Q"&gt;https://www.youtube.com/watch?v=6Z_kGj9_s6Q&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;On a broader front:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;We have a &lt;a href="https://groups.google.com/forum/#!forum/kubernetes-wg-virtualization"&gt;informal virtualization WG&lt;/a&gt; in order to discuss issues accross the board with other projects - and give users guidance! &lt;a href="https://kubernetes.slack.com/messages/virtualization"&gt;Also on slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This post got longer than expected and it is still missing a lot of details, but you see we are moving on, as we still see the need of giving users a good way to migrate the workloads from today to tomorrow.&lt;/p&gt;

&lt;p&gt;There are probably also some mistakes, feel free to give me a ping or ignore then in a friendly fashion.&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>kubernetes</tag><tag>libvirtd</tag><tag>cinder</tag><tag>crd</tag><tag>uas</tag><tag>fedora</tag><tag>virtualization</tag></post><post id="168654724730" url="https://dummdida.tumblr.com/post/168654724730" url-with-slug="https://dummdida.tumblr.com/post/168654724730/kubecon-na-2017" type="regular" date-gmt="2017-12-17 22:06:41 GMT" date="Sun, 17 Dec 2017 23:06:41" unix-timestamp="1513548401" format="markdown" reblog-key="Er155fpL" slug="kubecon-na-2017" state="draft" is_reblog="false" tumblelog="dummdida"><regular-title>KubeCon NA 2017</regular-title><regular-body>&lt;p&gt;This pretty large KubeCon NA 2017 uis alreday a week old.&lt;/p&gt;</regular-body></post><post id="167009198790" url="https://dummdida.tumblr.com/post/167009198790" url-with-slug="https://dummdida.tumblr.com/post/167009198790/updating-to-fedora-26" type="regular" date-gmt="2017-11-01 09:54:23 GMT" date="Wed, 01 Nov 2017 10:54:23" unix-timestamp="1509530063" format="markdown" reblog-key="5WCvfpEC" slug="updating-to-fedora-26" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Updating to Fedora 26</regular-title><regular-body>&lt;p&gt;&lt;img src="https://fedoramagazine.org/wp-content/uploads/2017/07/f26.jpg" alt="Fedora 26 Wallpaper"/&gt;&lt;/p&gt;

&lt;p&gt;Finally - after &lt;a href="http://redhat.slides.com/fdeutsch/running-virtual-machines-on-kubernetes-with-libvirt-and-kvm-at-kvm-forum-2017"&gt;the presentation at KVM Forum 2017&lt;/a&gt; - I took the opportunity and updated my primary laptop to Fedora 26.&lt;/p&gt;

&lt;p&gt;I used gnome-software for it, and everything went eventless, which is surprising, as I use luks, EFI, and blue jeans.&lt;/p&gt;

&lt;p&gt;The only hassle so far was that blue jeans does still not support screen sharing when Wayland is used (but this is known), and that my screen was messed up and frozen after some time with two connected diesplays.&lt;/p&gt;

&lt;p&gt;But this is really neglectable - Updates are just lame these days. Awesome.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>update</tag></post><post id="166109219790" url="https://dummdida.tumblr.com/post/166109219790" url-with-slug="https://dummdida.tumblr.com/post/166109219790/this-week-in-kubevirt-5" type="regular" date-gmt="2017-10-06 13:45:32 GMT" date="Fri, 06 Oct 2017 15:45:32" unix-timestamp="1507297532" format="markdown" reblog-key="nEPpxj1A" slug="this-week-in-kubevirt-5" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>This Week in KubeVirt 5</regular-title><regular-body>&lt;p&gt;This is the fith weekly update from the KubeVirt team.&lt;/p&gt;

&lt;p&gt;We are currently driven by&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Being easier to be used on Kubernetes and OpenShift&lt;/li&gt;
&lt;li&gt;Enabling people to contribute&lt;/li&gt;
&lt;li&gt;Node Isolator use-case (more informations soon)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This week we achieved to:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Improved sagger documentation (for SDK generation) (@lukas-bednar)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/476"&gt;https://github.com/kubevirt/kubevirt/pull/476&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Kubernetes 1.8 fixes (@cynepco3hahue)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/479"&gt;https://github.com/kubevirt/kubevirt/pull/479&lt;/a&gt;
&lt;a href="https://github.com/kubevirt/kubevirt/pull/484"&gt;https://github.com/kubevirt/kubevirt/pull/484&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ephemeral disk rewrite (@davidvossel)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/460"&gt;https://github.com/kubevirt/kubevirt/pull/460&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Custom VM metrics proposal (@fromanirh )
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/487"&gt;https://github.com/kubevirt/kubevirt/pull/487&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[WIP] Add API server PKI tool (@jhernand)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/498"&gt;https://github.com/kubevirt/kubevirt/pull/498&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;KubeVirt provider for the cluster autoscaler (@rmohr)
(&lt;a href="https://github.com/rmohr/autoscaler/pull/1"&gt;https://github.com/rmohr/autoscaler/pull/1&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In addition to this, we are also working on:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Finally some good progress with layer 3 network connectivity (@vladikr)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/450"&gt;https://github.com/kubevirt/kubevirt/pull/450&lt;/a&gt;
&lt;a href="https://github.com/vladikr/kubevirt/tree/veth-bridge-tap"&gt;https://github.com/vladikr/kubevirt/tree/veth-bridge-tap&lt;/a&gt;
&lt;a href="https://github.com/vladikr/kubevirt/tree/veth-macvtap"&gt;https://github.com/vladikr/kubevirt/tree/veth-macvtap&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Continued work on api server aggregation (@stu-gott)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/355"&gt;https://github.com/kubevirt/kubevirt/pull/355&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Take a look at the pulse, to get an overview over all changes of this week:
&lt;a href="https://github.com/kubevirt/kubevirt/pulse"&gt;https://github.com/kubevirt/kubevirt/pulse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally you can view our open issues at
&lt;a href="https://github.com/kubevirt/kubevirt/issues"&gt;https://github.com/kubevirt/kubevirt/issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And keep track of events at our calendar
&lt;a href="https://calendar.google.com/embed?src=18pc0jur01k8f2cccvn5j04j1g@group.calendar.google.com"&gt;https://calendar.google.com/embed?src=18pc0jur01k8f2cccvn5j04j1g@group.calendar.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need some help or want to chat you can find us on
irc://irc.freenode.net/#kubevirt&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>weekly</tag><tag>virtualization</tag></post><post id="166040271440" url="https://dummdida.tumblr.com/post/166040271440" url-with-slug="https://dummdida.tumblr.com/post/166040271440/enabling-kernel-same-page-merging-for-vagrant-or" type="regular" date-gmt="2017-10-04 13:24:27 GMT" date="Wed, 04 Oct 2017 15:24:27" unix-timestamp="1507123467" format="markdown" reblog-key="wlBXTtrr" slug="enabling-kernel-same-page-merging-for-vagrant-or" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Enabling Kernel same page merging for vagrant or anybody else</regular-title><regular-body>&lt;p&gt;Running the &lt;a href="http://kubevirt.io"&gt;KubeVirt&lt;/a&gt; &lt;a href="https://www.vagrantup.com/"&gt;vagrant&lt;/a&gt; &lt;a href="https://github.com/kubevirt/kubevirt/blob/master/docs/getting-started.md"&gt;setup&lt;/a&gt; with 2 nodes is somewhat painful when it comes to memory consumption. But this is the price we are happy to pay for decent CI.&lt;/p&gt;

&lt;p&gt;vagrant will launch three virtual machines (two nodes, one master) on your host. All three vagrant machines use the same (CentOS based) image, this is the optimal case for the kernel same page merger (ksm). This kernelf eatures wanders through memory pages and merges identical ones into one (if they are marked accordingly).&lt;/p&gt;

&lt;p&gt;Using KSM on Fedora is simple, to enable it you just need to install and run some supporting services:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnf install ksm ksmtunde
systemctl enable --now ksm ksmtuned

# Now check that it's working (if you have VMs running)
watch tail /sys/kernel/mm/ksm/*
...
== /sys/kernel/mm/ksm/pages_shared ==
379446
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note that ksm requires some CPU cycles to perform the de-duplication.&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>fedora</tag><tag>ksm</tag><tag>libvirt</tag><tag>vagrant</tag></post><post id="165865330185" url="https://dummdida.tumblr.com/post/165865330185" url-with-slug="https://dummdida.tumblr.com/post/165865330185/this-week-in-kubevirt-4" type="regular" date-gmt="2017-09-29 14:33:49 GMT" date="Fri, 29 Sep 2017 16:33:49" unix-timestamp="1506695629" format="markdown" reblog-key="idPu3q98" slug="this-week-in-kubevirt-4" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>This Week in KubeVirt 4</regular-title><regular-body>&lt;p&gt;This is the fourth weekly update from the KubeVirt team.&lt;/p&gt;

&lt;p&gt;We are currently driven by&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Being easier to be used on Kubernetes and OpenShift&lt;/li&gt;
&lt;li&gt;Enabling people to contribute&lt;/li&gt;
&lt;li&gt;Node Isolator use-case (more informations soon)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This week you can find us at:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Ohio Linux Fest (@stu-gott)
&amp;ldquo;KubeVirt, Virtual Machine Management Using Kubernetes&amp;rdquo;
&lt;a href="https://ohiolinux.org/schedule/"&gt;https://ohiolinux.org/schedule/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This week we achieved to:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;ReplicaSet for VirtualMachines (@rmohr)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/453"&gt;https://github.com/kubevirt/kubevirt/pull/453&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Swagger documentation improvements (@rmohr, @lukas-bednar)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/475"&gt;https://github.com/kubevirt/kubevirt/pull/475&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Hot-standby for our controller (@cynepco3hahue)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/461"&gt;https://github.com/kubevirt/kubevirt/pull/461&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;domxml/VM Spec mapping rules proposal (@rmohr, @michalskrivanek)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/466"&gt;https://github.com/kubevirt/kubevirt/pull/466&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Launch flow improvement proposal (@davidvossel)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/469"&gt;https://github.com/kubevirt/kubevirt/pull/469&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In addition to this, we are also working on:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Debug layer 3 network connectivity issues for VMs (@vladikr)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/450"&gt;https://github.com/kubevirt/kubevirt/pull/450&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Review of the draft code for the api server aggregation (@stu-gott)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/355"&gt;https://github.com/kubevirt/kubevirt/pull/355&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Take a look at the pulse, to get an overview over all changes of this week:
&lt;a href="https://github.com/kubevirt/kubevirt/pulse"&gt;https://github.com/kubevirt/kubevirt/pulse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally you can view our open issues at
&lt;a href="https://github.com/kubevirt/kubevirt/issues"&gt;https://github.com/kubevirt/kubevirt/issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And keep track of events at our calendar
&lt;a href="https://calendar.google.com/embed?src=18pc0jur01k8f2cccvn5j04j1g@group.calendar.google.com"&gt;https://calendar.google.com/embed?src=18pc0jur01k8f2cccvn5j04j1g@group.calendar.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need some help or want to chat you can find us on
irc://irc.freenode.net/#kubevirt&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>weekly</tag><tag>virtualization</tag></post><post id="165612217195" url="https://dummdida.tumblr.com/post/165612217195" url-with-slug="https://dummdida.tumblr.com/post/165612217195/this-week-in-kubevirt-3" type="regular" date-gmt="2017-09-22 09:28:54 GMT" date="Fri, 22 Sep 2017 11:28:54" unix-timestamp="1506072534" format="markdown" reblog-key="Cokk8z9C" slug="this-week-in-kubevirt-3" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>This Week in KubeVirt 3</regular-title><regular-body>&lt;p&gt;This is the third weekly update from the KubeVirt team.&lt;/p&gt;

&lt;p&gt;We are currently driven by&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Being easier to be used on Kubernetes and OpenShift&lt;/li&gt;
&lt;li&gt;Enabling people to contribute&lt;/li&gt;
&lt;li&gt;Node Isolator use-case (more informations soon)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This week we achieved to:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Renamed VM kind to VirtualMachine (@cynepco3hahue)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/452"&gt;https://github.com/kubevirt/kubevirt/pull/452&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Proposal for VirtualMachineReplicaSet to scale VMs (@rmohr)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/453"&gt;https://github.com/kubevirt/kubevirt/pull/453&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ephemeral Registry Disk Rewrite (@vossel)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/460"&gt;https://github.com/kubevirt/kubevirt/pull/460&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix some race in our CI (@rmohr)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/459"&gt;https://github.com/kubevirt/kubevirt/pull/459&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In addition to this, we are also working on:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Review of the draft code to get layer 3 network connectivity for VMs (@vladikr)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/450"&gt;https://github.com/kubevirt/kubevirt/pull/450&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Review of the draft code for the api server aggregation (@stu-gott)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/355"&gt;https://github.com/kubevirt/kubevirt/pull/355&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Review of the proposal integrate with host networking (@rmohr)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/367"&gt;https://github.com/kubevirt/kubevirt/pull/367&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Converging multiple ansible playbooks for deployment on OpenShift (@petrkotas, @cynepco3hahue, @lukas-bednar)
(&lt;a href="https://github.com/kubevirt-incubator/kubevirt-ansible"&gt;https://github.com/kubevirt-incubator/kubevirt-ansible&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Continued discussion of VM persistence and ABI stability
(&lt;a href="https://groups.google.com/d/topic/kubevirt-dev/G0FpxJYFhf4/discussion"&gt;https://groups.google.com/d/topic/kubevirt-dev/G0FpxJYFhf4/discussion&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Take a look at the pulse, to get an overview over all changes of this week:
&lt;a href="https://github.com/kubevirt/kubevirt/pulse"&gt;https://github.com/kubevirt/kubevirt/pulse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally you can view our open issues at
&lt;a href="https://github.com/kubevirt/kubevirt/issues"&gt;https://github.com/kubevirt/kubevirt/issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And keep track of events at our calendar
&lt;a href="https://calendar.google.com/embed?src=18pc0jur01k8f2cccvn5j04j1g@group.calendar.google.com"&gt;https://calendar.google.com/embed?src=18pc0jur01k8f2cccvn5j04j1g@group.calendar.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need some help or want to chat you can find us on
irc://irc.freenode.net/#kubevirt&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>weekly</tag><tag>virtualization</tag></post><post id="165360752825" url="https://dummdida.tumblr.com/post/165360752825" url-with-slug="https://dummdida.tumblr.com/post/165360752825/this-week-in-kubevirt-2" type="regular" date-gmt="2017-09-15 09:49:42 GMT" date="Fri, 15 Sep 2017 11:49:42" unix-timestamp="1505468982" format="markdown" reblog-key="MkH7uk0C" slug="this-week-in-kubevirt-2" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>This Week in KubeVirt 2</regular-title><regular-body>&lt;p&gt;This is the second weekly update from the KubeVirt team.&lt;/p&gt;

&lt;p&gt;We are currently driven by&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Being easier to be used on Kubernetes and OpenShift&lt;/li&gt;
&lt;li&gt;Enabling people to contribute&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This week we achieved to:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Keep cloud-init data in Secrets (@vossel)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/433"&gt;https://github.com/kubevirt/kubevirt/pull/433&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;First draft code to get layer 3 network connectivity for VMs (@vladikr)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/450"&gt;https://github.com/kubevirt/kubevirt/pull/450&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;First draft code for the api server aggregation (@stu-gott)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/355"&gt;https://github.com/kubevirt/kubevirt/pull/355&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add further migration documentation (@rmohr)
(&lt;a href="https://github.com/kubevirt/user-guide/pull/1"&gt;https://github.com/kubevirt/user-guide/pull/1&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In addition to this, we are also working on:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Progress on how to integrate with host networking (@rmohr)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/367"&gt;https://github.com/kubevirt/kubevirt/pull/367&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Converging multiple ansible playbooks for deployment on OpenShift (@petrkotas, @cynepco3hahue, @lukas-bednar)
(&lt;a href="https://github.com/kubevirt-incubator/kubevirt-ansible"&gt;https://github.com/kubevirt-incubator/kubevirt-ansible&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Initial support for Anti- &amp;amp; Affinity for VMs (@MarSik)
(&lt;a href="https://github.com/kubevirt/kubevirt/issues/438"&gt;https://github.com/kubevirt/kubevirt/issues/438&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Initial support for memory and cpu mapping (@MarSik)
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/388"&gt;https://github.com/kubevirt/kubevirt/pull/388&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Discussing VM persistence and ABI stability
(&lt;a href="https://groups.google.com/d/topic/kubevirt-dev/G0FpxJYFhf4/discussion"&gt;https://groups.google.com/d/topic/kubevirt-dev/G0FpxJYFhf4/discussion&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Take a look at the pulse, to get an overview over all changes of this week:
&lt;a href="https://github.com/kubevirt/kubevirt/pulse"&gt;https://github.com/kubevirt/kubevirt/pulse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally you can view our open issues at
&lt;a href="https://github.com/kubevirt/kubevirt/issues"&gt;https://github.com/kubevirt/kubevirt/issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And keep track of events at our calendar
&lt;a href="https://calendar.google.com/embed?src=18pc0jur01k8f2cccvn5j04j1g@group.calendar.google.com"&gt;https://calendar.google.com/embed?src=18pc0jur01k8f2cccvn5j04j1g@group.calendar.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need some help or want to chat you can find us on
irc://irc.freenode.net/#kubevirt&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>weekly</tag><tag>virtualization</tag></post><post id="165115030310" url="https://dummdida.tumblr.com/post/165115030310" url-with-slug="https://dummdida.tumblr.com/post/165115030310/this-week-in-kubevirt-1" type="regular" date-gmt="2017-09-08 13:35:25 GMT" date="Fri, 08 Sep 2017 15:35:25" unix-timestamp="1504877725" format="markdown" reblog-key="ro4a5uhZ" slug="this-week-in-kubevirt-1" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>This Week in KubeVirt #1</regular-title><regular-body>&lt;p&gt;This is the first weekly update from the KubeVirt team.&lt;/p&gt;

&lt;p&gt;We are currently driven by&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Being easier to consume on Kubernetes and OpenShift&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This week we achieved to&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;merge a design for cloud-init support&lt;br/&gt;
(&lt;a href="https://github.com/kubevirt/kubevirt/pull/372"&gt;https://github.com/kubevirt/kubevirt/pull/372&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;release KubeVirt v0.0.2
(&lt;a href="https://github.com/kubevirt/kubevirt/releases/tag/v0.0.2"&gt;https://github.com/kubevirt/kubevirt/releases/tag/v0.0.2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Minikube based demo (&lt;a href="https://github.com/kubevirt/demo"&gt;https://github.com/kubevirt/demo&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OpenShift Community presentation
(&lt;a href="https://www.youtube.com/watch?v=IfuL2rYhMKY"&gt;https://www.youtube.com/watch?v=IfuL2rYhMKY&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In addition to this, we are also working on:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Support stock Kubernetes networking
(&lt;a href="https://github.com/kubevirt/kubevirt/issues/261"&gt;https://github.com/kubevirt/kubevirt/issues/261&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Move to a custom API Server suitable for API Server aggregation
(&lt;a href="https://github.com/kubevirt/kubevirt/issues/205"&gt;https://github.com/kubevirt/kubevirt/issues/205&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Writing a user facing getting started guide
(&lt;a href="https://github.com/kubevirt/kubevirt/issues/410"&gt;https://github.com/kubevirt/kubevirt/issues/410&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ansible playbooks for deployment on OpenShift&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Take a look at the pulse, to get an overview over all changes of this week:
&lt;a href="https://github.com/kubevirt/kubevirt/pulse"&gt;https://github.com/kubevirt/kubevirt/pulse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally you can view our open issues at
&lt;a href="https://github.com/kubevirt/kubevirt/issues"&gt;https://github.com/kubevirt/kubevirt/issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need some help or want to chat you can find us on
irc://irc.freenode.net/#kubevirt.&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>weekly</tag><tag>virtualization</tag></post><post id="165082442740" url="https://dummdida.tumblr.com/post/165082442740" url-with-slug="https://dummdida.tumblr.com/post/165082442740/that-thing-that-makes-kubevirt-a-little-different" type="regular" date-gmt="2017-09-07 15:17:24 GMT" date="Thu, 07 Sep 2017 17:17:24" unix-timestamp="1504797444" format="markdown" reblog-key="NSd1Aafk" slug="that-thing-that-makes-kubevirt-a-little-different" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>That thing that makes KubeVirt a little different - or  the Kubernetes virtualization API.</regular-title><regular-body>&lt;p&gt;An unsual but persistent part in the KubeVirt development is the following  question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How does KubeVirt compare to virtlet, runv/hyper, oci-cc-runtime/ClearContainers, RancherVM, and alike?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s a good question. And it actually took a while to get a clear view on this.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/130070496@N08/16651793469/" title="Mini Bowls - FT388 Etruscan, FT385 Diabolo &amp;amp; FT387 Roman"&gt;&lt;img src="https://farm8.staticflickr.com/7612/16651793469_0402c44e07_z.jpg" width="640" height="248" alt="Mini Bowls - FT388 Etruscan, FT385 Diabolo &amp;amp; FT387 Roman"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;To get this clear view, I&amp;rsquo;ll focus on two details:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;KubeVirt is not a container runtime, and thus not using the CRI.
The VM runtime (libvirt) is provided in a pod instead.&lt;/li&gt;
&lt;li&gt;KubeVirt provides a dedicated API for VMs&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Especially the first point is raised pretty often.
The reason for this is - eventually - that it looks so obvious to just launch VMs instead of containers on the kubelet side - virtlet, runv, and oci-cc-runtime show that it really is an option (without going to much into the details here).
Very often this is directly coupled to the question of why we ship our runtime in a pod.&lt;/p&gt;

&lt;p&gt;The answer is simply that so far this setup &amp;ldquo;works&amp;rdquo;:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;we can spawn VMs&lt;/li&gt;
&lt;li&gt;our runtime is Kubernetes native&lt;/li&gt;
&lt;li&gt;because everything lives in pods, we can be delivered to &amp;ldquo;any&amp;rdquo; Kubernetes cluster, without messing with the host or kubelet.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We can be a native Kubernetes add-on.&lt;/p&gt;

&lt;p&gt;Btw - A nice side effect is that VMs become just a workload - and this is a good separation of concerns and responsibility.
Kubernetes owns the platform, and we provide our application to run specialized (virtual machine) processes on this platform.&lt;/p&gt;

&lt;p&gt;But even with these benefits: There are some details (i.e. how to get VMs into ressource groups of other pods) which are a little nasty to solve for us, which might be easier to solve in the CRI based approach.&lt;/p&gt;

&lt;p&gt;And we see - we are a few lines into the post, and the discussion is going down the winding road of seeing which runtime approach is the best.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s how it often goes, but that&amp;rsquo;s not where I want to right now.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/tripletsisters/7610437816/" title="Retro Triangular Pattern Design"&gt;&lt;img src="https://farm9.staticflickr.com/8426/7610437816_0625050f66.jpg" width="417" height="500" alt="Retro Triangular Pattern Design"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;KubeVirt is not only a runtime. KubeVirt also has an explicit API for virtualization.
Initially we used TPRs, then as Kubernetes extension capabilities evolved we went over to CRDs, and are now working on our own User API Server to be used with API Server aggregation.
Regardless of this history - The important bit is that we &lt;em&gt;have&lt;/em&gt; an &lt;em&gt;explicit&lt;/em&gt; API dedicated to virtualization.&lt;/p&gt;

&lt;p&gt;And this - in retrospective (and forward facing) - is the significant difference.&lt;/p&gt;

&lt;p&gt;The explicit virtualization related API - which consists of new top level types for different things in the virtualization area (like VMS) - gives us the freedom to express all the functionality we need to provide a robust, solid, and stable virtualization platform.&lt;/p&gt;

&lt;p&gt;The other approaches (except for RancherVM) have a different view here: They re-use (intentionally and with different motivations) the existing pod specification, to derive VMs from them.
But this approach comes to it&amp;rsquo;s limits as soon as virtualization specific functionality (for example live migration) is needed. For those features pod&amp;rsquo;s don&amp;rsquo;t have an API, and annotations or other workarounds need to be used to &amp;ldquo;logically extend&amp;rdquo; the pod concept, to enable this missing (virtualization) functionality.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not saying that the one way or the other is technically wrong. It&amp;rsquo;s just that both approaches might just be addressig different goals.
I.e. oci-cc-runtime has clearly the goal of using VMs for isolation purpose only - So far it does not look as if they want to expose them as &amp;ldquo;fully fledged VMs&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;And to close the loop: The API is pretty independent of the runtime, and this tells me that in the end it is not that important how the VMs are run - with a runtime in a pod or via a CRI based runtime. The important bit is, that with KubeVirt the user is given the full controll over his VMs.&lt;/p&gt;

&lt;p&gt;Side note - Instead of a dedicated API, there is also the option to extend the pod specification using annotations to cover the virtualization specific properties. The issue is, that this does not scale, and will bloat the pod specification.&lt;/p&gt;

&lt;p&gt;Thus, the next time you are encountering this topic, you might want to think of KubeVirt as the Kubernetes virtualization API.&lt;/p&gt;</regular-body><tag>kubernetes</tag><tag>virtualization</tag><tag>libvirt</tag><tag>virtlet</tag><tag>cri</tag><tag>ranchervm</tag><tag>runv</tag><tag>hyper</tag><tag>fedora</tag><tag>kubevirt</tag></post><post id="164795256425" url="https://dummdida.tumblr.com/post/164795256425" url-with-slug="https://dummdida.tumblr.com/post/164795256425/kubevirt-at-froscon-2017" type="regular" date-gmt="2017-08-30 18:40:25 GMT" date="Wed, 30 Aug 2017 20:40:25" unix-timestamp="1504118425" format="markdown" reblog-key="zId8GCUC" slug="kubevirt-at-froscon-2017" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>KubeVirt at FrOSCon 2017</regular-title><regular-body>&lt;iframe width="1024" height="576" src="https://media.ccc.de/v/froscon2017-2023-paving_the_transition_-_herding_stroke_unicorns_stroke_vms_on_kubernetes/oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;There was also a small talk at FrOSCON (Hello Sunday morning!), the recordings are now &lt;a href="https://media.ccc.de/v/froscon2017-2023-paving_the_transition_-_herding_stroke_unicorns_stroke_vms_on_kubernetes"&gt;published&lt;/a&gt; as well.&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>froscon</tag></post><post id="164795184865" url="https://dummdida.tumblr.com/post/164795184865" url-with-slug="https://dummdida.tumblr.com/post/164795184865/we-had-the-opportunity-to-present-kubevirt-at-the" type="video" date-gmt="2017-08-30 18:37:55 GMT" date="Wed, 30 Aug 2017 20:37:55" unix-timestamp="1504118275" format="markdown" reblog-key="u2QpRf55" slug="we-had-the-opportunity-to-present-kubevirt-at-the" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://www.youtube.com/watch?v=IfuL2rYhMKY</video-source><video-caption>&lt;p&gt;We had the opportunity to present KubeVirt at the regular &lt;a href="https://blog.openshift.com/category/openshift-commons/"&gt;OpenShift Commons Briefing&lt;/a&gt;.
Even if KubeVirt does not yet run on OpenShift, we are still aiming for it - and Adam actually made &lt;a href="http://adam.younglogic.com/2017/08/deploying-kubevirt-on-origin-master/"&gt;good progress in the past week&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This session also &lt;a href="https://youtu.be/IfuL2rYhMKY?t=2570"&gt;included&lt;/a&gt; the new &lt;a href="https://github.com/kubernetes/minikube"&gt;minikube&lt;/a&gt; &lt;a href="https://github.com/kubevirt/demo"&gt;based demo&lt;/a&gt;.&lt;/p&gt;</video-caption><video-player>&lt;iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/IfuL2rYhMKY?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe width="500" height="281"  id="youtube_iframe" src="https://www.youtube.com/embed/IfuL2rYhMKY?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe width="250" height="141"  id="youtube_iframe" src="https://www.youtube.com/embed/IfuL2rYhMKY?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><tag>kubevirt</tag><tag>openshift</tag><tag>fedora</tag></post><post id="164710185675" url="https://dummdida.tumblr.com/post/164710185675" url-with-slug="https://dummdida.tumblr.com/post/164710185675/gpg-signed-git-commits-and-tags-for-fancy-github" type="regular" date-gmt="2017-08-28 12:45:09 GMT" date="Mon, 28 Aug 2017 14:45:09" unix-timestamp="1503924309" format="markdown" reblog-key="dklNBG8B" slug="gpg-signed-git-commits-and-tags-for-fancy-github" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>GPG signed git commits and tags for fancy GitHub integration</regular-title><regular-body>&lt;p&gt;Fancy things are a driving factor.&lt;/p&gt;

&lt;p&gt;Thus recently GitHub drove me to add gpg signatures to (first) tags and now to commits in general.&lt;/p&gt;

&lt;p&gt;The reasons is that those tags and commits stick out by getting a verified tag. You &lt;a href="https://github.com/kubevirt/demo/pull/14"&gt;can see&lt;/a&gt; the small greenish box with &amp;ldquo;Verified&amp;rdquo; on the right hand side:
&lt;img src="https://66.media.tumblr.com/91e2e00c780d3a65ec4ee25cbde02205/tumblr_inline_oveb2qj9FV1s0jj7d_540.png" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;You need a couple of things to get there:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;Make sure to install &lt;code&gt;dnf install gnupg2&lt;/code&gt; on Fedora.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://help.github.com/articles/generating-a-new-gpg-key/"&gt;A GPG key&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://help.github.com/articles/associating-an-email-with-your-gpg-key/"&gt;Associating your email with the key&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://help.github.com/articles/adding-a-new-gpg-key-to-your-github-account"&gt;Uploaded GPG key in GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://help.github.com/articles/telling-git-about-your-gpg-key/"&gt;Configure (gpg-agent) and git to sign your commits&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;All of this is nicely documented at GitHub - kudos for this documentation.&lt;/p&gt;

&lt;p&gt;Once the basics are setup, you can use this for signing &lt;a href="https://help.github.com/articles/signing-commits-using-gpg/"&gt;commits&lt;/a&gt; and &lt;a href="https://help.github.com/articles/signing-tags-using-gpg/"&gt;tags&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For tags I went a little step further and looked into &lt;a href="https://github.com/cgwalters/git-evtag"&gt;git-evtag&lt;/a&gt; which is using a stronger hash and also recursing over submodules.
The primary reason for this was to allow using the git tree as a primary artefact for code delivery. Which is appropriate sometimes, but not always.&lt;/p&gt;

&lt;p&gt;And with all of this, you also get the fancy verified labels on release, as &lt;a href="https://github.com/kubevirt/kubevirt/releases"&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://66.media.tumblr.com/831462ae31d6c6b9c1ff26dac69abc3f/tumblr_inline_ovebnresY11s0jj7d_540.png" alt=""/&gt;&lt;/p&gt;</regular-body><tag>git</tag><tag>fedora</tag><tag>github</tag><tag>gnupg</tag><tag>gpg</tag></post><post id="164592239980" url="https://dummdida.tumblr.com/post/164592239980" url-with-slug="https://dummdida.tumblr.com/post/164592239980/kubevirt-minikube-demo" type="regular" date-gmt="2017-08-25 10:02:40 GMT" date="Fri, 25 Aug 2017 12:02:40" unix-timestamp="1503655360" format="markdown" reblog-key="jLaEqpbL" slug="kubevirt-minikube-demo" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>KubeVirt minikube demo</regular-title><regular-body>&lt;p&gt;&lt;a href="https://github.com/kubernetes/minikube/"&gt;minikube&lt;/a&gt; is a nice tool to demo Kubernetes - running Virtual Machines with Kubevirt.&lt;/p&gt;

&lt;p&gt;And as it&amp;rsquo;s a regular Kubernetes cluster - just with a single node - thus we can also use it to demo &lt;a href="http://kubevirt.io"&gt;KubeVirt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was a little work, but now there is a WIP branch to move the KubeVirt demo to minikube &lt;a href="https://github.com/fabiand/kubevirt-demo/tree/withMinikube"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or try it yourself in a few &lt;a href="https://github.com/fabiand/kubevirt-demo/tree/withMinikube#quickstart"&gt;simple steps&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone -b withMinikube \
  &lt;a href="https://github.com/fabiand/kubevirt-demo.git"&gt;https://github.com/fabiand/kubevirt-demo.git&lt;/a&gt;
$ cd kubevirt-demo
# See the README.md of how to setup minikube for this demo
$ ./run-demo.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is how it looks if you try it out yourself:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://asciinema.org/a/134953"&gt;&lt;img src="https://asciinema.org/a/134953.png" alt="asciicast"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feedback is welcome!&lt;/p&gt;

&lt;p&gt;As it&amp;rsquo;s not mentioned in the recording, the VMs are defined in yaml files like pods, for an example, take a look &lt;a href="https://github.com/kubevirt/kubevirt/blob/master/cluster/vm.yaml"&gt;here&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>libvirt</tag><tag>fedora</tag><tag>centos</tag><tag>kubernetes</tag><tag>minikube</tag></post><post id="164515268495" url="https://dummdida.tumblr.com/post/164515268495" url-with-slug="https://dummdida.tumblr.com/post/164515268495/the-slide-deck-presented-at-froscon-2017-it-is-a" type="photo" date-gmt="2017-08-23 08:27:27 GMT" date="Wed, 23 Aug 2017 10:27:27" unix-timestamp="1503476847" format="markdown" reblog-key="3CWFJGMS" slug="the-slide-deck-presented-at-froscon-2017-it-is-a" state="published" is_reblog="false" tumblelog="dummdida" width="1083" height="662"><photo-caption>&lt;p&gt;The &lt;a href="http://slides.com/fabiand/paving-the-transition#/"&gt;slide deck presented at FrOSCon 2017&lt;/a&gt;. It is a small update on the KubeVirt front.&lt;/p&gt;

&lt;p&gt;Take a look if you want to understand the motivation, and key pillars of KubeVirt.&lt;/p&gt;</photo-caption><photo-url max-width="1280">https://66.media.tumblr.com/b7085358862e84b5fc017cd2995c4ab0/tumblr_ov4q5rqV7d1st6sz0o1_1280.png</photo-url><photo-url max-width="500">https://66.media.tumblr.com/b7085358862e84b5fc017cd2995c4ab0/tumblr_ov4q5rqV7d1st6sz0o1_500.png</photo-url><photo-url max-width="400">https://66.media.tumblr.com/b7085358862e84b5fc017cd2995c4ab0/tumblr_ov4q5rqV7d1st6sz0o1_400.png</photo-url><photo-url max-width="250">https://66.media.tumblr.com/b7085358862e84b5fc017cd2995c4ab0/tumblr_ov4q5rqV7d1st6sz0o1_250.png</photo-url><photo-url max-width="100">https://66.media.tumblr.com/b7085358862e84b5fc017cd2995c4ab0/tumblr_ov4q5rqV7d1st6sz0o1_100.png</photo-url><photo-url max-width="75">https://66.media.tumblr.com/b7085358862e84b5fc017cd2995c4ab0/tumblr_ov4q5rqV7d1st6sz0o1_75sq.png</photo-url><tag>kubevirt</tag><tag>libvirtd</tag><tag>fedora</tag></post><post id="161670194890" url="https://dummdida.tumblr.com/post/161670194890" url-with-slug="https://dummdida.tumblr.com/post/161670194890/connecting-virtual-machines-to-kubernetes-in-a" type="regular" date-gmt="2017-06-10 21:09:04 GMT" date="Sat, 10 Jun 2017 23:09:04" unix-timestamp="1497128944" format="markdown" reblog-key="6psbB4Tm" slug="connecting-virtual-machines-to-kubernetes-in-a" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Connecting virtual machines to Kubernetes in a friendly way.</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/x302808/6924836096/" title="Friendly Camel"&gt;&lt;img src="https://c1.staticflickr.com/8/7232/6924836096_9a20df4aff_z.jpg" width="640" height="363" alt="Friendly Camel"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;We can run them, but how can we connect them? That&amp;rsquo;s what we&amp;rsquo;ve been thinking
about in &lt;a href="http://kubevirt.io"&gt;KubeVirt&lt;/a&gt; for a while.
We can run VMs (and even migrate them) on Kubernetes. But so far networking
was private. The stock qemu user-space SLIRP (SLURP?) stack was used to connect
the VMs to the public world. This allowed the VMs to reach out, but the world
could not reach them.&lt;/p&gt;

&lt;p&gt;The goal is to be able to speak to a KubeVirt VM, like you can also speak to
other pods.&lt;/p&gt;

&lt;p&gt;With KubeVirt we aim to be good Kubernetes citizens, which brings a few
constraints, mainly:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Networking must work from within a Pod, as KubeVirt is deployed in Pods only&lt;/li&gt;
&lt;li&gt;Networking must work with the default Kubernetes networking (CNI) - to be
independent of the CNI network plugin&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;But because we want to rely on libvirtd for virtualization, we also have
constraints from that side, mainly:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Networking approach must be supported by libvirtd&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And these constraints have a few implications:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;We need a a Pod NIC for each VM NIC and each VM NIC can only have one IP
address&lt;/li&gt;
&lt;li&gt;This further implies that each VM NIC has a pre-defined IP address - the one
from the Pod NIC&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Now, let&amp;rsquo;s tackle the story step by step.&lt;/p&gt;

&lt;p&gt;A pod just has one NIC! Yes, that&amp;rsquo;s true. But there are already discussions how
to change this.
And besides that, CNI can already add additional NICs to arbitrary containers.&lt;/p&gt;

&lt;p&gt;The inital state can be imagined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;libvirtd pod:
- eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Get a new NIC into a Pod&lt;/h2&gt;

&lt;p&gt;We can not assume that libvirt is on all hosts, thus KubeVirt needs to ship it
in a Pod.
Every VM we run, will be launched in the network namespace of the libvirt Pod.&lt;/p&gt;

&lt;p&gt;Thus: For each virtual NIC which is used by any VM managed by libvirt, we need
to create a dedicated NIC within the Pod.&lt;/p&gt;

&lt;p&gt;How do we do this? We work with the assumption that CNI is on the host for now.
We work with this temporary assumption, because we assume that there are ways
through the Kubernetes API in future to attach multiple NICs to pods.&lt;/p&gt;

&lt;p&gt;So, how do we do it? Generaly speaking we just call the CNI plugn on the host
and ask it to create another NIC inside our container, or rather, inside the
network namespace of our container.&lt;/p&gt;

&lt;p&gt;One issue is that currently all NICs connected to a Pod are on the same IP
network, this causes routing confusion, to solve this we are removing the
routes which are related to this new Pod NIC.&lt;/p&gt;

&lt;p&gt;The new state is now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;libvirtd pod:
- eth0
- eth42 (mac42)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Represent the Pod NIC in libvirt&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got the new NIC inside the pod, to be used with a virtual NIC of
a VM, we need to find a way to represent this NIC in a way how libvirt can
consume it.
We could use the &lt;code&gt;direct&lt;/code&gt; attachment type, where a macvtap is directly attached
to the NIC. This would work, as long as we don&amp;rsquo;t need to speak to the host -
except for the fact that we&amp;rsquo;ve got no way to provide the pre-defined IP to the
VM.
To achieve this we need to rely on DHCP.
And the only way to provide an IP to a VM in libvirt is to create a network,
with a DHCP server which will distribute the IP to a VM.&lt;/p&gt;

&lt;p&gt;Thus we create a libvirt network for the Pod, including an entry which is
mapping the mac-address of the Pod NIC to the IP of the Pod NIC.
So - There is an interesting fact here: We map the &lt;em&gt;Pod mac-address&lt;/em&gt; to the
&lt;em&gt;Pod IP&lt;/em&gt;.
This means that the VM later on will have a NIC which has the same mac and IP
as the Pod NIC had. This is necessary to ensure that all packets get to the VM.
But to allow all packets to travel to the VM, we need to ensure that the
mac and IP is not used along the path.
This means we need to remove the IP from the Pod NIC, and also change the mac
of the Pod NIC - because if they keep the mac and IP, then packets, addressed
to the VM, would end at the Pod NIC (because mac/ip match).&lt;/p&gt;

&lt;p&gt;Now - What did we do?
We removed the IP from and changed the mac of the Pod NIC, then we created a
libvirt network, which will distill into a bridge, connected to the Pod NIC,
and also a dnsmasq instance providing all DNS, and IP informations to the VM
once it comes up. The delivered IP will be the former IP of the Pod NIC.&lt;/p&gt;

&lt;p&gt;After starting the network, the new state is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;libvirtd pod:
- eth0
- eth42
  - br-eth42
    # BR: DHCP and host-to-guests
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Connect the VM to the network&lt;/h2&gt;

&lt;p&gt;Connecting the VM is now trivial - We use the regular libvirt network
source to connect the VM to the previously defined network.
Important is just to assign the correct mac address to the VM NIC.
As a reminder, the mac address used to be the mac address of the Pod NIC, but
now used for the VM.&lt;/p&gt;

&lt;p&gt;With this we effectively mived the IP endpoint from the Pod NIC to the virtual
NIC of the VM.&lt;/p&gt;

&lt;p&gt;After VM boot the new state is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;libvirtd pod:
- eth0
- eth42
  - br-eth42
    - macvtap-42 (mac42)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/atoach/1845092602/" title="Friendly Street"&gt;&lt;img src="https://c1.staticflickr.com/3/2230/1845092602_166cbe6bbd_z.jpg" width="640" height="251" alt="Friendly Street"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2&gt;What happens on VM boot?&lt;/h2&gt;

&lt;p&gt;Once the VM boots a few things happen (okay - some of these things happen when
you start the libvirt network).&lt;/p&gt;

&lt;p&gt;A bridge will be created by libvirt, attaching the Pod NIC as a slave.
A dnsmasq instance will be spawned providing DHCP to the VM.
A VM will be instanciated, connected via a tun device to the bridge.&lt;/p&gt;

&lt;p&gt;Once the VM has booted up, it can retrieve it&amp;rsquo;s IP using DHCP.
This will also include the correct DNS infromations the Pod is using.&lt;/p&gt;

&lt;p&gt;Once a ping is sent from the VM, it will travel through the TUN device, to
the bridge from there on through it&amp;rsquo;s slave, the Pod NIC, to the CNI network.
The CNI network will now see packets from this NIC - and it does not see that
they come from a VM.&lt;/p&gt;

&lt;p&gt;There is thus no difference to how the pod traffic looks like - so how could it be irritatted? it isn&amp;rsquo;t, that&amp;rsquo;s nice.&lt;/p&gt;

&lt;p&gt;Note: Rancher VM has a similar approach, except that it does not use libvirt, and that it replaces the original Pod NIC, and does not additional ones.&lt;/p&gt;

&lt;p&gt;Code? &lt;a href="https://gist.github.com/fabiand/2bb16218623015df70d26f5cf5da2ca3"&gt;Just POC&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>kubernetes</tag><tag>libvirt</tag><tag>kubevirt</tag><tag>network</tag><tag>rancher</tag></post><post id="161401019450" url="https://dummdida.tumblr.com/post/161401019450" url-with-slug="https://dummdida.tumblr.com/post/161401019450/flatpak-ing-servo-nightly" type="regular" date-gmt="2017-06-03 21:00:45 GMT" date="Sat, 03 Jun 2017 23:00:45" unix-timestamp="1496523645" format="markdown" reblog-key="gENIrVxl" slug="flatpak-ing-servo-nightly" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>flatpak-ing Servo Nightly</regular-title><regular-body>&lt;p&gt;&lt;a href="http://servo.org"&gt;Servo&lt;/a&gt; - that rendering engine written in &lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; - can be built from source. But there are also nightly builds available.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://download.servo.org/doge-tiny.png" alt="Servo logo?"/&gt;&lt;/p&gt;

&lt;p&gt;But the &lt;a href="https://github.com/servo/servo/issues/12015"&gt;issue with those nightly builds&lt;/a&gt; is that they depend on $very old crypto libraries - which might be because the &lt;a href="https://github.com/servo/saltfs/issues/462"&gt;builder distro is so old&lt;/a&gt; - and those are not shipped on Fedora 25. This effectively makes it annoying to run these builds on Fedora.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://flatpak.org/img/logo.svg" alt="Flatpak logo"/&gt;&lt;/p&gt;

&lt;p&gt;One way to solve this issue is to provide a &lt;a href="http://flatpak.org"&gt;flatpak&lt;/a&gt; for these builds. Flatpaks are containers (shipping and runtime) and will thus also contain the dependencies - liek these nagging crypto libs.&lt;/p&gt;

&lt;p&gt;However long story short, I&amp;rsquo;ve created this small repo which can be used to wrap the Servo nightly binaries in a flatpak wrapper - and it&amp;rsquo;s also adding the two annoying dependencies.&lt;/p&gt;

&lt;p&gt;Thus - once they get published you can run Servo on your Fedora (or other flatpak distro) without issues.&lt;/p&gt;

&lt;p&gt;Feel free to try it out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone &lt;a href="https://github.com/fabiand/flatpak-servo.git"&gt;https://github.com/fabiand/flatpak-servo.git&lt;/a&gt;
$ cd flatpak-servo
$ pkcon install flatpak
# NOTE flathub seems to be down right now
$ make
$ flatpak run org.servo.Servo wikipedia.org
# OR - for browserhtml
$ flatpak run org.servo.Servo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should be greeted with something like&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fabiand/flatpak-servo/master/blob/wikipedia.png" alt="Screenshot"/&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m actually not sure why the &lt;a href="https://github.com/browserhtml/browserhtml"&gt;browserhtml&lt;/a&gt; view is so broken …&lt;/p&gt;

&lt;p&gt;Next step would be building servo from source using &lt;code&gt;flatpak-builder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It was actually pretty nice to work with flatpak.&lt;/p&gt;</regular-body><tag>servo</tag><tag>rust</tag><tag>fedora</tag><tag>flatpak</tag></post><post id="158398674825" url="https://dummdida.tumblr.com/post/158398674825" url-with-slug="https://dummdida.tumblr.com/post/158398674825/migrating-vms-on-kubernetes-using-kubevirt" type="regular" date-gmt="2017-03-14 16:53:34 GMT" date="Tue, 14 Mar 2017 17:53:34" unix-timestamp="1489510414" format="markdown" reblog-key="xpnohGcZ" slug="migrating-vms-on-kubernetes-using-kubevirt" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Migrating VMs on Kubernetes using KubeVirt</regular-title><regular-body>&lt;p&gt;Meh - Migrating a VM - in Kubernetes? WTH.&lt;/p&gt;

&lt;p&gt;Kubernetes is hosting stateless pods. That&amp;rsquo;s okay.
Kubevirt is running pet VMs on these stateless pods, andyou can read more about it &lt;a href="http://kubevirt.io"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, whenever you encounter a situation where you end up running a VM in KubeVirt, then you can now also use VM migration to migrate VMs from one host to another - using the KubeVirt API:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://asciinema.org/a/107166" target="_blank"&gt;&lt;img src="https://asciinema.org/a/107166.png"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To level expectations, this is early work. And it surely needs to mature.&lt;/p&gt;</regular-body><tag>kubernetes</tag><tag>kubervirt</tag><tag>fedora</tag><tag>virtualization</tag><tag>migration</tag><tag>centos</tag></post><post id="157834884385" url="https://dummdida.tumblr.com/post/157834884385" url-with-slug="https://dummdida.tumblr.com/post/157834884385/booting-a-vm-of-an-iscsi-lun-inside-a-kubernetes" type="regular" date-gmt="2017-02-28 21:38:43 GMT" date="Tue, 28 Feb 2017 22:38:43" unix-timestamp="1488317923" format="markdown" reblog-key="rTO4lJDh" slug="booting-a-vm-of-an-iscsi-lun-inside-a-kubernetes" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Booting a VM of an iSCSI LUN - inside a Kubernetes cluster</regular-title><regular-body>&lt;p&gt;Create some entities in Kubernetes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create the pod, services, persistent volumes, and claims
$ kubectl create -f iscsi-demo-target-tgtd.yaml
persistentvolumeclaim "disk-custom" created
persistentvolumeclaim "disk-alpine" created
persistentvolumeclaim "disk-cirros" created
persistentvolume "iscsi-disk-custom" created
persistentvolume "iscsi-disk-alpine" created
persistentvolume "iscsi-disk-cirros" created
service "iscsi-demo-target" created
pod "iscsi-demo-target-tgtd" created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now use a pod to access the created target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Run a qemu instance to see if the target can be used
# Note: This is not testing the PV or PVC, just the service and     target
# Use ctrl-a c quit to quit
$ kubectl run --rm -it qemu-test --image=kubevirt/libvirtd -- \
  qemu-system-x86_64 \
    -snapshot \
    -drive file=iscsi://iscsi-demo-target/iqn.2017-01.io.kubevirt:sn.42/2 \
    -nographic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And enjoy the boot:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ISOLINUX 6.04 6.04-pre1  Copyright (C) 1994-2015 H. Peter Anvin et al
boot: 


OpenRC 0.21.7.818fc79999 is starting up Linux 4.4.45-0-virtgrsec (x86_64)
…
Welcome to Alpine Linux 3.5
Kernel 4.4.45-0-virtgrsec on an x86_64 (/dev/ttyS0)

localhost login:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay - It&amp;rsquo;s not all end-to-end yet - when looking at it from a KubeVirt perspective.&lt;/p&gt;

&lt;p&gt;What you see is that a qemu instance is booting of an iSCSI target LUN, offered by an iSCSI portal running as an unprivileged pod on a Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;But that&amp;rsquo;s already nice, what was achieved so far:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;iSCSI target pod with demo content&lt;/li&gt;
&lt;li&gt;Service, volumes, claims to expose the content&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qemu&lt;/code&gt; can boot from the LUN&lt;/li&gt;
&lt;li&gt;VM object can be created to boot of the LUN (if you specify the LUN)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The remaining gap (&lt;a href="https://github.com/kubevirt/kubevirt/pull/109"&gt;which is being worked on&lt;/a&gt;) is to allow specifying a claim in the VM object (instead of the LUN as we did it above).
And then we can use KubeVirt to boot a VM of a disk image - probably.&lt;/p&gt;</regular-body><tag>kubernetes</tag><tag>kubevirt</tag><tag>qemu</tag><tag>libvirtd</tag><tag>fedora</tag><tag>iscsi</tag></post><post id="157832612210" url="https://dummdida.tumblr.com/post/157832612210" url-with-slug="https://dummdida.tumblr.com/post/157832612210/containerized-iscsi-demo-target" type="regular" date-gmt="2017-02-28 20:30:58 GMT" date="Tue, 28 Feb 2017 21:30:58" unix-timestamp="1488313858" format="markdown" reblog-key="yQFRfRYK" slug="containerized-iscsi-demo-target" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Containerized iSCSI Demo target</regular-title><regular-body>&lt;p&gt;If you want to boot a VM of a disk, then you obviously need a disk.&lt;/p&gt;

&lt;p&gt;And as I&amp;rsquo;m currently playing with launching VMs of iSCSI target&amp;rsquo;s I took this as an excercise to come up with a nice setup to easily deploy iSCSI targets on a Kubernetes cluster to provide demo images for booting VMs.&lt;/p&gt;

&lt;p&gt;Initially I went with writing up a &lt;a href="https://github.com/kubevirt/kubevirt/pull/94/commits/2b4022b5b1565fa6672761c068fabc9cb1c5e546"&gt;small docker image to add LIO iSCSI targets&lt;/a&gt;. But this solution was not really portable (i.e. not running on minikube), because it requires Kernel support (LIO is an in-Kernel target).&lt;/p&gt;

&lt;p&gt;But luckily there are some other iSCSI target implementations which provide user-space iSCSI targets - like &lt;code&gt;tgtd&lt;/code&gt;.
Alpine - which I initially used - did not offer tgtd, thus I switched over to use Debian, which provides - at least it feels like it - every single project which exists since the beginning of unix timestamp 0.&lt;/p&gt;

&lt;p&gt;Anyhow, long story short.
With tgtd it was easy to create an &lt;a href="https://github.com/kubevirt/kubevirt/pull/94/commits/121a585457c138fe4336602487a4624b00c4f7da"&gt;image which contains Alpine and CirrOS as demo images, and export them in a tgt target&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The result is now a simple docker image which you can launch, and if you export the right port, then you got a ready to use iSCSI target which serves Alpine, CirrOS, and an empty LUN.
All of those are inside the contianer, thus the data is not persisted.&lt;/p&gt;

&lt;p&gt;Feel free to try it out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run \
  -p 3260:3260 \
  -it fabiand/iscsi-demo-target-tgtd


# To test:
# In another terminal
$ qemu-system-x86_64 \
  -snapshot \
  -serial stdio \
  -drive file=iscsi://127.0.0.1/iqn.2017-01.io.kubevirt:sn.42/2

# Or just to discover
$ iscsiadm --mode discovery -t sendtargets --portal 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;</regular-body><tag>kubernetes</tag><tag>debian</tag><tag>alpine</tag><tag>cirros</tag><tag>kubevirt</tag><tag>libvirtd</tag><tag>qemu</tag><tag>fedora</tag></post><post id="157774269270" url="https://dummdida.tumblr.com/post/157774269270" url-with-slug="https://dummdida.tumblr.com/post/157774269270/power-of-stroke-love-stroke-containers-by" type="regular" date-gmt="2017-02-27 10:13:14 GMT" date="Mon, 27 Feb 2017 11:13:14" unix-timestamp="1488190394" format="markdown" reblog-key="BHtBkGqY" slug="power-of-stroke-love-stroke-containers-by" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Power of &lt;stroke&gt;love&lt;/stroke&gt; containers - by acknowledging and respecting their boundaries</regular-title><regular-body>&lt;p&gt;So - It&amp;rsquo;s about guarantees. In this post at least.
Containers are so useful - in some cases - because of a few reasons.
One reason tho is that containers are pretty much &amp;ldquo;independent&amp;rdquo; of the host and
the host operating system.
And making them indepent of the host - or - abstracting away to host solves a
class of problems.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/draco2008/2246539681/in/photolist-4qw6YM-podYGR-dKL6x5-buQHJq-QTrnyq-cGi55S-2tdkTc-bMsV6D-nK7ZuJ-oUo2aZ-2GuZE3-fsZWpm-a5gbNk-awX3Pu-S5RqvH-afxiM8-RxqnvG-t5jJd-9ja4tw-S1kp87-Cs5vF-8qMzt6-8wgRtE-djkdwi-4Kw8iy-fd3wXy-a99my5-7QBGfj-a98Xnb-aGzdHp-q5w1ax-SgY2uX-dPyAgz-R4U3Dr-nPFFRQ-8BhCrL-8BhBxb-ay75sM-DYudE-4L7PUD-83fqpj-aob7sP-7byH7v-8JjyDY-dDbN2y-ACfwh-eyxc92-9C6jG7-dDbN8Q-nbjNvH" title="Warkworth Castle"&gt;&lt;img src="https://c1.staticflickr.com/3/2113/2246539681_7b9bc68e2f_z.jpg" width="640" height="426" alt="Warkworth Castle"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The author of an application does not need to take care that the OS and it&amp;rsquo;s
devices come up correctly. Containers allow us to just assume that they will.
An author does not even need to care about the real devices.
An application needs a network? In containers you can work with that
assumption. In the past time and code lines was spent on just checking that
networking was availableDocker guarantees this. And even the NIC name.&lt;/p&gt;

&lt;p&gt;An obviously docker goes beyond NICs. They found a great set of primitives
and guarantees which they provide on any host to the container.
Well - It only works because the distributions moved a little to provide
all Kernel features which docker requires - but in the end it effectively
means that the docker runtime (and OCI) guarantee you the same environment
regardless of the host.
And this simplifies things. Things? Yes. It simplifies code, because you can
work with assumptions, it also simplifies updates, because you are isolated.
And there are probably many more benefits.&lt;/p&gt;

&lt;p&gt;Thus to me the best way to benefit from containers is to respect them and
their boundaries. Boundaries in two ways actually: On the one hand that the
container can expect that the boundary is always the same, and on the other
hand that the container is not crossing the boundary (and thus avoids touching
anything outside of it&amp;rsquo;s bnoundaries, like i.e. the host).&lt;/p&gt;

&lt;p&gt;For sure there are exceptions where containers need to cross the boundary, i.e.
in KubeVirt, where access to &lt;code&gt;/dev/kvm&lt;/code&gt; is needed.
But each of those escapes can lead to potential other problems.
Search path and tool availability differences between container and the outer
world, authentication issues because of different UIDs/GIDs in an outside of
the container, security issues if stuff is copied outside of the container into
external places, and so on and so forth.&lt;/p&gt;

&lt;p&gt;Why am I iterating over this? Well, even if there are ways in the container
world which allow us to break out, then we should still be very careful with
using them. We loose the benefits of portability and isolation the more we
open up the boundaries.&lt;/p&gt;

&lt;p&gt;For &lt;a href="http://kubevirt.io"&gt;KubeVirt&lt;/a&gt; - for example - we know that we need to cross the boundaries in some
cases, i.e. to access &lt;code&gt;/dev/kvm&lt;/code&gt; - but OTOH we try to not cross them, by not
relying on software (i.e. libvirtd) or other devices (like disks) on the host.
We rather aim at meeting these requirements in container or Kuebrnetes native
ways (containerized libvirtd and persistent volumes in this example).&lt;/p&gt;</regular-body><tag>containers</tag><tag>kubevirt</tag><tag>kubernetes</tag><tag>docker</tag><tag>oci</tag><tag>libvirtd</tag><tag>fedora</tag></post><post id="156725459095" url="https://dummdida.tumblr.com/post/156725459095" url-with-slug="https://dummdida.tumblr.com/post/156725459095/how-to-run-a-virtual-machine-on-kubernetes-using" type="regular" date-gmt="2017-02-02 19:47:15 GMT" date="Thu, 02 Feb 2017 20:47:15" unix-timestamp="1486064835" format="markdown" reblog-key="lo3QrCyZ" slug="how-to-run-a-virtual-machine-on-kubernetes-using" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>How to run a virtual machine on Kubernetes using KubeVirt</regular-title><regular-body>&lt;p&gt;The basic steps we take are:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Build and run the demo VM image&lt;/li&gt;
&lt;li&gt;Play with KubeVirt&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The purpose of this walk through is just to allow you to get a feeling of how
to work with KubeVirt.
Once you are done, feel free to contribute or try out the
&lt;a href="https://github.com/kubevirt/kubevirt/blob/master/docs/getting-started.md"&gt;developer setup which is based on vagrant&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to be on the safe side, then please run this demo on Fedora 25.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by pulling down the KubeVirt Demo repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone &lt;a href="https://github.com/kubevirt/demo.git"&gt;https://github.com/kubevirt/demo.git&lt;/a&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How this demo works, is by building a disk image, which is then booted
by qemu. The benefits are that your host is kept isolated and will not be
affected by the demo.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s build the VM disk image for qemu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd demo
$ make build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The build can now actually take a while, depending on your internet connection.
Once the image was built, we can run it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./run-demo.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you can now run this command again and again, without the need to
rebuild the image each time.&lt;/p&gt;

&lt;p&gt;Now CentOS 7 is booting up. You&amp;rsquo;ll first be greeted by a grub prompt, and end
up in a login prompt.
You&amp;rsquo;ll need to login as &lt;code&gt;root&lt;/code&gt; without a password:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CentOS Linux 7 (Core)
Kernel 3.10.0-514.el7.x86_64 on an x86_64

Login as 'root' to proceed.

kubevirt-demo login: root
Last login: Thu Feb  2 12:18:05 on ttyS0
[root@kubevirt-demo ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well done, you are logged into the VM with a hopefully running Kubernetes
cluster which also contains KubeVirt.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start to play with KubeVirt. KubeVirt is implemented as an add-on to
Kubernetes using TPR (ThirdPartyResources) and custom controllers.
The usage of TPR allows us to reuse Kubernetes&amp;rsquo; API, thus we can use the
usual &lt;code&gt;kubectl&lt;/code&gt; command to control KubeVirt.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check that the cluster is up and running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kubevirt-demo ~]# kubectl get pods
NAME                 READY     STATUS    RESTARTS   AGE
haproxy              1/1       Running   33         16d
libvirtd-90ilw       1/1       Running   10         16d
virt-api             1/1       Running   12         16d
virt-controller      1/1       Running   12         16d
virt-handler-24yw6   1/1       Running   49         16d
[root@kubevirt-demo ~]# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All good - all pods are running.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check if there is already any VM defined:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kubevirt-demo ~]# kubectl get vms
No resources found.
[root@kubevirt-demo ~]# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No - That&amp;rsquo;s okay. Now, let&amp;rsquo;s create one, luckily there is a pre-defined one in
&lt;code&gt;/vm.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kubevirt-demo ~]# cat /vm.json 
{
   "metadata": {
     "name": "testvm"
   },
   "apiVersion": "kubevirt.io/v1alpha1",
   "kind": "VM",
   "spec": {
        "nodeSelector": {"kubernetes.io/hostname":"kubevirt-demo"},
        "domain": {
          "devices": {
            "interfaces": [
              {
                "source": {
                  "network": "default"
                },
                "type": "network"
              }
            ]
          },
          "memory": {
            "unit": "KiB",
            "value": 8192
          },
          "os": {
            "type": {
              "os": "hvm"
            }
          },
          "type": "qemu"
        }
   }
}
[root@kubevirt-demo ~]# kubectl create -f /vm.json 
vm "testvm" created
[root@kubevirt-demo ~]# kubectl get vms
NAME      KIND
testvm    VM.v1alpha1.kubevirt.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But how do we know that it&amp;rsquo;s really running? This can be done by speaking
to libvirt and learn about the created domain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kubevirt-demo ~]# virsh list
 Id    Name                           State
----------------------------------------------------
 2     testvm                         running
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice - It&amp;rsquo;s there. What can we do with it?&lt;/p&gt;

&lt;p&gt;Currently not much - you can actually access it using spice and you can stop
it again.&lt;/p&gt;

&lt;p&gt;To complete the demo we will now be shutting the VM down:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kubevirt-demo ~]# kubectl get vms
NAME      KIND
testvm    VM.v1alpha1.kubevirt.io
[root@kubevirt-demo ~]# kubectl delete vms testvm
vm "testvm" deleted
[root@kubevirt-demo ~]# kubectl get vms
No resources found.
[root@kubevirt-demo ~]# virsh list
 Id    Name                           State
----------------------------------------------------

[root@kubevirt-demo ~]# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations - You just created and delete a VM using KubeVirt via the
Kubernetes API.&lt;/p&gt;

&lt;p&gt;If you had issues or want to provide feedback then reach out to us using
&lt;a href="https://github.com/kubevirt/demo/issues."&gt;https://github.com/kubevirt/demo/issues.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to get round to add disks and network to add some psychedelic colors to the demo.&lt;/p&gt;</regular-body><tag>kubevirt</tag><tag>kubernetes</tag><tag>virtualization</tag><tag>fedora</tag><tag>centos</tag></post><post id="156449301095" url="https://dummdida.tumblr.com/post/156449301095" url-with-slug="https://dummdida.tumblr.com/post/156449301095/pet-vms-in-kubernetes-wth-by-fabian-deutsch" type="link" date-gmt="2017-01-27 17:33:01 GMT" date="Fri, 27 Jan 2017 18:33:01" unix-timestamp="1485538381" format="markdown" reblog-key="PPrwuBy0" slug="pet-vms-in-kubernetes-wth-by-fabian-deutsch" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Pet VMs in Kubernetes? WTH by Fabian Deutsch</link-text><link-url>http://slides.com/fabiand/kubevirt-intro-devconf-2017#/</link-url><link-description>&lt;p&gt;Want to know about KubeVirt - take a look at this slide deck which was presented at devconf.cz 2017.&lt;/p&gt;</link-description><tag>kubevirt</tag><tag>virtualization</tag><tag>kubernetes</tag><tag>fedora</tag><tag>devconfcz</tag></post><post id="156358542605" url="https://dummdida.tumblr.com/post/156358542605" url-with-slug="https://dummdida.tumblr.com/post/156358542605/hello-kubevirt" type="regular" date-gmt="2017-01-25 16:18:22 GMT" date="Wed, 25 Jan 2017 17:18:22" unix-timestamp="1485361102" format="markdown" reblog-key="8hxgFAkk" slug="hello-kubevirt" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Hello KubeVirt</regular-title><regular-body>&lt;p&gt;&lt;a href="https://dummdida.tumblr.com/post/155910978455/one-way-to-represent-and-handle-virtual-machines"&gt;Previously&lt;/a&gt; I&amp;rsquo;ve been looking a little into how VMs could be run on a cluster manager like Kubernetes.&lt;/p&gt;

&lt;p&gt;And the previous post was already pretty specific about the design of such a solution.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://github.com/kubevirt/community/raw/master/logo/kubevirt-pre.png" width="250px" title="KubeVirt Logo"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://kubevirt.io"&gt;KubeVirt&lt;/a&gt; is a &lt;a href="https://github.com/kubevirt"&gt;project&lt;/a&gt; implementing this approach.
Thus running virtual machines on top of Kubernetes by using Kubernetes TPRs and custom controllers and daemons.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve been actually working on it for a while, and are finally in a shape were there is a (hopefully) easy to use demo. Just give the following command a try on your Fedora 25 machine:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ curl run.kubevirt.io/demo.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will normally not wreck your host, but instead download a virtual machine and deploy Kubernetes and KubeVirt in it. Afterwards you can easily access it to play around.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://asciinema.org/a/98980"&gt;&lt;img src="https://asciinema.org/a/98980.png" alt="asciicast"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to &lt;a href="https://github.com/kubevirt/kubevirt"&gt;browse our code&lt;/a&gt;, documentation, and designs at &lt;a href="https://github.com/kubevirt/kubevirt."&gt;https://github.com/kubevirt/kubevirt.&lt;/a&gt;
Or provide fixes to the demo at &lt;a href="https://github.com/kubevirt/demo."&gt;https://github.com/kubevirt/demo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will also be giving two talks at&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;DevConf.cz 2017 - Friday, Jan 28, 15:00 - &lt;a href="https://devconf.cz/schedule.html"&gt;&amp;ldquo;WTH - Kubernetes and pet VMs? No way.&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FOSDEM 2017 - Saturday, Feb 04, 12:30 - &lt;a href="https://fosdem.org/2017/schedule/event/iaas_petconuni/"&gt;&amp;ldquo;Pet-VMs and Containers united?&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In addition there is also a small day-long &lt;a href="https://github.com/kubevirt/community/tree/master/devconf-unconference-2017"&gt;KubeVirt gathering at DevConf.cz 2017&lt;/a&gt;. &lt;/p&gt;</regular-body><tag>fedora</tag><tag>kubernetes</tag><tag>kubevirt</tag><tag>libvirt</tag><tag>fosdem</tag><tag>devconf</tag></post><post id="156083785135" url="https://dummdida.tumblr.com/post/156083785135" url-with-slug="https://dummdida.tumblr.com/post/156083785135/ever-wondered-about-the-ovirt-engine-appliance" type="photo" date-gmt="2017-01-19 16:08:09 GMT" date="Thu, 19 Jan 2017 17:08:09" unix-timestamp="1484842089" format="markdown" reblog-key="ItCwC9ir" slug="ever-wondered-about-the-ovirt-engine-appliance" state="published" is_reblog="false" tumblelog="dummdida" width="12362" height="2075"><photo-caption>&lt;p&gt;Ever wondered about the oVirt Engine Appliance dependencies.&lt;/p&gt;

&lt;p&gt;This is a nice chart - the different colors of the node encode the size of the package (green lt 10MB, yellow lt 40MB, red gt 40MB).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1401931#c5"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to get a scissor and trim this dependency tree.&lt;/p&gt;</photo-caption><photo-url max-width="1280">https://66.media.tumblr.com/9b7c491f2359c782d8348365af89553a/tumblr_ok1bhlaRkF1st6sz0o1_1280.png</photo-url><photo-url max-width="500">https://66.media.tumblr.com/9b7c491f2359c782d8348365af89553a/tumblr_ok1bhlaRkF1st6sz0o1_500.png</photo-url><photo-url max-width="400">https://66.media.tumblr.com/9b7c491f2359c782d8348365af89553a/tumblr_ok1bhlaRkF1st6sz0o1_400.png</photo-url><photo-url max-width="250">https://66.media.tumblr.com/9b7c491f2359c782d8348365af89553a/tumblr_ok1bhlaRkF1st6sz0o1_250.png</photo-url><photo-url max-width="100">https://66.media.tumblr.com/9b7c491f2359c782d8348365af89553a/tumblr_ok1bhlaRkF1st6sz0o1_100.png</photo-url><photo-url max-width="75">https://66.media.tumblr.com/9b7c491f2359c782d8348365af89553a/tumblr_ok1bhlaRkF1st6sz0o1_75sq.png</photo-url><tag>ovirt</tag><tag>node</tag><tag>appliance</tag><tag>fedora</tag></post><post id="155910978455" url="https://dummdida.tumblr.com/post/155910978455" url-with-slug="https://dummdida.tumblr.com/post/155910978455/one-way-to-represent-and-handle-virtual-machines" type="regular" date-gmt="2017-01-15 20:45:42 GMT" date="Sun, 15 Jan 2017 21:45:42" unix-timestamp="1484513142" format="markdown" reblog-key="Qbl7NN1G" slug="one-way-to-represent-and-handle-virtual-machines" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>One way to represent and handle Virtual Machines in Kubernetes.</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/lukehan/4521742570/in/photolist-7Tz7wN-7Tz7cJ-ebdyvv-A8mNm-fqXrx-avrmgP-4z9LEf-7HfRFA-oBB3To-nTgZkJ-ptES9t-5tPkKz-r94pJe-82bfbU-ato4TT-7zMzZB-o8n3Ur-4z9NVY-4z5xaM-4z9LTQ-8gHVmg-okSvMS-7UvPFS-auohod-9r7sTb-jGF22b-nQ59Wy-aTcEnX-bUCFkJ-85FRcC-5waDhE-fdQyoC-jDwYG-5J4NKo-55qfVj-emYsTq-nGE6fY-5jDdf5-oDN6NJ-nKt1Zg-au8v9R-4z5wrn-begGUR-apKFRT-bRSnJv-kariPr-p6YGQ-9c2Xx5-9uycmw-4yRfQS" title="Cardstock model 1"&gt;&lt;img src="https://c1.staticflickr.com/5/4036/4521742570_11258c4bcd_z.jpg" width="640" height="414" alt="Cardstock model 1"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Extending Kubernetes to understand handling Virtual Machines. But how?&lt;/p&gt;

&lt;p&gt;In the previous post it became obvious that VMs are sometimes used in Kubernetse, but they can not be fine tuned, because they are often used in a way which is transparent to the user, thus a user does not gain any direct access to the VM. To gain direct access to all VM properties we thus need to explicitly represent VMs inside Kubernetes.&lt;/p&gt;

&lt;p&gt;So, what can be done? We need to define a VM type in Kubernetes. Once the type is there, we have the ability to fine define all relevant properties. But how can this be done? Kubernetes has support for so called 3rd party resources (TPR). But let’s take a step back to have a broader context to understand what they are.&lt;/p&gt;

&lt;p&gt;In general, Kubernetes works in a declarative and reactive way. A user creates objects of a specific kind through the Kubernetes REST API. There are controllers inside the cluster which are responsible for each and every type supported by Kubernetes. Once a controller sees a new instance of a specific type, he reacts and performs the necessary steps to bring such an object to life. For example, if a user posts a pod specification to the API server, a controller will see this new specification and get the pod scheduled on a host, where the kubelet is then instanciating this pod.&lt;/p&gt;

&lt;p&gt;Thus: For every type which is known to Kubernetes there is a controller responsible for handling it.&lt;/p&gt;

&lt;p&gt;TPRs are now a way to declare additional types in the Kubernetes API. After you declared such a new type, a user can post objects of this type to the Kuebrnetes API, Kubernetes will then store them as any other object. They can actually be manipulated like any other object. (In reality there are afew bugs and limitations).&lt;/p&gt;

&lt;p&gt;Thus we could easily use a TPR to declare a VM type within Kubernetes. And the Kubernetes REST API can be used to modify objects of this type.&lt;/p&gt;

&lt;p&gt;The issue is that Kubernetes does store this type, but there is no controller in the cluster or daemon on a node which knows how to handle these objects.&lt;/p&gt;

&lt;p&gt;So the second thing we need to do, is to come up with controllers and daemons to provide the cluster and node wide virtualzation logic to Kubernetes. They can ideally be shipped as containers - which will allow us to directly leverage existing Kubernetes functionality like DaemonSets or ReplicaSets.&lt;/p&gt;

&lt;p&gt;That’s the high-level picture. In a picture:&lt;/p&gt;

&lt;p&gt;A long time ago in a Kubernetes far, far away …&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            User
              |
              v
+-----------------------------------------+
| API Server                              |
+ - - - - - - - - - - - - - - - - - - - - +
| [RC Foo]                 [VM Bar]       |
+----A-----------------------A------------+
     |                       |
     | watching for RCs      | watching for VMs
     |                       |
+---------------+        +-----------------+
| rc-controller |        | virt-controller |  NEW
+---------------+        +-----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what do we gain? Up to now gain a little. For example we would inherit the deployment features of the cluster. Instead of having our own oVirt logic to turn hosts into cluster nodes, we inherit Kuebrnetes functionality on that front. By shipping the logic for controllers and daemons in containers, we gain functionality for delivery for free (&lt;code&gt;DaemonSets&lt;/code&gt; will ensure that a daemon is always running on all hosts in the cluster). Also some kind of failover (&lt;code&gt;ReplicaSets&lt;/code&gt;). We also get a communication channel between them for free (network). Also the datastore for VM specifications (API Server).
Even more challenging, but by putting our stuff into containers, we isolate ourselfs from the hosts - to some degree. The ramining host specific bits can then hopefully pushed into dedicated places - to gain more OS independence - so it does not matter if we are running on CentOS, Fedora, Atomic, Alpine, or Ubuntu.&lt;/p&gt;

&lt;p&gt;This all looks to good, yes. There are drawbacks, i.e. we need to adopt our software to play well with Kubernetes. And we will need to to adopt the declarative and reactive patterns.&lt;/p&gt;

&lt;p&gt;And it’s also tricky in the detail. We would accept that the kubelet is the designated node level resource manager. This is tricky in virtualization, as there might be conflicts between what the kubelet is planning and virtualization side’s needs. However, these problems - that there might be conflicts between what a workload wants and what the kubelet wants - are not virtulization specific. Therefor I’m optimistic that there will be ways of cooperating with the kubelet to solve these kind of conflicts.&lt;/p&gt;

&lt;p&gt;Another thing is that containers are usually - well - contained. And our daemons will need access to physical hardware, for example to do device passthrough.&lt;/p&gt;

&lt;p&gt;A few steps forward, but also a few back …&lt;/p&gt;</regular-body><tag>kubernetes</tag><tag>kubevirt</tag><tag>declarative</tag><tag>reactive</tag><tag>virtualization</tag><tag>fedora</tag><tag>centos</tag></post><post id="155822676700" url="https://dummdida.tumblr.com/post/155822676700" url-with-slug="https://dummdida.tumblr.com/post/155822676700/one-way-to-represent-and-handle-virtual-machines" type="regular" date-gmt="2017-01-13 22:00:47 GMT" date="Fri, 13 Jan 2017 23:00:47" unix-timestamp="1484344847" format="markdown" reblog-key="RZTqWHP3" slug="one-way-to-represent-and-handle-virtual-machines" state="private" is_reblog="false" tumblelog="dummdida" private="true"><regular-title>One way to represent and handle Virtual Machines in Kubernetes</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/lukehan/4521742570/in/photolist-7Tz7wN-7Tz7cJ-ebdyvv-A8mNm-fqXrx-avrmgP-4z9LEf-7HfRFA-oBB3To-nTgZkJ-ptES9t-5tPkKz-r94pJe-82bfbU-ato4TT-7zMzZB-o8n3Ur-4z9NVY-4z5xaM-4z9LTQ-8gHVmg-okSvMS-7UvPFS-auohod-9r7sTb-jGF22b-nQ59Wy-aTcEnX-bUCFkJ-85FRcC-5waDhE-fdQyoC-jDwYG-5J4NKo-55qfVj-emYsTq-nGE6fY-5jDdf5-oDN6NJ-nKt1Zg-au8v9R-4z5wrn-begGUR-apKFRT-bRSnJv-kariPr-p6YGQ-9c2Xx5-9uycmw-4yRfQS" title="Cardstock model 1"&gt;&lt;img src="https://c1.staticflickr.com/5/4036/4521742570_11258c4bcd_z.jpg" width="640" height="414" alt="Cardstock model 1"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Extending Kubernetes to understand handling Virtual Machines. But how?&lt;/p&gt;

&lt;p&gt;In the previous post it became obvious that VMs are sometimes used in Kubernetse, but they can not be fine tuned, because they are often used in a way which is transparent to the user, thus a user does not gain any direct access to the VM. To gain direct access to all VM properties we thus need to explicitly represent VMs inside Kubernetes.&lt;/p&gt;

&lt;p&gt;So, what can be done? We need to define a VM type in Kubernetes. Once the type is there, we have the ability to fine define all relevant properties. But how can this be done? Kubernetes has support for so called 3rd party resources (TPR). But let’s take a step back to have a broader context to understand what they are.&lt;/p&gt;

&lt;p&gt;In general, Kubernetes works in a declarative and reactive way. A user creates objects of a specific kind through the Kubernetes REST API. There are controllers inside the cluster which are responsible for each and every type supported by Kubernetes. Once a controller sees a new instance of a specific type, he reacts and performs the necessary steps to bring such an object to life. For example, if a user posts a pod specification to the API server, a controller will see this new specification and get the pod scheduled on a host, where the kubelet is then instanciating this pod.&lt;/p&gt;

&lt;p&gt;Thus: For every type which is known to Kubernetes there is a controller responsible for handling it.&lt;/p&gt;

&lt;p&gt;TPRs are now a way to declare additional types in the Kubernetes API. After you declared such a new type, a user can post objects of this type to the Kuebrnetes API, Kubernetes will then store them as any other object. They can actually be manipulated like any other object. (In reality there are afew bugs and limitations).&lt;/p&gt;

&lt;p&gt;Thus we could easily use a TPR to declare a VM type within Kubernetes. And the Kubernetes REST API can be used to modify objects of this type.&lt;/p&gt;

&lt;p&gt;The issue is that Kubernetes does store this type, but there is no controller in the cluster or daemon on a node which knows how to handle these objects.&lt;/p&gt;

&lt;p&gt;So the second thing we need to do, is to come up with controllers and daemons to provide the cluster and node wide virtualzation logic to Kubernetes. They can ideally be shipped as containers - which will allow us to directly leverage existing Kubernetes functionality like DaemonSets or ReplicaSets.&lt;/p&gt;

&lt;p&gt;That’s the high-level picture. In a picture:&lt;/p&gt;

&lt;p&gt;A long time ago in a Kubernetes far, far away …&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            User
              |
              v
+-----------------------------------------+
| API Server                              |
+ - - - - - - - - - - - - - - - - - - - - +
| [RC Foo]                 [VM Bar]       |
+----A-----------------------A------------+
     |                       |
     | watching for RCs      | watching for VMs
     |                       |
+---------------+        +-----------------+
| rc-controller |        | virt-controller |  NEW
+---------------+        +-----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what do we gain? Up to now gain a little. For example we would inherit the deployment features of the cluster. Instead of having our own oVirt logic to turn hosts into cluster nodes, we inherit Kuebrnetes functionality on that front. By shipping the logic for controllers and daemons in containers, we gain functionality for delivery for free (&lt;code&gt;DaemonSets&lt;/code&gt; will ensure that a daemon is always running on all hosts in the cluster). Also some kind of failover (&lt;code&gt;ReplicaSets&lt;/code&gt;). We also get a communication channel between them for free (network). Also the datastore for VM specifications (API Server).
Even more challenging, but by putting our stuff into containers, we isolate ourselfs from the hosts - to some degree. The ramining host specific bits can then hopefully pushed into dedicated places - to gain more OS independence - so it does not matter if we are running on CentOS, Fedora, Atomic, Alpine, or Ubuntu.&lt;/p&gt;

&lt;p&gt;This all looks to good, yes. There are drawbacks, i.e. we need to adopt our software to play well with Kubernetes. And we will need to to adopt the declarative and reactive patterns.&lt;/p&gt;

&lt;p&gt;And it’s also tricky in the detail. We would accept that the kubelet is the designated node level resource manager. This is tricky in virtualization, as there might be conflicts between what the kubelet is planning and virtualization side’s needs. However, these problems - that there might be conflicts between what a workload wants and what the kubelet wants - are not virtulization specific. Therefor I’m optimistic that there will be ways of cooperating with the kubelet to solve these kind of conflicts.&lt;/p&gt;

&lt;p&gt;Another thing is that containers are usually - well - contained. And our daemons will need access to physical hardware, for example to do device passthrough.&lt;/p&gt;

&lt;p&gt;A few steps forward, but also a few back …&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>virtualization</tag><tag>kubernetes</tag><tag>kubevirt</tag><tag>declarative</tag><tag>reactive</tag><tag>fedora</tag><tag>atomic</tag><tag>alpine</tag><tag>centos</tag></post><post id="155489529695" url="https://dummdida.tumblr.com/post/155489529695" url-with-slug="https://dummdida.tumblr.com/post/155489529695/virtual-machines-in-kubernetes-how-and-what-makes" type="regular" date-gmt="2017-01-06 18:09:18 GMT" date="Fri, 06 Jan 2017 19:09:18" unix-timestamp="1483726158" format="markdown" reblog-key="M9YoseRv" slug="virtual-machines-in-kubernetes-how-and-what-makes" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Virtual Machines in Kubernetes? How and what makes sense?</regular-title><regular-body>&lt;p&gt;Happy new year.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/evergreenkamal/363500050/in/photolist-y82Uf-bFbdXD-akYSMg-a1noSu-6AxPpQ-j7yfd9-bucAUa-e5BBjX-6Ra2aP-aw5sGG-e5HfmE-6AtPLM-nVGBRt-arkwTw-ewo8KE-pbL9rF-p1pEMP-pXCcKc-ehTbw2-6M7qza-bCCaLv-p1qGmN-6r4cFE-ngV8r2-4MZEA9-bJjHHT-4yr6AY-3D9j5a-48rmTE-48nkag-am2HbQ-bpVKWL-48nk4X-48nk8a-5VMiXs-48rmQW-8mk8Kd-bpVL7o-bBmac5-48rmsf-am2FVw-48nkbT-9BkTHS-FJ8wQz-9Bi1Cv-9bCJA5-bCQEQZ-4vXJKK-5FGk2A-5VGXTB" title="Rolls of Hay"&gt;&lt;img src="https://c3.staticflickr.com/1/110/363500050_64e0f1ff18_z.jpg" width="640" height="225" alt="Rolls of Hay"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I stopped by saying that &lt;a href="https://kubernetes.io"&gt;Kubernetes&lt;/a&gt; can run containers on a cluster.
This implies that it can perform some cluster operations (i.e. scheduling).
And the question is if the cluster logic plus some virtualization logic can actually provide us virtualization functionality as we know it from oVirt.&lt;/p&gt;

&lt;p&gt;Can it?&lt;/p&gt;

&lt;p&gt;Maybe. At least there are a few approaches which already tried to run VMs within or on-top of Kubernetes.&lt;/p&gt;

&lt;p&gt;Note. I&amp;rsquo;m happy to get input on clarifications for the following implementations.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://hyper.sh/"&gt;&lt;strong&gt;Hyper&lt;/strong&gt;&lt;/a&gt; created a fork to launch the container runtimes inside a VM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-proxy
          |
          v
[VM | docker-runtime]
          |
          + container
          + container
          :
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://github.com/hyperhq/runv/"&gt;&lt;strong&gt;runV&lt;/strong&gt;&lt;/a&gt; is also from hyper. It is a OCI compatible container runtime. But instead of launching a container, this runtime will really launch a VM (libvirtd, qemu, …) with a given kernel, initrd and a given docker (or OCI) image.&lt;/p&gt;

&lt;p&gt;This is pretty straight forward, thanks to the OCI standard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kubernetes/frakti"&gt;&lt;strong&gt;frakti&lt;/strong&gt;&lt;/a&gt; is actually a component implementing Kubernetes CRI (container runtime interface), and it can be used to run VM-isolated-containers in Kubernetes by using Hyper above.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/coreos/rkt/blob/master/Documentation/running-kvm-stage1.md"&gt;&lt;strong&gt;rkt&lt;/strong&gt;&lt;/a&gt; is actually a container runtime, but it supports to be run inside of KVM. To me this looks similar to runv, as a a VM is used for isolation purpose around a &lt;em&gt;pod&lt;/em&gt; (not a single container).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  host OS
    └─ rkt
      └─ hypervisor
        └─ kernel
          └─ systemd
            └─ chroot
              └─ user-app1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://clearlinux.org/"&gt;&lt;strong&gt;ClearContainers&lt;/strong&gt;&lt;/a&gt; seem to be also much like runv and the alternative stage1 for rkt.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rancher/vm"&gt;&lt;strong&gt;RancherVM&lt;/strong&gt;&lt;/a&gt; is using a different approach - The VM is run inside the contianer, instead of wrapping it (like the approaches above). This means the container contains the VM &lt;em&gt;runtime&lt;/em&gt; (qemu, libirtd, …).
The VM can actually be directly adressed, because it&amp;rsquo;s an explicit component.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  host OS
    └─ docker
      └─ container
      └─ VM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This brings me to the wrap-up.
Most of the solutions above use VMs as an isolation mechanism to containers. This happens transparently - as far as I can tell the VM is not directly exposed to higher levels, an dcan thus not be directly adressed in the sense of configured (i.e. adding a second display).&lt;/p&gt;

&lt;p&gt;Except for the &lt;strong&gt;RancherVM&lt;/strong&gt; solution where the VM is running inside a container. Her ethe VM is layered on-top, and is basically not hidden in the stack. By default the VM is inheriting stuff form the &lt;em&gt;pod&lt;/em&gt; (i.e. networking, which is pretty incely solved), but it would also allow to do more with the VM.&lt;/p&gt;

&lt;p&gt;So what is the take away? So, so, I would say. Looks like there is at least interest to somehow get VMs working for the one or the other use-case in the Kubernetes context.
In most cases the Vm was hidden in the stack - this currently prevents to directly access and modify the VM, and it actually could imply that the VM is handled like a pod. Which actually means that the assumptions you have on a container will also apply to the VM. I.e. it&amp;rsquo;s stateless, it can be killed, and reinstantiated. (This statement is pretty rough and hides a lot of details).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VM&lt;/strong&gt; The issue is that we do care about VMs in oVirt, and that we love modifying them - like adding a second display, migrating them, tuning boot order and other fancy stuff. &lt;em&gt;RancherVM&lt;/em&gt; looks to be going into a direction where we could tnue, but the others don&amp;rsquo;t seem to help here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cluster&lt;/strong&gt; Another question is: All the implementations above cared about running a VM, but oVirt is also caring about more, it&amp;rsquo;s caring about cluster tasks - i.e. live migration, host fencing. And if the cluster tasks are on Kubernetes shoulders, then the question is: Does Kubernetes care about them as much as oVirt does? Maybe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conceptually&lt;/strong&gt; Where do VMs belong? Above implementations hide the VM details (except &lt;em&gt;RancherVM&lt;/em&gt;) - one reaosn is that Kubernetes does not care about this. Kubernetes does not have a concept for VMs- not for isolation and not as an explicit entity.
And the questoin is: Should Kubernetes care?
Kubernetes is great on Containers - and VMs (in the oVirt sense) are so much more. Is it worth to push all the needed knowledge into Kubernetes? And would this actually see acceptance from Kubernetes itself?&lt;/p&gt;

&lt;p&gt;I tend to say No. The strength of Kubernetes is that it does one thing, and it does it well.
Why should it get so bloated to expose all VM details?&lt;/p&gt;

&lt;p&gt;But maybe it can learn to run VMs, and knows enough about them, to provifde a mechanism to pass through additional configuration to fine tune a VM.&lt;/p&gt;

&lt;p&gt;Many open questions. But also a little more knowledge - and a post that got a little long.&lt;/p&gt;</regular-body><tag>kubernetes</tag><tag>ovirt</tag><tag>rkt</tag><tag>ranchervm</tag><tag>hypersh</tag><tag>runv</tag><tag>frakti</tag><tag>clearcontainers</tag><tag>fedora</tag><tag>kubevirt</tag></post><post id="154820293600" url="https://dummdida.tumblr.com/post/154820293600" url-with-slug="https://dummdida.tumblr.com/post/154820293600/generic-cluster-management-virtualization-flavor" type="regular" date-gmt="2016-12-22 21:23:18 GMT" date="Thu, 22 Dec 2016 22:23:18" unix-timestamp="1482441798" format="markdown" reblog-key="Aqm7D8wL" slug="generic-cluster-management-virtualization-flavor" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Generic Cluster Management + Virtualization Flavor</regular-title><regular-body>&lt;blockquote&gt;
  &lt;p&gt;oVirt is managing a cluster of machines, which form the infrastructure to run virtual machines on top.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes - That&amp;rsquo;s true. We can even formulate this - without any form of exaggeration and you can probably even find a proof for this - mathematically:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Generic Cluster Knowledge
+ Virtualization Specific Cluster Knowledge
--------------------------------------------------------
  Absolutely Complete Virtualization Management Solution
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might disagree with this view, that&amp;rsquo;s fine - it is just one of many views on this topic.
But for the sake of discussion, let&amp;rsquo;s take this view.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/auyongcheemeng/189798921/" title="Add maths"&gt;&lt;img src="https://c2.staticflickr.com/1/49/189798921_0807b0e165_z.jpg" width="640" height="291" alt="Add maths"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;What I consider to be &lt;em&gt;generic&lt;/em&gt; cluster knowledge is stuff like:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Host maintenance mode&lt;/li&gt;
&lt;li&gt;Fencing&lt;/li&gt;
&lt;li&gt;To some degree even scheduling&lt;/li&gt;
&lt;li&gt;Upgrading a cluster&lt;/li&gt;
&lt;li&gt;Deploying a cluster (i.e. the node lifecycle, like joining a cluster)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Besides of that even broader topics are not specific to virtualization like i.e. storage - regardless of what is running on a cluster - you do need to provide storage to it, or at least run it of some storage (don&amp;rsquo;t pull out PXE now …).
The same is true for networking - Workloads on a cluster are usually not isolated, and thus need a way to communicate.&lt;/p&gt;

&lt;p&gt;And then there are workload &lt;em&gt;specific&lt;/em&gt; bits, i.e. in oVirt it is all about virtualization:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Specific metrics for scheduling&lt;/li&gt;
&lt;li&gt;Logic to create VMs (busses, devices, look at a domxml)&lt;/li&gt;
&lt;li&gt;Different scheduling strategies&lt;/li&gt;
&lt;li&gt;Hotplugging&lt;/li&gt;
&lt;li&gt;Live Migration&lt;/li&gt;
&lt;li&gt;Specifics on network on storage related to virtualization&lt;/li&gt;
&lt;li&gt;Host device passthrough&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;… to name just a few. These (and many more) form the virtualization specific knowledge in oVirt.&lt;/p&gt;

&lt;p&gt;So why is it so important to me to separate the logic contained in oVirt in this particular way?
Well - oVirt is interesting to people who want to manage VMs (on a data center scale and reliability level). This is pretty specific. And it&amp;rsquo;s all tightly integrated inside of oVirt. Which is good on the one hand, because we can tune it at any level towards our specific use-case.
The drawback is that we need to write every level in this stack mostly by ourselves.&lt;/p&gt;

&lt;p&gt;Wit this separation at hand, we can see that this kind of generic cluster functionality might be found in other cluster managers as well (maybe not exactly, but to a some degree).
If such a cluster manager exists, then we could look and see if it makes sense to share functionality, and then - to tune it towards our use-case - just add our flavor.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/pulpolux/510529436/in/photolist-M7ABE-aB2orb-4CW72b-aAZmj6-eSt8mM-afYK8R-aATnWy-aAYPS4-aATHu1-7kTSoY-4gf7vj-4CVUt9-8bXZ7W-aAZ5wD-aAQKgp-JkFUW-aARewi-aMq7p-aAZh9D-aAYNPB-aB2LX7-9vYEZo-oL214g-aATsF3-7BujwB-aAQJwz-aAR5UF-aATsd3-aAT9xo-5ToATT-7K2wBF-pwFVJ2-d7vwuA-7K6sy7-9oDYNr-4CVUiL-D5YNh-8HwSG7-aATged-6EfA6j-aATpKC-aB34eU-aAQuXz-uswER-XniF-aAQqzR-6Lngyx-aAZ25K-aAZ6xH-eib4TY" title="Any flavor you like V5.0"&gt;&lt;img src="https://c5.staticflickr.com/1/204/510529436_c27e72623a_z.jpg" width="640" height="426" alt="Any flavor you like V5.0"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;ldquo;Yes, but …&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, so true - but let&amp;rsquo;s continue for now.&lt;/p&gt;

&lt;p&gt;A sharp look into the sea of technology reveals a few cluster managers. One of them is &lt;a href="https://kubernetes.io"&gt;Kubernetes&lt;/a&gt; (which is also available on Fedora and CentOS).&lt;/p&gt;

&lt;p&gt;It &lt;a href="http://kubernetes.io/docs/whatisk8s/"&gt;describes itself&lt;/a&gt; as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kubernetes is an open-source platform for automating deployment, scaling, and operations of application containers across clusters of hosts, providing container-centric infrastructure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes - the &lt;em&gt;container&lt;/em&gt; word was mentioned. Let&amp;rsquo;s not go into it this right now, but instead, let&amp;rsquo;s continue.&lt;/p&gt;

&lt;p&gt;After looking a bit into Kubernetes it looks like there are areas - the generic bits - in which there is an overlap between Kubernetes and oVirt.&lt;/p&gt;

&lt;p&gt;Yes - There are also gaps, granted, but that is acceptable, as we always start with gaps and find ways to master them. And sometimes you are told to mind the gap - but that&amp;rsquo;s something else.&lt;/p&gt;

&lt;p&gt;Getting back to the topic - If we now consider VMs to be just yet another workload, and that VM management is actually just an (in oVirt a Java) application (excluding the exceptions), then the gap might not be that large anymore.&lt;/p&gt;

&lt;p&gt;… until you get to the exceptions - and the details.
But that is something for next year.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>kubernetes</tag><tag>fedora</tag><tag>centos</tag><tag>cluster</tag><tag>manager</tag><tag>virtualization</tag><tag>kubevirt</tag></post><post id="154548750520" url="https://dummdida.tumblr.com/post/154548750520" url-with-slug="https://dummdida.tumblr.com/post/154548750520/qemu-install-ha" type="regular" date-gmt="2016-12-16 14:37:38 GMT" date="Fri, 16 Dec 2016 15:37:38" unix-timestamp="1481899058" format="markdown" reblog-key="JJtoGTgR" slug="qemu-install-ha" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>qemu-install - Ha!</regular-title><regular-body>&lt;pre&gt;&lt;code&gt;     $ qemu-install() { virt-install --print-xml $@ | sudo -E virsh domxml-to-native qemu-argv /dev/stdin ; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But libvirtd does more than this, so take care and don&amp;rsquo;t expect to much.&lt;/p&gt;</regular-body><tag>qemu</tag><tag>libvirt</tag></post><post id="154328039055" url="https://dummdida.tumblr.com/post/154328039055" url-with-slug="https://dummdida.tumblr.com/post/154328039055/advent-and-adventures" type="regular" date-gmt="2016-12-11 12:12:34 GMT" date="Sun, 11 Dec 2016 13:12:34" unix-timestamp="1481458354" format="markdown" reblog-key="Qa3DwzGE" slug="advent-and-adventures" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Advent and adventures</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/mappix/2086030921/in/photolist-4bksjn-dVcE-qxbPat-vo8eP-abycWf-iqhaaA-4ctPoX-b8dZ9k-vguVh-ztpT-4g1HUc-urEJK-mVM4Xf-5RGobB-7o7dqB-ChVFNu-a2AWX-itg1ri-dAKozp-q4kYsj-iob6VW-92xbJr-ify5zw-91fnRC-dGCwAi-93w4cY-dCsy13-7qVXRt-ihGxNU-4iAJyG-BoVzSC-v9GCZ-bcqh74-v9GCY-oDJiMr-b3gdRV-8YbTCp-5Ko2bK-7nn1L5-4fXZvD-pteP8u-qbgP48-e9j8L-ffNWyE-97p9dh-jZ3AGv-dBKdWZ-8YRfMh-dzJDn3-aWmqZi" title="O' Tannenbaum"&gt;&lt;img src="https://c1.staticflickr.com/3/2106/2086030921_80cf29799e_z.jpg?zz=1" width="461" height="640" alt="O' Tannenbaum"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;(I think I used this picture before, and it&amp;rsquo;s still nice).&lt;/p&gt;

&lt;p&gt;Happy third advent.&lt;/p&gt;

&lt;p&gt;oVirt Node - some time has passed since it&amp;rsquo;s 4.0 release. We are actually close to finish 4.1. So far Node 4.0 (which is a redesign and is based on LVM to allow atomic rollbacks and a customizable file-system at the same time - and image based updates) has turned out to be quite stable at runtime.
The bigger bugs which turned up, were in the areas where we expected them - the affected areas are points where we diverge from the stock operating system: kernel/initd location (some tools don&amp;rsquo;t work with our kernel/initrd locations), updates (you can update an image to itself), and image size (just generally slow).
In oVirt 4.1 (and even in 4.0.z) we are still working to fix each of those issues one by one.
We don&amp;rsquo;t want to rush, because we want to find the right solution.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/7363531@N05/3918561478/" title="IMG_1050.jpg"&gt;&lt;img src="https://c7.staticflickr.com/4/3421/3918561478_3ec720b8ca_z.jpg" width="640" height="480" alt="IMG_1050.jpg"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;(We are stuck in a hamster wheel, but we do make progress)&lt;/p&gt;

&lt;p&gt;On the long run we mainly got stabilization on our plate, and smaller improvements. A larger upcoming change is to allow an anaconda installclass to define installation constraints. We need this to enforce a specific partitioning layout. Let&amp;rsquo;s see if we can come up with something reasonable for upstream.&lt;/p&gt;

&lt;p&gt;At the bottom line this &lt;em&gt;logical rebase&lt;/em&gt; of Node onto fresh Fedora/CentOS technologies seems to have paied out for now.
It reduced the number of bugs we had - especially around boot, hardware support, and persistence - it also reduced the amount of work we had to do on our administration UI - because we now leverage Cockpit (well - we actually need to find some time here to fix osme bugs in Cockpit which we uncovered when our flows got tested).
The rebase allows us to share more code with other communities. Both of this is good to me: &lt;em&gt;share&lt;/em&gt; and &lt;em&gt;other communities&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Could this model actually be something we could apply to more of oVirt?
&lt;a href="http://www.ovirt.org"&gt;oVirt&lt;/a&gt; is managing &lt;em&gt;your&lt;/em&gt; datacenter (If not, then you want to try it ;) ) - To me the question is: Where do we have the &lt;em&gt;opportunity&lt;/em&gt; to &lt;em&gt;share&lt;/em&gt; more code with &lt;em&gt;other communities&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Actually - We already do this to some degree. Like right now - heros are working on finally bringing NetworkManager support to vdsm. It&amp;rsquo;s crucial to have a nice Cockpit integration.
But it&amp;rsquo;s also a lot of work. oVirt has grown for years from a closed .Net project to an open-source Java and Python project (Yes, there are omre languages involved) with a pretty broad user base (from what I can tell).&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/erix/2095949332/" title="Hero"&gt;&lt;img src="https://c5.staticflickr.com/3/2195/2095949332_973cd9c237_z.jpg" width="640" height="480" alt="Hero"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;(A hero)&lt;/p&gt;

&lt;p&gt;Without risking the stability of the project it&amp;rsquo;s difficult to share code with other projects, because sharing code brings it&amp;rsquo;s own requirements i.e. schedule alignment and (obviously) our integration with this other (and always changing) project.
Like for vdsm above: It was and is not easy to finally integrate NetworkManager into vdsm - but I&amp;rsquo;m confident that it will pay out.
It actually already does - because of our integration with NetworkManager, bugs were found in Cockpit and NetworkManager.
We don&amp;rsquo;t benefit from this directly - because for us it just means that we finally reach feature parity with our NetworkManager integration- but all users of NetworkManager benefit. It&amp;rsquo;s just harder to see, because it&amp;rsquo;s an indirect benefit. And in future we hopefully benefit by inheriting bug fixes and more features of NetworkManager.&lt;/p&gt;

&lt;p&gt;So - It&amp;rsquo;s not easy to share and collaborate, but is it easier to build everything ouselves?&lt;/p&gt;

&lt;p&gt;What can we - oVirt - share with others? Are there elements to share which are useful for us and would be useful for others too? Or: Are there already things out there which we could leverage more and collaborate with others?
We&amp;rsquo;ll need to see, we need to look to see what we use in &lt;a href="https://gerrit.ovirt.org/#/admin/projects/"&gt;our own backyard&lt;/a&gt;, and we need to look to see what there is in the &lt;a href="https://octoverse.github.com/"&gt;neighbourhood&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/petithiboux/6514048257/" title="cluster"&gt;&lt;img src="https://c2.staticflickr.com/8/7167/6514048257_40a535c844_z.jpg" width="640" height="428" alt="cluster"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;(This is a cluster, a cluster of lamps)&lt;/p&gt;

&lt;p&gt;oVirt is managing a cluster of machines, which form the infrastructure to run virtual machines on top.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with this high-level view - and a couple of Spekulatius.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/saaleha/6770106561/in/photolist-EkCM9x-9x8PfA-dNhZxe-7xSWLo-v76P2-9x8NE5-9vSSAA-9vPQbT-dG9qfj-ozb5Qt-5L1xm4-aXd21c-dfZHMu-c68Dvq-c68DxY-jyY2fo-aXKwGx-a5XXxb-dG9qj1-7xMtMc-7xMtLP-7xRESW-7xMHsx-7xMtMe-dG412H-7xMtM4-7xMk2X-7xMHst-e1krU7-7xMtLV-na68zE-7xRET5-7xRETs-7xMHsc-hPd9J-7xMtMn-7xMHsn-7fR93N-fUopoC-qB997-7xRETh-7xRETG-7xMHsg-7xMHsk-bjfyPc-q7mfR7-2YrzxR-tyq1A-EcoQqe-q7pVcJ" title="Marie to Me"&gt;&lt;img src="https://c2.staticflickr.com/8/7174/6770106561_184b646e38_z.jpg" width="640" height="368" alt="Marie to Me"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>kubernetes</tag><tag>cluster</tag><tag>rust</tag><tag>gnome</tag><tag>fedora</tag><tag>kubevirt</tag></post><post id="153699161680" url="https://dummdida.tumblr.com/post/153699161680" url-with-slug="https://dummdida.tumblr.com/post/153699161680/fedora-25-and-rust" type="regular" date-gmt="2016-11-26 21:30:59 GMT" date="Sat, 26 Nov 2016 22:30:59" unix-timestamp="1480195859" format="markdown" reblog-key="swWE1PmW" slug="fedora-25-and-rust" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Fedora 25 and rust</regular-title><regular-body>&lt;p&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rustc -o hello &amp;lt;(echo ‘fn main() { println!(“Hello World!”) }’)
$ ./hello Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So - What am I going to do with this?&lt;/p&gt;</regular-body><tag>fedora</tag><tag>rust</tag></post><post id="152593622635" url="https://dummdida.tumblr.com/post/152593622635" url-with-slug="https://dummdida.tumblr.com/post/152593622635" type="video" date-gmt="2016-11-01 11:36:13 GMT" date="Tue, 01 Nov 2016 12:36:13" unix-timestamp="1478000173" format="markdown" reblog-key="XEblhymk" slug="" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://vimeo.com/189558162#at=763</video-source><video-player/><video-player max-width="500"/><video-player max-width="250"/><tag>blender</tag><tag>production</tag></post><post id="152551455805" url="https://dummdida.tumblr.com/post/152551455805" url-with-slug="https://dummdida.tumblr.com/post/152551455805/40-automation-and-upstream" type="regular" date-gmt="2016-10-31 11:21:08 GMT" date="Mon, 31 Oct 2016 12:21:08" unix-timestamp="1477912868" format="markdown" reblog-key="u1CzjZLg" slug="40-automation-and-upstream" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>4.0, automation, and upstream</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/mau888/5853101005/" title="endless."&gt;&lt;img src="https://c6.staticflickr.com/6/5238/5853101005_defb140372_z.jpg" width="640" height="96" alt="endless."/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;oVirt 4.0 is out for a while. The Node team has been busy with understanding a few - really, justa  few - bugs around Node Next.&lt;/p&gt;

&lt;p&gt;But at the bottom line we achieved what we aimed at: Lowering the day-to-day load on our small team.&lt;/p&gt;

&lt;p&gt;Using anaconda, cockpit, and LVM still looks promising.&lt;/p&gt;

&lt;p&gt;Currently we are a little busy on working on implementing 4.1 features (3rd party rpm persistence and miproved installation errors) as well as improving the automation even more.&lt;/p&gt;

&lt;p&gt;And beyond that? Well, I think documentation is the part that will slowly see updates. We also need to improve our Jenkins CI.
With one step at a time we can move forwards.&lt;/p&gt;

&lt;p&gt;And beyond that? Well, stabilization is the key here. Having a robust CI helps to support this.&lt;/p&gt;

&lt;p&gt;And beyond that? Well, upstream. Finally I think we can shift of fixing stuff in upstream.
In the previous years we were concerned about our bugs in Node, and really had no room to fix them in upstream, because there was none.
Now, that we are really based on upstream again, we do have the ability to contribute there.&lt;/p&gt;

&lt;p&gt;So, after the hype on 4.0 we are slowly drifting into a day-to-day maintenance again, but we don&amp;rsquo;t drown in bugs, and that allows us to improve and work upstream.&lt;/p&gt;</regular-body><tag>anaconda</tag><tag>cockpit</tag><tag>ovirt</tag><tag>node</tag><tag>automation</tag><tag>jenkins</tag></post><post id="150396095465" url="https://dummdida.tumblr.com/post/150396095465" url-with-slug="https://dummdida.tumblr.com/post/150396095465/its-rusty-thus-its-old-hah-rust-in-fedora" type="regular" date-gmt="2016-09-14 10:14:33 GMT" date="Wed, 14 Sep 2016 12:14:33" unix-timestamp="1473848073" format="markdown" reblog-key="BPbKBl13" slug="its-rusty-thus-its-old-hah-rust-in-fedora" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>It’s rusty, thus it’s old? Hah! Rust in Fedora.</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/drainrat/15432787103/in/photolist-pvK4Wg-pRCiY6-pAbik4-rsd3Ns-pdzPWr-qnYjcS-nGR321-on6Fji-kiBFEk-r4wh6s-nNYDbu-pEUD8g-q1CdK9-quSEyv-qBeu2e-qBwDPj-q99YZE-qmjWFT-pPup3W-rmS4cy-rhMMZM-piVTrc-oDAFSb-on6zXB-qu41pR-pMxJ3t-ryrAL3-qtjBYd-qt63Vv-qgpUs7-pA8Dig-q3Ncoh-cpwgHE-qB1ZN8-pefDFa-qww24B-pdBsbP-qJv1Sd-qS4WnV-fzwBND-qnhgkB-qvjeeh-qcjAg8-rbAVbS-7UviCJ-9EUBcb-fHTt6A-8si82o-83Deu6-pAiH1L" title="Urbex Pearl"&gt;&lt;img src="https://c8.staticflickr.com/8/7520/15432787103_02f2056a06.jpg" width="500" height="333" alt="Urbex Pearl"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;It took a while, but thanks to &lt;a href="https://fedoraproject.org/wiki/Changes/RustCompiler"&gt;Josh Stone Rust (the language) is approaching (as in: landing in) Fedora&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A long time ago a bug was opened to get Rust included into Fedora, but it was not easy to get in.
Rust was (is?) bundling a few libraries. And some of the required libraries were not packaged. You can read the whole long story &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=915043"&gt;here, in 79 comments&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The final reason which gave the necessary push was probably, that Firefox will soon require Rust for some of it&amp;rsquo;s functionality.&lt;/p&gt;

&lt;p&gt;To me it&amp;rsquo;s a great thing to see Rust in Fedora. It&amp;rsquo;s a little thing which helps to keep diversity.&lt;/p&gt;

&lt;p&gt;As always: Provide feedback to improve packaging and the language itself.
I&amp;rsquo;m also curious to see the first native Rust app in Fedora. Maybe rusty &lt;a href="https://github.com/uutils/coreutils"&gt;coreutils&lt;/a&gt;?&lt;/p&gt;</regular-body><tag>rust</tag><tag>fedora</tag></post><post id="148709452984" url="https://dummdida.tumblr.com/post/148709452984" url-with-slug="https://dummdida.tumblr.com/post/148709452984/ovirt-node-40" type="regular" date-gmt="2016-08-09 22:30:17 GMT" date="Wed, 10 Aug 2016 00:30:17" unix-timestamp="1470781817" format="markdown" reblog-key="bsXCxOkF" slug="ovirt-node-40" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>oVirt Node 4.0</regular-title><regular-body>&lt;p&gt;oVirt Node, the slim OS acting as a hypervisor for oVirt deployments showed it&amp;rsquo;s age already a few years ago.
It was time to take some action, to not drown in endless bugs which were contradicting how operating systems are &lt;a href="http://www.freedesktop.org/software/systemd/"&gt;put together today&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We started researching around the end of 2014. Main goals were to leverage more open source projects - basically anti-NIH. The benefits are obvious: Why write our own installer if there is one? Why create an admin interface if there are a few?&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ovirt.org/develop/projects/node/specs/"&gt;We looked at&lt;/a&gt; deploying oVirt in containers back then, and also at delivering it as an ostree - both had drawbacks which we could not work around at that time.&lt;/p&gt;

&lt;p&gt;Anyhow, after a long decision period, a couple of POCs, more bug fixes on vintage Node we are finally here: &lt;a href="http://www.ovirt.org/node/"&gt;oVirt Node 4.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Features, in chronological order&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Ready to use with oVirt Engine&lt;/li&gt;
&lt;li&gt;Self Hosted Engine support&lt;/li&gt;
&lt;li&gt;CentOS 7 as a base&lt;/li&gt;
&lt;li&gt;Anaconda for installation&lt;/li&gt;
&lt;li&gt;squashfs and rpm as a delivery format&lt;/li&gt;
&lt;li&gt;Cockpit for administration&lt;/li&gt;
&lt;li&gt;imgbased for LVM management&lt;/li&gt;
&lt;li&gt;rpm for update delivery&lt;/li&gt;
&lt;li&gt;Writable root file-system&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Start now to install oVirt Node 4.0 using an &lt;a href="http://plain.resources.ovirt.org/pub/ovirt-4.0/iso/ovirt-node-ng-installer/"&gt;iso&lt;/a&gt;.
Updates can be done through Engine or even with &lt;code&gt;yum&lt;/code&gt;.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>atomic</tag><tag>imgbased</tag></post><post id="145667489995" url="https://dummdida.tumblr.com/post/145667489995" url-with-slug="https://dummdida.tumblr.com/post/145667489995/finally-fast-and-real-functional-on-node-checks" type="regular" date-gmt="2016-06-09 18:05:12 GMT" date="Thu, 09 Jun 2016 20:05:12" unix-timestamp="1465495512" format="markdown" reblog-key="IFKtFwQC" slug="finally-fast-and-real-functional-on-node-checks" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Finally - Fast and Real functional on Node checks in Jenkins</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/alvarogalve/4117239145/" title="Berlinés verde"&gt;&lt;img src="https://c2.staticflickr.com/3/2666/4117239145_b187536780.jpg" width="500" height="500" alt="Berlinés verde"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Continuous integration and testing is a hot topic.
It is so important, it is so good, because it saves us from doing lame stuff ourselfs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/oVirt/lago/"&gt;Lago&lt;/a&gt; is oVirt&amp;rsquo;s answer to allow fully automated testing with multiple hosts. And it is good at this. Node support has landed a while ago, we just need to get it into production.
But for basic Node centric sanity this full blown setup is not needed.&lt;/p&gt;

&lt;p&gt;With a simple setup, we are now running sanity tests on a running VM in jenkins.&lt;/p&gt;

&lt;p&gt;Our sanity tests now cover the basic building blocks of Node:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Correct bootloader configuration&lt;/li&gt;
&lt;li&gt;Correct package set&lt;/li&gt;
&lt;li&gt;Correct LVM layout&lt;/li&gt;
&lt;li&gt;No SELinux denials&lt;/li&gt;
&lt;li&gt;Correct enabled services&lt;/li&gt;
&lt;li&gt;Correct mount options&lt;/li&gt;
&lt;li&gt;Working imgbased&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Thesse items are crucial for the core functionality of node (working upgrades, reliable rollback).
And up to now there is nothing oVirt specific, and this is fine, because integration tests in Lago will ensure that the integration is working.&lt;/p&gt;

&lt;p&gt;And these tests are isolated (snapshotted), and fast. The complete testing is done in under 2 minutes.
The value is high because it will catch at least:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Any build related error&lt;/li&gt;
&lt;li&gt;Any partitioning related error&lt;/li&gt;
&lt;li&gt;Any severe bug in imgbased&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The biggest gap is to ensure that updates are working.
More tests can be added, all of this can be driven from python unit-tests.&lt;/p&gt;

&lt;p&gt;Let me note that the testing process is robust. The tests are run in real VMs, and are thus not impacted by the host configuration.&lt;/p&gt;

&lt;p&gt;The testing is triggered quite easily, in the &lt;code&gt;ovirt-node-ng&lt;/code&gt; repository, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Is implicitly called, but this does build the image
# 85% of the time
make squashfs

# This will install the image into a qcow2
# 10% of the time
make installed-squashfs

# This will check the qcow2
# 5% of the time
make check
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is finally how such a test run looks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00:23:51.931 The squashfs 'ovirt-node-ng-image.squashfs.img' got installed into the file 'ovirt-node-ng-image.installed.qcow2'
00:23:51.986 ++ sudo -E make check
00:23:51.998 make -C tests check
00:23:52.000 make[1]: Entering directory '/home/jenkins/workspace/ovirt-node-ng_master_build-artifacts-fc22-x86_64/ovirt-node-ng/tests'
00:23:52.004 pyflakes testIntegration.py virt.py agent.py testSanity.py testVirt.py
00:23:52.190 pep8 testIntegration.py virt.py agent.py testSanity.py testVirt.py
00:23:52.481 nosetests --with-xunit -v --no-byte-compile --stop testVirt.py testSanity.py
00:24:43.359 test_agent_works (testVirt.TestNodeTestcase) ... ok
00:24:55.888 test_reboot_works (testVirt.TestNodeTestcase) ... ok
00:25:46.463 test_bootloader (testSanity.TestNode) ... ok
00:25:51.445 test_imgbase (testSanity.TestNode) ... ok
00:25:54.761 test_lvm (testSanity.TestNode) ... ok
00:25:57.731 test_mounts (testSanity.TestNode) ... ok
00:26:00.835 test_packages (testSanity.TestNode) ... ok
00:26:03.741 test_selinux (testSanity.TestNode) ... ok
00:26:06.666 test_services (testSanity.TestNode) ... ok
00:26:06.969 
00:26:06.969 ----------------------------------------------------------------------
00:26:06.970 XML: /home/jenkins/workspace/ovirt-node-ng_master_build-artifacts-fc22-x86_64/ovirt-node-ng/tests/nosetests.xml
00:26:06.970 ----------------------------------------------------------------------
00:26:06.970 Ran 9 tests in 134.311s
00:26:06.970 
00:26:06.970 OK
00:26:06.983 xsltproc nosetests.xslt nosetests.xml
00:26:06.987 
00:26:06.987 Xunit Test Results - For: 
00:26:06.987 Results for nosetests
00:26:06.987 
00:26:06.987 * Tests run: 9
00:26:06.987 * Failures: 0
00:26:06.987 * Skipped: 0
00:26:06.987 * Errors: 0
00:26:06.990 PASSED
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The hardest part was to get running correctly in jenkins. But now it does.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>imgbased</tag><tag>unittest</tag><tag>python</tag><tag>libvirtd</tag><tag>guestfish</tag><tag>virt-install</tag><tag>node</tag></post><post id="145255018615" url="https://dummdida.tumblr.com/post/145255018615" url-with-slug="https://dummdida.tumblr.com/post/145255018615/from-a-dockerfile-to-a-vm" type="regular" date-gmt="2016-06-01 13:18:49 GMT" date="Wed, 01 Jun 2016 15:18:49" unix-timestamp="1464787129" format="markdown" reblog-key="fH2PWdku" slug="from-a-dockerfile-to-a-vm" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>From a Dockerfile to a VM</regular-title><regular-body>&lt;p&gt;The idea is simple: Let&amp;rsquo;s use a Dockerfile to specify a VM image.&lt;/p&gt;

&lt;p&gt;This can be useful in a few cases, i.e. beeing able to quickly reproduce a VM (image).&lt;/p&gt;

&lt;p&gt;Easy way to distribute VMs. Vagrant is actually doing something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://asciinema.org/a/091pvgwprx0fa5oosr4jcu9am"&gt;&lt;img src="https://asciinema.org/a/091pvgwprx0fa5oosr4jcu9am.png" alt="asciicast"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This little tool above is now taking a Dockerfile to transform it into an image which is suitable for a VM.&lt;/p&gt;

&lt;p&gt;The flow is common:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vocker build --tag simple
crazy_planet
$ vocker run -i crazy_planet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look: &lt;a href="https://github.com/fabiand/vocker"&gt;https://github.com/fabiand/vocker&lt;/a&gt;&lt;/p&gt;</regular-body><tag>fedora</tag><tag>container</tag><tag>libvirt</tag><tag>docker</tag></post><post id="144799483585" url="https://dummdida.tumblr.com/post/144799483585" url-with-slug="https://dummdida.tumblr.com/post/144799483585/yum-on-ovirt-node-next" type="regular" date-gmt="2016-05-23 09:22:40 GMT" date="Mon, 23 May 2016 11:22:40" unix-timestamp="1463995360" format="markdown" reblog-key="dxZFbO9V" slug="yum-on-ovirt-node-next" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>`yum` on oVirt Node Next</regular-title><regular-body>&lt;p&gt;Installing stuff on Node?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum --enablerepo=* --setopt=*.skip_if_unavailable=true install …
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember: After the next regular Node update, your changes will be gone (intentionally).&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>yum</tag></post><post id="144245215575" url="https://dummdida.tumblr.com/post/144245215575" url-with-slug="https://dummdida.tumblr.com/post/144245215575/a-crazy-bug" type="regular" date-gmt="2016-05-12 11:59:55 GMT" date="Thu, 12 May 2016 13:59:55" unix-timestamp="1463054395" format="markdown" reblog-key="b3Hi4QYv" slug="a-crazy-bug" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>A crazy bug!</regular-title><regular-body>&lt;p&gt;&lt;fabiand&gt; 00:42:05.764 &lt;em&gt;stdin&lt;/em&gt;:0: libguestfs: error: bind: Address already in use&lt;/fabiand&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;…

&amp;lt;rwmjones&amp;gt; pino|work: ^^ that path is quite long
&amp;lt;rwmjones&amp;gt; it's about 90+ chars
&amp;lt;rwmjones&amp;gt; didn't you fix this recently?
&amp;lt;pino&amp;gt; fabiand: 1.30.x, right?
&amp;lt;pino&amp;gt; rwmjones: yes, i was checking when
&amp;lt;fabiand&amp;gt; DEBUG util.py:399:   libguestfs-tools                  noarch 1:1.30.6-2.fc22         updates 135 k
&amp;lt;fabiand&amp;gt; pino|work, ^^ yes
&amp;lt;rwmjones&amp;gt; 55202a4d49a101392148d79cb2e1591428db2681 ?
&amp;lt;pino&amp;gt; fabiand: workaround, set a shorter TMPDIR
&amp;lt;pino&amp;gt; rwmjones: 79b2f19fe7ba1843146e89e2267f066ed6eeeb5b + 4 commits following
&amp;lt;fabiand&amp;gt; how come that the length of the path name causes this error?
&amp;lt;pino&amp;gt; the path for a unix socket is short
&amp;lt;rwmjones&amp;gt; unix domain sockets are limited to 108 chars or something
&amp;lt;fabiand&amp;gt; ahhh
&amp;lt;fabiand&amp;gt; crazy
&amp;lt;pino&amp;gt; char sun_path[] in struct sockaddr_un is a static buffer, usually 104 or 108 characters
&amp;lt;fabiand&amp;gt; :)
&amp;lt;fabiand&amp;gt; Those are so crazy bugs!
&amp;lt;rwmjones&amp;gt; it has been fixed, but only upstream not in 1.30
&lt;/code&gt;&lt;/pre&gt;</regular-body></post><post id="144239949335" url="https://dummdida.tumblr.com/post/144239949335" url-with-slug="https://dummdida.tumblr.com/post/144239949335/easily-looking-into-a-squashfs" type="regular" date-gmt="2016-05-12 07:50:10 GMT" date="Thu, 12 May 2016 09:50:10" unix-timestamp="1463039410" format="markdown" reblog-key="w0PKgRy3" slug="easily-looking-into-a-squashfs" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Easily looking into a squashfs</regular-title><regular-body>&lt;p&gt;You want to do something inside a squashfs, as a user?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ guestfish --ro -a ovirt-node-ng-image.squashfs.img run : mount /dev/sda / : mount-loop /LiveOS/rootfs.img / : sh "cat /etc/os-release"
&lt;/code&gt;&lt;/pre&gt;</regular-body><tag>fedora</tag><tag>guestfish</tag><tag>squashfs</tag></post><post id="143936666875" url="https://dummdida.tumblr.com/post/143936666875" url-with-slug="https://dummdida.tumblr.com/post/143936666875/containers-and-responsibilities-on-host-actions" type="regular" date-gmt="2016-05-06 10:35:53 GMT" date="Fri, 06 May 2016 12:35:53" unix-timestamp="1462530953" format="markdown" reblog-key="OUZFdTbE" slug="containers-and-responsibilities-on-host-actions" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Containers and responsibilities on host actions</regular-title><regular-body>&lt;p&gt;A cryptic title, yes.&lt;/p&gt;

&lt;p&gt;One thing that has been bothering me for a while with SPCs is that they often perform actions in the context of the host.&lt;/p&gt;

&lt;p&gt;I.e. sometime a go I tried to get customer udev rules on to the host to get them recoginized by udevd (which should only be running on the host). The solution back then was to have a command during the container deployment which copied the files from inside the container to the host.
This action was performed by the container - and this is bad, because the container needs to ensure that it finds the right place on the host. Because of this small interaction with the host, the container looses it&amp;rsquo;s portability.&lt;/p&gt;

&lt;p&gt;Now, &lt;a href="https://github.com/rmohr/"&gt;Roman&lt;/a&gt; let me know how cAdvisor is handling config discovery inside of containers: It is using plain docker LABELs to expose the config. This config can then be read by cAdvisor (runing on the host) and cAdvisor can access the container to fetch the config and do whatever it neesd to do.&lt;/p&gt;

&lt;p&gt;The same mechanism can be adopted for other cases, where a file or action needs to be performed on the host, like adding a custom udev rule.&lt;/p&gt;

&lt;p&gt;I.e. for adding a custom udev rule, the container could define a label:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LABEL org.example.udev.rules.custom /path/to/my.rule
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A component on the host side - on Fedora probably &lt;code&gt;atomic&lt;/code&gt; - would inspect this label and perform the necessary action.&lt;/p&gt;

&lt;p&gt;This is a great flow, because it is a declarative approach, and the separation between container and host is kept a little bit more than before.&lt;/p&gt;

&lt;p&gt;The same principle can actually (and is) applied to higher-level tools like kubernetes. In that context annotations can be used to expose &lt;em&gt;stuff&lt;/em&gt;.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>atomic</tag><tag>udev</tag></post><post id="143730597525" url="https://dummdida.tumblr.com/post/143730597525" url-with-slug="https://dummdida.tumblr.com/post/143730597525/attaching-guestfish-to-live-domains" type="regular" date-gmt="2016-05-02 08:41:14 GMT" date="Mon, 02 May 2016 10:41:14" unix-timestamp="1462178474" format="markdown" reblog-key="ehjbrkIM" slug="attaching-guestfish-to-live-domains" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Attaching guestfish to live domains</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/mathiasappel/25512150434/in/photolist-ESqruE-cxyPTG-5D7FAX-ciQSyw-991xrS-9JowRQ-2cAQJh-d9QV8C-7WBZj-cuYd8u-fAjke7-ddSnEy-ozHqbb-btYUco-Gw899-56rr6y-bPH9de-5rLMBo-56rsEf-2aakgG-arsNjB-aw4MyL-5YB4wX-rcUe6F-cuYe4j-cJ5YUL-oig8yX-toFEy-a3fbF5-5D7G8M-7YEMWE-eusbPr-5DbYxu-69JdZs-fnKpHc-7ocuDt-3T9u7U-bwvUWN-5DbXT5-7dUMro-arvAv1-cf7oHA-5DbYqh-bANfZo-e85MN6-cuYjZu-7YENMs-frGYYq-ouPygm-zDCwc" title="fish"&gt;&lt;img src="https://farm2.staticflickr.com/1648/25512150434_8dc8241cb2.jpg" width="500" height="331" alt="fish"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://libguestfs.org/guestfs.3.html#attaching-to-running-daemons"&gt;Attaching guestfish to live domains&lt;/a&gt; is actually pretty nice.
Why? Why is this different from the normal mode?
Well, normally guestfish spawns a generic appliance to inspect a disk image. The runtime context is thus this appliance.
If you connect to to a running (libvirt) domain, then you run the commands in teh context of the domain.
This can make a difference if you want to i.e. introspect the runtime behavior of an domain, like getting some network informations.&lt;/p&gt;

&lt;p&gt;It works nicely in Fedora, if you install a VM with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;virt-install … --channel="unix,target_type=virtio,name=org.libguestfs.channel.0"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the guest you need to ensure to have &lt;code&gt;libguestfs-live-service&lt;/code&gt; installed.&lt;/p&gt;

&lt;p&gt;But why the heck doesn&amp;rsquo;t this work on CentOS!? Because the &lt;code&gt;libguestfs-live-service&lt;/code&gt; is not available there.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>libvirt</tag><tag>libguestfs</tag></post><post id="142784444340" url="https://dummdida.tumblr.com/post/142784444340" url-with-slug="https://dummdida.tumblr.com/post/142784444340/quick-route-to-ovirt-node-next-by-fabian-deutsch" type="link" date-gmt="2016-04-14 08:52:14 GMT" date="Thu, 14 Apr 2016 10:52:14" unix-timestamp="1460623934" format="markdown" reblog-key="DUAEoibd" slug="quick-route-to-ovirt-node-next-by-fabian-deutsch" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Quick route to oVirt Node Next by Fabian Deutsch</link-text><link-url>https://slides.com/fabiand/quick-route-to-test-ovirt-node-next/</link-url><tag>ovirt</tag><tag>node</tag></post><post id="142006087775" url="https://dummdida.tumblr.com/post/142006087775" url-with-slug="https://dummdida.tumblr.com/post/142006087775" type="video" date-gmt="2016-03-31 10:10:49 GMT" date="Thu, 31 Mar 2016 12:10:49" unix-timestamp="1459419049" format="markdown" reblog-key="NjkX8Tx7" slug="" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://www.youtube.com/watch?v=VQAAkO5B5Hg&amp;feature=youtu.be&amp;t=1376</video-source><video-player>&lt;iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/VQAAkO5B5Hg?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe width="500" height="281"  id="youtube_iframe" src="https://www.youtube.com/embed/VQAAkO5B5Hg?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe width="250" height="141"  id="youtube_iframe" src="https://www.youtube.com/embed/VQAAkO5B5Hg?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><tag>kubernetes</tag></post><post id="141946252835" url="https://dummdida.tumblr.com/post/141946252835" url-with-slug="https://dummdida.tumblr.com/post/141946252835/ovirt-node-40-next-by-fabian-deutsch" type="link" date-gmt="2016-03-30 08:08:39 GMT" date="Wed, 30 Mar 2016 10:08:39" unix-timestamp="1459325319" format="markdown" reblog-key="ygxAlU69" slug="ovirt-node-40-next-by-fabian-deutsch" state="published" is_reblog="false" tumblelog="dummdida"><link-text>oVirt Node 4.0 (Next) by Fabian Deutsch</link-text><link-url>http://slides.com/fabiand/ovirt-node-4-0-next#/</link-url><link-description>&lt;p&gt;A short introduction into oVirt Node Next which is planned for oVirt 4.0.&lt;/p&gt;</link-description><tag>ovirt</tag><tag>node</tag><tag>imgbased</tag><tag>anaconda</tag><tag>yum</tag><tag>lvm</tag></post><post id="139903469765" url="https://dummdida.tumblr.com/post/139903469765" url-with-slug="https://dummdida.tumblr.com/post/139903469765/ovirt-node-next-installation-iso" type="regular" date-gmt="2016-02-24 10:27:23 GMT" date="Wed, 24 Feb 2016 11:27:23" unix-timestamp="1456309643" format="markdown" reblog-key="bTctVPGa" slug="ovirt-node-next-installation-iso" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>oVirt Node Next installation iso</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/relic/3346330502/" title="Myst CD"&gt;&lt;img src="https://farm4.staticflickr.com/3569/3346330502_c22c8e8887.jpg" width="500" height="499" alt="Myst CD"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;oVirt Node Next&amp;rsquo;s delivery format is a squashfs (or squashfs wrapped in an rpm), the benefit is that itcan be used by dracut (possibly stateless boot) and anaconda (can install the image).&lt;/p&gt;

&lt;p&gt;Now, with a few commands it is possible to even generate a custom installation ISO for oVirt Node Next.&lt;/p&gt;

&lt;p&gt;This works by fetching a CentOS 7 boot.iso, our squashfs image, and rebuilding a new iso from these two contents (plus a small kickstart as teh glue).&lt;/p&gt;

&lt;p&gt;Run this command to generate an ISO containing the latest Ndoe Next build from our Jenkins CI:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl "https://gerrit.ovirt.org/gitweb?p=ovirt-node-ng.git;a=blob_plain;f=scripts/create-nightly-boot-iso.sh" | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Notice: This is only for the brave - Never run unreviewed scripts from the web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once Node Next is installed you can just run &lt;code&gt;yum update&lt;/code&gt; on a daily basis to retrieve updates.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>next</tag><tag>mkisofs</tag><tag>anaconda</tag></post><post id="138750458470" url="https://dummdida.tumblr.com/post/138750458470" url-with-slug="https://dummdida.tumblr.com/post/138750458470/yum-based-image-updates-basically-work" type="regular" date-gmt="2016-02-05 21:46:45 GMT" date="Fri, 05 Feb 2016 22:46:45" unix-timestamp="1454708805" format="markdown" reblog-key="wBIhOj9e" slug="yum-based-image-updates-basically-work" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>yum based image updates basically work</regular-title><regular-body>&lt;p&gt;Yet another step towards image based updates using rpms:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# yum update
…
Installing:
 ovirt-node-ng-image-update     noarch     4.0.0-0.0.master.20160205.0.el7       jenkins.ovirt.org_job_ovirt-node-ng_master_build-artifacts-fc22-x86_64_lastSuccessfulBuild_artifact_exported-artifacts_     444 M
 replacing  ovirt-node-ng-image-update-placeholder.noarch 4.0.0-0.0.master
…
Total download size: 447 M
Is this ok [y/d/N]: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is showing that an image update is available on jenkins, and Node want&amp;rsquo;s to pull it down.&lt;/p&gt;</regular-body><tag>node</tag><tag>imgbase</tag><tag>yum</tag></post><post id="138676269905" url="https://dummdida.tumblr.com/post/138676269905" url-with-slug="https://dummdida.tumblr.com/post/138676269905/imgbase-update-basically-works" type="regular" date-gmt="2016-02-04 17:33:55 GMT" date="Thu, 04 Feb 2016 18:33:55" unix-timestamp="1454607235" format="markdown" reblog-key="SGprv6py" slug="imgbase-update-basically-works" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>`imgbase update` basically works</regular-title><regular-body>&lt;p&gt;&lt;code&gt;imgbase update&lt;/code&gt; now basically works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# imgbase update --format liveimg ovirt-node-ng-4.0.0-0.0 /usr/share/ovirt-node-ng/image/ovirt-node-ng-4.0.0-0.0.master.20160204.0el7.squashfs.img 
[INFO] Extracting image '/usr/share/ovirt-node-ng/image/ovirt-node-ng-4.0.0-0.0.master.20160204.0el7.squashfs.img'
…
[INFO] Update was pulled successfully
[root@localhost ~]# imgbase layout
ovirt-node-ng-1.0-0.0
 └╼ ovirt-node-ng-1.0-0.0+1
ovirt-node-ng-4.0.0-0.0
 └╼ ovirt-node-ng-4.0.0-0.0+1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The remaining gap is to call the right command in &lt;code&gt;%post&lt;/code&gt;.&lt;/p&gt;</regular-body><tag>imgbased</tag><tag>ovirt</tag><tag>node</tag></post><post id="137677877880" url="https://dummdida.tumblr.com/post/137677877880" url-with-slug="https://dummdida.tumblr.com/post/137677877880/link-to-your-cockpit" type="regular" date-gmt="2016-01-20 10:03:13 GMT" date="Wed, 20 Jan 2016 11:03:13" unix-timestamp="1453284193" format="markdown" reblog-key="5xFUwl0C" slug="link-to-your-cockpit" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Link to your cockpit</regular-title><regular-body>&lt;p&gt;&lt;code&gt;$ qrencode -t UTF8 "http://$(ip route show to 0.0.0.0/0 | cut -d" " -f3):9090"&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;█████████████████████████████
█████████████████████████████
████ ▄▄▄▄▄ █▀ █▀ █ ▄▄▄▄▄ ████
████ █   █ █▀▀█▄ █ █   █ ████
████ █▄▄▄█ █▀ ▄ ██ █▄▄▄█ ████
████▄▄▄▄▄▄▄█▄▀▄▀▄█▄▄▄▄▄▄▄████
████▄▄  ▄█▄  ▄▀▄ ▄█▄▀ ▀ ▀████
████ ▄▄▀█ ▄▄█▄▀▄██▄█ ▀ ▄█████
█████▄█▄▄█▄▄▀▄▄▄███▀▀ ▀█ ████
████ ▄▄▄▄▄ █▄▄ █▄▄▀█ ▀ ▄█████
████ █   █ █    ▄▀█▀▄▄▀▄█████
████ █▄▄▄█ █ █▀  ▄  ▄█ ██████
████▄▄▄▄▄▄▄█▄█▄█▄▄▄ ███▄█████
█████████████████████████████
█████████████████████████████
&lt;/code&gt;&lt;/pre&gt;</regular-body><tag>reminder</tag></post><post id="137215341695" url="https://dummdida.tumblr.com/post/137215341695" url-with-slug="https://dummdida.tumblr.com/post/137215341695/ovirt-node-next-update-delivery" type="regular" date-gmt="2016-01-13 12:06:00 GMT" date="Wed, 13 Jan 2016 13:06:00" unix-timestamp="1452686760" format="markdown" reblog-key="RK80ypPH" slug="ovirt-node-next-update-delivery" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>oVirt Node Next update delivery</regular-title><regular-body>&lt;p&gt;Standing on th eshoulders of giants, I believe is sentence is so true in the world of open source.&lt;/p&gt;

&lt;p&gt;However, for Node Next we looked for a simple update distribution mechanism.
RPM seemed to be a suitable once again (we are already using it for the ovirt-appliance).
We already used rpm to distribute oVirt Node (vintage) using rpms. But in that case the rpm was installed on the Engine side. The issue is that Engine needs to be aware of this old flow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Repository -&amp;gt; (yum update) -&amp;gt; Engine -&amp;gt; (host update) -&amp;gt; Node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;compared to the usual flow for othe rhosts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Repository -&amp;gt; (yum update) -&amp;gt; Host
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is that Engine had a dedicated flow for Node. If you maintain a lot of code, exceptions like the become somewhat annoying to maintain, thus we started to look for a distribution mechanism similar to the one for hosts.&lt;/p&gt;

&lt;p&gt;The idea was quickly to directly ship the rpm with the update image to the host when &lt;code&gt;yum update&lt;/code&gt; is called.&lt;/p&gt;

&lt;p&gt;The question was now how this can be achieved.&lt;/p&gt;

&lt;p&gt;The problem might be not directly obvious, but imagine the following: What is reqiured for &lt;code&gt;yum update&lt;/code&gt; to correctly work? An rpm must be installed and there must be an update for this rpm.
And there is the issue - Inside the image we don&amp;rsquo;t have the image-rpm installed.
The image-rpm is only available in the repository.&lt;/p&gt;

&lt;p&gt;We needed to find a way to get the update delivered even if the image-rpm was not installed inside the image.&lt;/p&gt;

&lt;p&gt;For now we settled with an approach based on a placeholder and nifty use of requirements.&lt;/p&gt;

&lt;p&gt;The raw idea is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;in-image:
PACKAGE ovirt-release
subpackage ovirt-release-host-node N
subpackage ovirt-node-ng-image-placeholder N

wrapper:
PACKAGE ovirt-node-ng-image N
Obsoletes: ovirt-node-ng-image-placeholder &amp;lt; N


-----------------


Build process:
N = 3.6.0-20160101.0
build ovirt-release N
build image N
build wrapper N


M = 3.6.1-0
build ovirt-release M
build image M
build wrapper M


-----------------


Findings:
N &amp;lt; M
wrapper N will NOT obsolete ovirt-node-ng-image-placeholder N
wrapper M will NOT obsolete ovirt-node-ng-image-placeholder M
wrapper N will NOT obsolete ovirt-node-ng-image-placeholder M

wrapper M will obsolete ovirt-node-ng-image-placeholder N


-----------------


Brain check:

    In the image N

    Setup repo with wrapper M

    Run yum update

    Yum will see that wrapper M obsoletes image-placeholder N, because N &amp;lt; M
&lt;/code&gt;&lt;/pre&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>next</tag><tag>update</tag><tag>rpm</tag></post><post id="136872577940" url="https://dummdida.tumblr.com/post/136872577940" url-with-slug="https://dummdida.tumblr.com/post/136872577940/installing-the-ovirt-node-next-early-preview" type="regular" date-gmt="2016-01-08 10:07:42 GMT" date="Fri, 08 Jan 2016 11:07:42" unix-timestamp="1452247662" format="markdown" reblog-key="GgG5MSFN" slug="installing-the-ovirt-node-next-early-preview" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Installing the oVirt Node Next Early-Preview</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/brindle95/9447328250/" title="anaconda4"&gt;&lt;img src="https://farm8.staticflickr.com/7347/9447328250_2a4351ba74_z.jpg" width="640" height="169" alt="anaconda4"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Finally we&amp;rsquo;ve got continous builds of &lt;a href="http://www.ovirt.org/Node/4.0"&gt;oVirt Node Next&lt;/a&gt; in &lt;a href="http://jenkins.ovirt.org/user/fabiand/my-views/view/Node.next/job/ovirt-node-ng_master_build-artifacts-fc22-x86_64/"&gt;oVirt&amp;rsquo;s jenkins instance&lt;/a&gt; which are consumable by Anaconda.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is an early preview, the basic oVirt bit&amp;rsquo;s (vdsm) are there and you should be able to add such a host to Engine. But updates are not yet working, and if they were, then they&amp;rsquo;d be broken.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You want to try it? Read on.&lt;/p&gt;

&lt;h2&gt;Starting the anaconda installer&lt;/h2&gt;

&lt;p&gt;Independently if you continue with a VM or a bare metal server, the host you will use&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;needs at least 3GB of free space&lt;/li&gt;
&lt;li&gt;is connected to the internet&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Using a VM&lt;/h3&gt;

&lt;p&gt;The safe way to try the oVirt Node Next is to install it into a VM, this is quite easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;qemu-img create -f qcow2 dst.img 20G
qemu-system-x86_64 \
  -enable-kvm \
  -m 2048 \
  -cdrom &lt;a href="http://jenkins.ovirt.org/job/fabiand_boo_build_testing/lastSuccessfulBuild/artifact/ovirt-ipxe.iso"&gt;http://jenkins.ovirt.org/job/fabiand_boo_build_testing/lastSuccessfulBuild/artifact/ovirt-ipxe.iso&lt;/a&gt; \
  -hda dst.img \
  -serial stdio \
  -net nic -net user,hostfwd=tcp::19090-:9090
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now select &lt;em&gt;&amp;ldquo;Interactive installation&amp;rdquo;&lt;/em&gt; and wait for the anaconda installer to come up, this can take a while, as data is downloaded from the internet.&lt;/p&gt;

&lt;h3&gt;Using bare metal (easy - iPXE ISO)&lt;/h3&gt;

&lt;p&gt;Trying oVirt node Next on bare metal is not much more difficult.&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Download our pre-built PXE ISO: &lt;http:&gt;&lt;/http:&gt;&lt;/li&gt;
&lt;li&gt;Write the &lt;code&gt;ovirt-ipxe.iso&lt;/code&gt; onto a CD-ROM, DVD, USB, virtual media&lt;/li&gt;
&lt;li&gt;Boot your bare metal server using the previously created media&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now select &lt;em&gt;&amp;ldquo;Interactive installation&amp;rdquo;&lt;/em&gt; and wait for the anaconda installer to come up, this can take a while, as data is downloaded from the internet.&lt;/p&gt;

&lt;h3&gt;Using bare metal (medium - CentOS 7 ISO + kernel arguments)&lt;/h3&gt;

&lt;p&gt;Trying oVirt Node Next on bare metal is not much more difficult.&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Grab a CentOS 7 (Node Next is based on CentOS 7) netinstall &lt;code&gt;boot.iso&lt;/code&gt; from a &lt;a href="http://mirror.centos.org/centos-7/7/os/x86_64/images/boot.iso"&gt;mirror close to you&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Boot the &lt;code&gt;boot.iso&lt;/code&gt; on your bare metal server and wait for ISOLINUX bootloader&lt;/li&gt;
&lt;li&gt;Select the default entry and append the following arguments:
&lt;code&gt;inst.ks=https://gerrit.ovirt.org/gitweb?p=ovirt-node-ng.git;a=blob_plain;f=docs/kickstart/minimal-kickstart.ks;hb=HEAD inst.updates=http://jenkins.ovirt.org/job/fabiand_boo_build_testing/lastSuccessfulBuild/artifact/product.img/product.img inst.stage2=http://mirror.centos.org/centos-7/7/os/x86_64/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now wait for the anaconda installer to come up, this can take a while, as data is downloaded from the internet.&lt;/p&gt;

&lt;h1&gt;Performing the installation&lt;/h1&gt;

&lt;p&gt;Once anaconda is up you need to answer a few questions&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Select your prefered language and continue&lt;/li&gt;
&lt;li&gt;On the next page, select your keyboard layout and timezone&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the disk to be used - Enter the spoke (the thing which opens when you click on the disk icon), and select the disk to use. Sometimes you need to deselect and select the disk icon again.
&lt;strong&gt;Note: Leave the partitioning to automatic. If you are brave you can do your own partitioning layout, but ensure to use LVM thin-provisioning.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you should have answered all necessary questions, and can proceed by hitting &lt;code&gt;Continue&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The installation is started, use the time to at least set a &lt;em&gt;root&lt;/em&gt; user password. &lt;strong&gt;Note: The installation can take a while, because now the installation image is pulled from our jenkins instance (~500MB).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Once the installation is done and you&amp;rsquo;ve set a password, you can reboot the host and it should be ready to use.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The host can now be added to Engine.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In case you encounter issues, enable permissive mode on the host by calling &lt;code&gt;setenforce 0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Trying Cockpit&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.ovirt.org/images/8/87/Cockpit-node.png"/&gt;&lt;/p&gt;

&lt;p&gt;This is an early preview with cockpit installed. But currently cockpit is not enabled and the firewall prevents access. Yes, it will be fixed. Until then: Perform the following steps to take a look at cockpit:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Use the VM installation above&lt;/li&gt;
&lt;li&gt;After installation, log intot the VM&lt;/li&gt;
&lt;li&gt;Start cockpit: &lt;code&gt;systemctl start cockpit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stop firewalld: &lt;code&gt;systemctl stop firewalld&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Browse to &lt;http:&gt; (on the host, not inside the VM), this request will be forwarded to port 9090 inside the VM, where cockpit is running.&lt;/http:&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Is this working for you or not? Could you install Node? Could you add Node? Could you browse Cockpit? Or did your host explode?&lt;/p&gt;

&lt;p&gt;Let us know on IRC (irc://irc.oftc.net/#ovirt) or via email (users@ovirt.org) what you think.&lt;/p&gt;

&lt;h2&gt;Next steps&lt;/h2&gt;

&lt;p&gt;The next big step is to enable updates. &lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>anaconda</tag><tag>cockpit</tag><tag>centos</tag></post><post id="136802563030" url="https://dummdida.tumblr.com/post/136802563030" url-with-slug="https://dummdida.tumblr.com/post/136802563030/virt-install-error-host-does-not-support-any" type="regular" date-gmt="2016-01-07 08:12:50 GMT" date="Thu, 07 Jan 2016 09:12:50" unix-timestamp="1452154370" format="markdown" reblog-key="UqtAwJEl" slug="virt-install-error-host-does-not-support-any" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>virt-install: “ERROR    Host does not support any virtualization options”</regular-title><regular-body>&lt;p&gt;Give the following a try:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnf install libvirt libvirt-daemon-kvm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might need this if you are using &lt;code&gt;virt-install&lt;/code&gt; or &lt;code&gt;livemedia-creator&lt;/code&gt;.&lt;/p&gt;</regular-body><tag>qemu</tag><tag>libvirt</tag><tag>virt-install</tag><tag>lorax</tag><tag>livemedia-creator</tag></post><post id="136738240380" url="https://dummdida.tumblr.com/post/136738240380" url-with-slug="https://dummdida.tumblr.com/post/136738240380/bashs-errexit-and-subshells" type="regular" date-gmt="2016-01-06 09:58:31 GMT" date="Wed, 06 Jan 2016 10:58:31" unix-timestamp="1452074311" format="markdown" reblog-key="yGaGNtEH" slug="bashs-errexit-and-subshells" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Bash’s errexit and subshells</regular-title><regular-body>&lt;p&gt;Python&amp;rsquo;s try-except-finally construct is pretty nice and I was looking for something similar in bash.
I imagined something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;( # Try
  set -e
  run_a_cmd
) || { # Except
  echo "ERROR"
}
# Finally
cleanup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The assumption is that the &amp;ldquo;Try&amp;rdquo;-block will fail if any command inside the block fails, because&lt;code&gt;set -e&lt;/code&gt; is used to set &lt;code&gt;errexit&lt;/code&gt;.
But this does not work. Why it is not working was not directly obvious to me.
The reason is now - and you can look this up in the bash manpage - that &lt;code&gt;set -e&lt;/code&gt; or &lt;code&gt;errexit&lt;/code&gt; is ignored if a subshell (&lt;code&gt;(…)&lt;/code&gt;) is used with &lt;code&gt;||&lt;/code&gt; or &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; - and this is the case above.&lt;/p&gt;

&lt;p&gt;The following construct is working:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;( # Try
  set -e
  run_a_cmd
)
test $? -gt 0 &amp;amp;&amp;amp; { # Except
  echo "ERROR"
}
# Finally
cleanup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does work because &lt;code&gt;||&lt;/code&gt; got eliminated.&lt;/p&gt;

&lt;p&gt;This construct is a bit less nice, but still helpful.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>bash</tag><tag>magic</tag><tag>awkward</tag></post><post id="135715182970" url="https://dummdida.tumblr.com/post/135715182970" url-with-slug="https://dummdida.tumblr.com/post/135715182970" type="video" date-gmt="2015-12-22 16:28:29 GMT" date="Tue, 22 Dec 2015 17:28:29" unix-timestamp="1450801709" format="markdown" reblog-key="KYhEPdiM" slug="" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://www.youtube.com/watch?v=Tmj0Nrkasmk&amp;feature=youtu.be</video-source><video-player>&lt;iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/Tmj0Nrkasmk?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe width="500" height="281"  id="youtube_iframe" src="https://www.youtube.com/embed/Tmj0Nrkasmk?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe width="250" height="141"  id="youtube_iframe" src="https://www.youtube.com/embed/Tmj0Nrkasmk?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player></post><post id="135713197955" url="https://dummdida.tumblr.com/post/135713197955" url-with-slug="https://dummdida.tumblr.com/post/135713197955/a-puzzle-called-ovirt-node-next" type="regular" date-gmt="2015-12-22 15:48:18 GMT" date="Tue, 22 Dec 2015 16:48:18" unix-timestamp="1450799298" format="markdown" reblog-key="9GgjZne1" slug="a-puzzle-called-ovirt-node-next" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>A puzzle called oVirt Node Next</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/ajgelado/583229971/in/photolist-TxcXa-8e1tCA-b1CFLZ-d4W64-5as43z-4fV9VE-6Zitwt-mf9vjr-xnhd8U-bbSdSF-9aQ5rN-4qFLRz-55wNmm-5TZQTM-5g2tSn-6NiA1j-6fwaFg-e8zRBD-rPXdjs-6iY2vH-PEtas-HQB4-4xJtR3-bBvjFf-5ugeqj-4tmQPr-5mueLj-oS52xG-e7jCAt-8FqNnZ-E6fPg-7bfimU-5fa48-9cAuPJ-dGThP-7bfhL1-4fQz9t-9nwAHf-dSguuU-88jeD-uQ7Qp-b26ciz-BBPfx-7nAsHi-a2uKaZ-e5D9tK-qBMujW-aQppYa-8QEgCF-azxz7L/" title="Puzzle"&gt;&lt;img src="https://farm2.staticflickr.com/1304/583229971_a3e498ec18_z.jpg" width="640" height="480" alt="Puzzle"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ovirt.org/Node/4.0"&gt;oVirt Node Next&lt;/a&gt; is like a big puzzle.&lt;/p&gt;

&lt;p&gt;In the classic - or &lt;em&gt;vintage&lt;/em&gt; - oVirt Node a lot of the build logic, administration, and customizataion tooling was custom built.
This was ideal back then when Node was born more than eight years ago (the repository goes back to Nov 19 2007), because a lot of the stuff Node used was just not there.&lt;/p&gt;

&lt;p&gt;A few of the nifty things of the past include&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Blacklisting recipes to minimize the ISO&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edit-node&lt;/code&gt; to customize the ISO&lt;/li&gt;
&lt;li&gt;The TUI setup to ease administration&lt;/li&gt;
&lt;li&gt;The TUI installer to install Node&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All of these things were maintained by the core Node team - with occasional contributions from other contributors.
This worked well while Node was small.
But when Node gained more features, and all available features were used the number of bugs started to rise.
In the end a lot of time was spend on just maintaining the current code-base, without room for real steps forward.&lt;/p&gt;

&lt;p&gt;Now, eight years after classic Node we are in a situation that existing technology is more advanced and new projects appeared on the dance floor.&lt;/p&gt;

&lt;p&gt;In this environment of more advanced technologies and diverse projects we noticed that a lot of the functionality Node provides, is already there.
Taking the examples from above …&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.fedoraproject.org"&gt;Fedora&lt;/a&gt; is working itself to provide a smaller footprint, a side effect of the whole Cloud image movement and lately also because of &lt;a href="http://www.projectatomic.io"&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://libguestfs.org/"&gt;guestfish&lt;/a&gt; family is around to help you to modify existing images&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cockpit-project.org/"&gt;Cockpit&lt;/a&gt; is there to ease host administration&lt;/li&gt;
&lt;li&gt;And &lt;a href="https://github.com/fabiand/anaconda"&gt;anaconda&lt;/a&gt; matured well to provide a nice installation experience&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All the functionality we maintained ourselfs for years is now available in other projects.
Once we saw the common denominator between all those technologies, it was clear that the next version of Node should combine existing technologies efficiently, rather than to continue to develop and maintain them ourselfs.&lt;/p&gt;

&lt;p&gt;And integrating all the different technologies and projects together is like working on a puzzle. It&amp;rsquo;s more bringing the pieces together to reveal the final image&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;&lt;ol&gt;&lt;li id="fn:1" role="doc-endnote"&gt;
&lt;p&gt;Okay, granted, classic Node was also like a puzzle, but a lot of glue was needed to create the picture. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;&lt;/div&gt;</regular-body><tag>fedora</tag><tag>atomic</tag><tag>ovirt</tag><tag>node</tag><tag>Libguestfs</tag><tag>anaconda</tag></post><post id="134386409995" url="https://dummdida.tumblr.com/post/134386409995" url-with-slug="https://dummdida.tumblr.com/post/134386409995/container-und-ihre-eroberung-der-welt-ein" type="regular" date-gmt="2015-12-02 07:51:11 GMT" date="Wed, 02 Dec 2015 08:51:11" unix-timestamp="1449042671" format="markdown" reblog-key="WOZYn6oQ" slug="container-und-ihre-eroberung-der-welt-ein" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Container und ihre Eroberung der Welt - Ein praktischer Einstieg</regular-title><regular-body>&lt;iframe src="//slides.com/fabiand/container-erobern-die-welt-2015/embed" width="100%" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</regular-body><tag>container</tag><tag>deutsch</tag><tag>slides</tag></post><post id="134320178785" url="https://dummdida.tumblr.com/post/134320178785" url-with-slug="https://dummdida.tumblr.com/post/134320178785" type="video" date-gmt="2015-12-01 07:21:43 GMT" date="Tue, 01 Dec 2015 08:21:43" unix-timestamp="1448954503" format="markdown" reblog-key="FI5uXu8T" slug="" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://www.youtube.com/watch?v=V6-0kYhqoRo</video-source><video-player>&lt;iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/V6-0kYhqoRo?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe width="500" height="281"  id="youtube_iframe" src="https://www.youtube.com/embed/V6-0kYhqoRo?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe width="250" height="141"  id="youtube_iframe" src="https://www.youtube.com/embed/V6-0kYhqoRo?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><tag>weihnachten</tag><tag>video</tag></post><post id="134060831255" url="https://dummdida.tumblr.com/post/134060831255" url-with-slug="https://dummdida.tumblr.com/post/134060831255/ovirt-node-wip-and-engine-integration-testing" type="regular" date-gmt="2015-11-27 15:29:54 GMT" date="Fri, 27 Nov 2015 16:29:54" unix-timestamp="1448638194" format="markdown" reblog-key="jxJ0bXaI" slug="ovirt-node-wip-and-engine-integration-testing" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>oVirt Node WIP and Engine integration testing</regular-title><regular-body>&lt;p&gt;&lt;a href="http://www.ovirt.org/Node/4.0"&gt;oVirt Node 4.0&lt;/a&gt; is a step forward. We’ll be leveraging much more of existing projects (anaconda, cockpit, lvm) and try to write much less of our own code:&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="de"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/hashtag/oVirt?src=hash"&gt;#oVirt&lt;/a&gt; Node&amp;rsquo;s roadmap is now here &lt;a href="https://t.co/IJDzUWpfOk"&gt;https://t.co/IJDzUWpfOk&lt;/a&gt;&lt;/p&gt;— Fabian Deutsch (@dummdida) &lt;a href="https://twitter.com/dummdida/status/669529809421213697"&gt;25. November 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;A big advantage of this new architecture is that we can be much easier consumed.
The first fruit is integration testing of oVirt Node and oVirt Engine:&lt;/p&gt;

&lt;p&gt;One pro - already mentioned: It’s so easy to integrated both of them. But the test setup is quite nice - it is &lt;a href="http://dummdida.tumblr.com/post/132940914200/integration-testing-of-node-and-engine"&gt;completely runnable with user privileges, and completely decoupled from the hardware&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s so convenient.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gerrit.ovirt.org/gitweb?p=ovirt-appliance.git;a=blob_plain;f=tests/README.md;h=dc9f965c711172deaadf43c28e62df28dc6aa59c;hb=HEAD"&gt;Try it out yourself&lt;/a&gt; (it will take some time, and will download a few packages from the internet):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Install dependencies
sudo yum install -y \
    libvirt-daemon \
    libvirt-client \
    libvirt-daemon-qemu \
    libvirt-daemon-kvm \
    python-sh \
    virt-install \
    libguestfs \
    libguestfs-tools \
    openssh-clients \
    squashfs-tools \
    python-nose \
    python-pep8 \
    pyflakes \
    libselinux-utils

# Permissive mode is required for now
sudo setenforce 0

# Checkout the repository
git clone &lt;a href="https://gerrit.ovirt.org/p/ovirt-appliance.git"&gt;https://gerrit.ovirt.org/p/ovirt-appliance.git&lt;/a&gt;
cd ovirt-appliance
git submodule update --init
cd tests

# The build and testing itself
make clean-build-and-check
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you can&amp;rsquo;t try it, here is how it looks (skipping the build part):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make check 
nosetests --with-xunit -v --no-byte-compile
Create and add a host and wait for it to come up ... ok
Create a storage domain on Engine ... SKIP: Not implemented
Use a storage domain and host to spawn a disk-less VM ... SKIP: Not     implemented
Check that the basic IP connectivity between VMs is given ... ok
Check if the node can reach the engine ... ok
Check that the engine comes up and provides it's API ... ok
Check that a host can be rebooted and comes back ... ok
Check if host can be shutdown gracefully ... ok
Check if snapshots are working correct ... ok
Check if basic SSH is working correct ... ok

------------------------------------------------------------------
XML: /home/fabiand/work/ovirt/gerrit/appliance/tests/nosetests.xml
------------------------------------------------------------------
Ran 10 tests in 1467.470s

OK (SKIP=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks dense, right? Doesn&amp;rsquo;t look fancy?
Both of this is good: Dense - perfect, easy to see. Fancy? No need if nothing is broken.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>engine</tag><tag>integration</tag><tag>testing</tag></post><post id="134055778555" url="https://dummdida.tumblr.com/post/134055778555" url-with-slug="https://dummdida.tumblr.com/post/134055778555/all-namespaces-currently-used" type="regular" date-gmt="2015-11-27 13:11:54 GMT" date="Fri, 27 Nov 2015 14:11:54" unix-timestamp="1448629914" format="markdown" reblog-key="52kBNxYX" slug="all-namespaces-currently-used" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>All namespaces currently used</regular-title><regular-body>&lt;p&gt;Reminder to myself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;readlink /proc/*/task/*/ns/* | sort -u
&lt;/code&gt;&lt;/pre&gt;</regular-body><tag>reminder</tag><tag>fedora</tag><tag>ovirt</tag><tag>namespace</tag></post><post id="133998178780" url="https://dummdida.tumblr.com/post/133998178780" url-with-slug="https://dummdida.tumblr.com/post/133998178780/trim-with-plain-qemu" type="regular" date-gmt="2015-11-26 15:55:30 GMT" date="Thu, 26 Nov 2015 16:55:30" unix-timestamp="1448553330" format="markdown" reblog-key="WRoyBK9G" slug="trim-with-plain-qemu" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>TRIM with plain QEMU</regular-title><regular-body>&lt;p&gt;A reminder for myself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;qemu-img create -f qcow2 dst.img 20G
qemu-system-x86_64 -enable-kvm -m 2048 -serial stdio \
    -device virtio-scsi-pci
    -device scsi-hd,drive=rootdisk
    -drive file=dst.img,if=none,id=rootdisk,discard=on,cache=unsafe
&lt;/code&gt;&lt;/pre&gt;</regular-body><tag>qemu</tag><tag>discard</tag><tag>trim</tag></post><post id="133849858850" url="https://dummdida.tumblr.com/post/133849858850" url-with-slug="https://dummdida.tumblr.com/post/133849858850/hamster-rediscovered" type="regular" date-gmt="2015-11-24 07:02:26 GMT" date="Tue, 24 Nov 2015 08:02:26" unix-timestamp="1448348546" format="markdown" reblog-key="MuzpfZ9z" slug="hamster-rediscovered" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Hamster rediscovered</regular-title><regular-body>&lt;p&gt;&lt;img src="https://66.media.tumblr.com/130727a95774c8d0867ed1e269336e4b/tumblr_inline_nyb4qh3eXv1s0jj7d_540.png" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s so normal that you sometimes don&amp;rsquo;t speak about it - but …&lt;/p&gt;

&lt;p&gt;If you like to track your time in a fine granular way, consider to use project-hamster with the &lt;a href="https://extensions.gnome.org/extension/425/project-hamster-extension/"&gt;GNOME Shell extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On fedora run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pkcon install hamster-time-tracker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then visit the &lt;a href="https://extensions.gnome.org/extension/425/project-hamster-extension/"&gt;hamster extension page&lt;/a&gt; and install the hamster plugin. The rest is pretty self explanatory.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>hamster</tag><tag>time</tag><tag>tracker</tag></post><post id="132940914200" url="https://dummdida.tumblr.com/post/132940914200" url-with-slug="https://dummdida.tumblr.com/post/132940914200/integration-testing-of-node-and-engine" type="regular" date-gmt="2015-11-10 16:08:17 GMT" date="Tue, 10 Nov 2015 17:08:17" unix-timestamp="1447171697" format="markdown" reblog-key="Ldm83MHe" slug="integration-testing-of-node-and-engine" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Integration testing of Node and Engine</regular-title><regular-body>&lt;p&gt;For a while we&amp;rsquo;ve got the Engine Appliance around for the hosted-engine use-case. With &lt;a href="https://gerrit.ovirt.org/gitweb?p=ovirt-appliance.git;a=commit;h=36389d60270da463dee8c2acedc564f52c1a7b0d"&gt;this commit&lt;/a&gt; this appliance is now also leveraged to do integration testing.&lt;/p&gt;

&lt;p&gt;How does it work? Take the Engine appliance, an additional Node appliance, put them in libvirt user session VMs, connect them using a UDP multicast group, configure them with cloud-init, and finally use ssh to director them.&lt;/p&gt;

&lt;p&gt;At the bottom this is quite nice, because all of this fit&amp;rsquo;s into neat python-ish unittest like &lt;a href="https://gerrit.ovirt.org/gitweb?p=ovirt-appliance.git;a=blob;f=tests/testSanity.py;h=b3c03daed38e9733ac65f2a4f10628578efb20ca;hb=36389d60270da463dee8c2acedc564f52c1a7b0d"&gt;this one&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  28 class TestIntegrationSanity(IntegrationTestCase):
  29     """Basic integration testing between Node and Engine
  30 
  31     Add a host, add storage, and spawn a disk-less VM.
  32 
  33     Any testcase involving one Node and one Engine should go
  34     here.
  35     """
  36     def test_add_host(self):
  37         """Create and add a host and wait for it to come up
  38         """
  39         nodename = "node-host"
  40 
  41         self.engine_shell(("add host --name {nodename} --address 10.11.12.77 "
  42                            "--root_password 77 --cluster-name Default"
  43                            ).format(nodename=nodename))
  44 
  45         debug("Check that the host is now recognized")
  46         self.assertTrue(nodename in self.engine_shell("list hosts"))
  47 
  48         debug("Check that the host is getting up")
  49         self.engine_shell_wait(nodename, "list hosts --query 'status=up'")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A lot is going on in the background to enable this.
The main features (makeing it distinct from previous approaches) are:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Completely in user sessions, no root privileges required&lt;/li&gt;
&lt;li&gt;Clean test environment per testcase by leveraging snapshots&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;What is also important? A few test cases seem redundant, i.e. there are test cases to check that SSH is working, or snapshots are working correct.
The redundancy is there to make it much easier to find regressions.
It is much more complicated to find the root cause of a failure if you only got a single high-level test-case. By adding several smaller ones (for the building blocks of the high-level test-case), it should become more obvious what the cause for a failure is.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>ci</tag><tag>node</tag><tag>engine</tag></post><post id="132593600655" url="https://dummdida.tumblr.com/post/132593600655" url-with-slug="https://dummdida.tumblr.com/post/132593600655/connecting-user-session-vms" type="regular" date-gmt="2015-11-05 10:06:04 GMT" date="Thu, 05 Nov 2015 11:06:04" unix-timestamp="1446717964" format="markdown" reblog-key="QNehzyqP" slug="connecting-user-session-vms" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Connecting user-session VMs</regular-title><regular-body>&lt;p&gt;VMs spawned in a libvirtd user-session are not connected by default  because they use SLIRP connectivity (don&amp;rsquo;t ask me about the SLIRP details).
However, this means the network is just within the process and NATed to the outside world.
If oyu now have several VMs in the user-session, they can not speak to each other, because they are separate processes, and because each of them is getting NATed, one doesn&amp;rsquo;t see the other.&lt;/p&gt;

&lt;p&gt;To workaround this issue you can use the following snippet to attach an additional network device to a VM, which is using a UDP multicast group to distribute it&amp;rsquo;s network traffic. If you use this snippet (with different MACs) for all VMs in the user session, they all get attahced to the same multicast group and can thus see each other - if the network interface within the guest is configured correctly.&lt;/p&gt;

&lt;p&gt;The magic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;qemu:commandline
 xmlns:qemu="http://libvirt.org/schemas/domain/qemu/1.0"&amp;gt;
  &amp;lt;qemu:arg value='-netdev'/&amp;gt;
  &amp;lt;qemu:arg value='socket,id=busnet0,mcast=230.0.0.1:1234'/&amp;gt;
  &amp;lt;qemu:arg value='-device'/&amp;gt;
  &amp;lt;qemu:arg value='virtio-net-pci,netdev=busnet0,mac={mac}'/&amp;gt;
&amp;lt;/qemu:commandline&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1278317"&gt;bug&lt;/a&gt; is tracking an RFE to add this functionality to libvirtd.&lt;/p&gt;</regular-body><tag>qemu</tag><tag>libvirt</tag><tag>fedora</tag><tag>vm</tag></post><post id="131044606675" url="https://dummdida.tumblr.com/post/131044606675" url-with-slug="https://dummdida.tumblr.com/post/131044606675/view-your-gtk3-app-or-vm-on-the-web" type="regular" date-gmt="2015-10-12 21:21:44 GMT" date="Mon, 12 Oct 2015 23:21:44" unix-timestamp="1444684904" format="markdown" reblog-key="jodIjY7H" slug="view-your-gtk3-app-or-vm-on-the-web" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>View your GTK3 app or VM on the Web</regular-title><regular-body>&lt;p&gt;Ever wondered how to view gedit in a browser? It&amp;rsquo;s not a secret anymore, &lt;a href="https://developer.gnome.org/gtk3/stable/gtk-broadway.html"&gt;broadway&lt;/a&gt; is there for some time.
The nice thing is that you can also view VMs (by launching &lt;code&gt;virt-viewer&lt;/code&gt; with thebroadway bcakend):
&lt;img src="https://66.media.tumblr.com/9cd8ea55f960342e22616e20c0dabf2e/tumblr_inline_nw4m3kzJhV1s0jj7d_540.png" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;How does it work? On a Fedora 22 Workstation (or any with gtk3) host do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;broadwayd &amp;amp;
GDK_BACKEND=broadway BROADWAY_DISPLAY=:0 \
    virt-viewer -c qemu:///system the-domain-to-view
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then browse to &lt;a href="http://127.0.0.1:8080/."&gt;http://127.0.0.1:8080/.&lt;/a&gt; That&amp;rsquo;s it. And nothing else: Don&amp;rsquo;t expect audio or USB to work.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;code&gt;broadwayd -h&lt;/code&gt; to get an idea baout how to publish this on the web or use certificates.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>virt</tag><tag>virt-viewer</tag><tag>spice</tag><tag>broadway</tag><tag>gtk3</tag><tag>gnome</tag></post><post id="130199969060" url="https://dummdida.tumblr.com/post/130199969060" url-with-slug="https://dummdida.tumblr.com/post/130199969060/shift5-decent-hardware-and-warning" type="regular" date-gmt="2015-09-30 13:40:39 GMT" date="Wed, 30 Sep 2015 15:40:39" unix-timestamp="1443620439" format="markdown" reblog-key="WZy2NYAa" slug="shift5-decent-hardware-and-warning" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>SHIFT5 - Decent hardware and: “Warning: Smartphones can be timekillers.”</regular-title><regular-body>&lt;p&gt;After sending in my &lt;a href="http://dummdida.tumblr.com/post/130051494330/alcatel-one-touch-fire-e-firefox-os"&gt;Alcatel One Touch Fire E with Firefox OS&lt;/a&gt; for repair, I tried to grab a nice phone for the meantime - or beyond …&lt;/p&gt;

&lt;p&gt;&lt;img src="https://66.media.tumblr.com/6f1c96d7efb7e50717137017a93bffeb/tumblr_inline_nvhs6mwpoq1s0jj7d_540.jpg" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve settled with the affordable &lt;a href="http://shiftphones.com/"&gt;SHIFT5&lt;/a&gt; desigend by a small company in Hesse.
The producers started with crowdfunding the SHIFT7 - a phablet - but also produce a 5 inch smartphone - which I&amp;rsquo;m now holding in my hands.&lt;/p&gt;

&lt;p&gt;It is advertised with:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Best effort to produce it &amp;ldquo;fair&amp;rdquo;&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t void your warranty by rooting&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In addition to this, I am personally very happy that&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;The feeling of the hardware is &amp;ldquo;solid&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The Android is quite clean&lt;/li&gt;
&lt;li&gt;UMTS, EDGE, …&lt;/li&gt;
&lt;li&gt;Dual-Sim&lt;/li&gt;
&lt;li&gt;
&lt;/ul&gt;&lt;p&gt;Let&amp;rsquo;s see how the next few months will be.&lt;/p&gt;

&lt;p&gt;Btw. This is the kind of hardware I&amp;rsquo;d like to see Firefox OS on.&lt;/p&gt;</regular-body><tag>smartphone</tag><tag>shift5</tag><tag>firefox</tag><tag>firefoxos</tag></post><post id="130121616270" url="https://dummdida.tumblr.com/post/130121616270" url-with-slug="https://dummdida.tumblr.com/post/130121616270/rebuilding-the-initramfs-on-ovirt-node" type="regular" date-gmt="2015-09-29 08:17:51 GMT" date="Tue, 29 Sep 2015 10:17:51" unix-timestamp="1443514671" format="markdown" reblog-key="UVOqtI9x" slug="rebuilding-the-initramfs-on-ovirt-node" state="private" is_reblog="false" tumblelog="dummdida" private="true"><regular-title>Rebuilding the initramfs on oVirt Node</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/boston_public_library/6997630239/in/photostream/" title="Elephants being unloaded"&gt;&lt;img src="https://farm8.staticflickr.com/7126/6997630239_5b3b693c89_z.jpg" width="640" height="510" alt="Elephants being unloaded"/&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href="http://www.ovirt.org/Node"&gt;oVirt Node&lt;/a&gt; with multipath storage, then you might have noticed that there are some oddities around this.
Mainly that using multipath hardware for booting Node (i.e. when you install Node on an iSCSI or FC target), will not utilize all paths.&lt;/p&gt;

&lt;p&gt;There are two main reasons for this:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;The persistence does not work very well in the very-early boot process&lt;/li&gt;
&lt;li&gt;The initramfs has no host specific configuration&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The (second issue will be addressed in oVirt 3.6](&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1235965"&gt;https://bugzilla.redhat.com/show_bug.cgi?id=1235965&lt;/a&gt;) and hopefully resolves most of the issues around multipath.&lt;/p&gt;

&lt;p&gt;Bit even in oVirt 3.5 you can alrady try to regenerate the initramfs to address those issues.
How? Just follow the small steps below after dropping to a shell from the setup TUI using F2:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;WARNING: This will overvwrite your existing initrd image. Take additional steps to backup it as needed. In the worst case you are left with an unbootable system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# Do your changes to /etc/multipath.conf
# And persist it: persist /etc/multipath.conf

# Now: Generate the new initrd
dracut /var/tmp/initrd0.img

# If that passed, let's install it:
# Let's mount /boot
/usr/libexec/ovirt-functions mount_liveos
mount -oremount,rw /liveos
mount -obind /liveos /boot

cp /var/tmp/initrd0.img /boot/initrd0.img

reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reboot should boot the new initrd.&lt;/p&gt;

&lt;p&gt;Let me know if this is working with or without problems.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>dracut</tag><tag>multipath</tag><tag>persistence</tag><tag>fedora</tag></post><post id="130051494330" url="https://dummdida.tumblr.com/post/130051494330" url-with-slug="https://dummdida.tumblr.com/post/130051494330/alcatel-one-touch-fire-e-firefox-os" type="regular" date-gmt="2015-09-28 09:10:48 GMT" date="Mon, 28 Sep 2015 11:10:48" unix-timestamp="1443431448" format="markdown" reblog-key="XIaqQYnm" slug="alcatel-one-touch-fire-e-firefox-os" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Alcatel One Touch Fire E / Firefox OS - Retrospective</regular-title><regular-body>&lt;p&gt;My first Firefox OS device was the &lt;a href="http://dummdida.tumblr.com/post/86332938365/geeksphone-revolution"&gt;Geeksphone Revolution&lt;/a&gt;. Hardware wise it was a quite nice device, but the size just didn&amp;rsquo;t fit my hand and so I droped it a few times until the display was broken.&lt;/p&gt;

&lt;p&gt;At that time - beginning of 2015 - I rather tended to go with anohther Firefox OS phone. Luckily the &lt;a href="https://firefoxosdevices.org/de/alcatel-one-touch-fire-e/"&gt;Alcatel One Touch Fire E&lt;/a&gt; got introduced at that time and I went with it (paying around € 120,-).&lt;/p&gt;

&lt;p&gt;&lt;img src="https://66.media.tumblr.com/183660de1ec69099ed7f97ab608b89c4/tumblr_inline_nvdpjc64Aj1s0jj7d_540.png" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;So, now, a few months later I need to send in my device because the touchscreen does take my touches anymore.
In the light of &lt;a href="https://matej.ceplovi.cz/blog/firefox-os-post-mortem.html"&gt;Matej&amp;rsquo;s earlier post&lt;/a&gt; I take the occassion to share my experienceswith Firefox OS 1.3 (and later 1.4).&lt;/p&gt;

&lt;p&gt;Some good:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Firefox OS is simple - Nothing is really deeply nested, or I hadn&amp;rsquo;t had any trouble figuring stuff out&lt;/li&gt;
&lt;li&gt;The camera app was fine, the fotos were actually quite good - but it was simple&lt;/li&gt;
&lt;li&gt;The battery runtime was quite good, 2 days at normal usage, or half a day at full-time usage.&lt;/li&gt;
&lt;li&gt;Tethering was actually working remarkably well over USB and wireless (hotspot-mode)&lt;/li&gt;
&lt;li&gt;The Alcatel phone itself was a quite nice piece of hardware&lt;/li&gt;
&lt;li&gt;Considering that Mozilla started from scratch, they did an awesome job to deliver the experience you have today on Firefox OS&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Some bad:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;The browser was quite fast to render, but to simple. No privacy tabs, tabs in general were hard to close, I missed the read mode several times every week.&lt;/li&gt;
&lt;li&gt;The lack of decent apps - It&amp;rsquo;s surely a chicken and an egg problem, but maybe Motzilla could consider to provide supported apps for the &amp;ldquo;most important&amp;rdquo; apps on Android, to enable Firefox OS users to communicate with their Android peers (I&amp;rsquo;m mainly looking a OpenWapp here)&lt;/li&gt;
&lt;li&gt;A few times I dropped calls, because the button to drop a call is so close to the edges of the screen.&lt;/li&gt;
&lt;li&gt;Sometimes, the phone becomes slow, with no obvious reasons.&lt;/li&gt;
&lt;li&gt;WebRTC was not yet supported on my firmware&lt;/li&gt;
&lt;li&gt;Calling a contact involved two taps (first on the contact, then on ethe number you want to dial). This might sound picky, but is also annoying after some time.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;At the bottom line Firefox OS was &lt;em&gt;okay&lt;/em&gt;, but I am really missing a decent phone for it.
The &amp;ldquo;complete package&amp;rdquo; is not right yet - A bit more polished and stronger phone might make the experience better.&lt;/p&gt;

&lt;p&gt;For now I&amp;rsquo;m going with an Android budget phone, but I am ready to grab any new Firefox OS if it is a poiece of decent hardware,&lt;/p&gt;</regular-body><tag>firefoxos</tag><tag>alcatel</tag><tag>fire</tag><tag>fedora</tag></post><post id="129765312680" url="https://dummdida.tumblr.com/post/129765312680" url-with-slug="https://dummdida.tumblr.com/post/129765312680" type="video" date-gmt="2015-09-24 06:40:12 GMT" date="Thu, 24 Sep 2015 08:40:12" unix-timestamp="1443076812" format="markdown" reblog-key="Y8MTYF0p" slug="" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://www.youtube.com/watch?t=168&amp;v=xu0VSKvfNEI</video-source><video-player>&lt;iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/xu0VSKvfNEI?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe width="500" height="281"  id="youtube_iframe" src="https://www.youtube.com/embed/xu0VSKvfNEI?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe width="250" height="141"  id="youtube_iframe" src="https://www.youtube.com/embed/xu0VSKvfNEI?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><tag>gnome</tag></post><post id="129619111795" url="https://dummdida.tumblr.com/post/129619111795" url-with-slug="https://dummdida.tumblr.com/post/129619111795" type="video" date-gmt="2015-09-22 04:19:12 GMT" date="Tue, 22 Sep 2015 06:19:12" unix-timestamp="1442895552" format="markdown" reblog-key="ju8RAU16" slug="" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://www.youtube.com/watch?v=1fmQs37YqXg</video-source><video-player/><video-player max-width="500"/><video-player max-width="250"/><tag>selfie</tag><tag>video</tag><tag>advertisement</tag></post><post id="129619074565" url="https://dummdida.tumblr.com/post/129619074565" url-with-slug="https://dummdida.tumblr.com/post/129619074565" type="photo" date-gmt="2015-09-22 04:18:38 GMT" date="Tue, 22 Sep 2015 06:18:38" unix-timestamp="1442895518" format="markdown" reblog-key="dKq8lKFA" slug="" state="published" is_reblog="false" tumblelog="dummdida" width="4000" height="3000"><photo-url max-width="1280">https://66.media.tumblr.com/4409001caea8bc9fae811682f4c49d25/tumblr_nv29b2S1pP1st6sz0o1_1280.jpg</photo-url><photo-url max-width="500">https://66.media.tumblr.com/4409001caea8bc9fae811682f4c49d25/tumblr_nv29b2S1pP1st6sz0o1_500.jpg</photo-url><photo-url max-width="400">https://66.media.tumblr.com/4409001caea8bc9fae811682f4c49d25/tumblr_nv29b2S1pP1st6sz0o1_400.jpg</photo-url><photo-url max-width="250">https://66.media.tumblr.com/4409001caea8bc9fae811682f4c49d25/tumblr_nv29b2S1pP1st6sz0o1_250.jpg</photo-url><photo-url max-width="100">https://66.media.tumblr.com/4409001caea8bc9fae811682f4c49d25/tumblr_nv29b2S1pP1st6sz0o1_100.jpg</photo-url><photo-url max-width="75">https://66.media.tumblr.com/4409001caea8bc9fae811682f4c49d25/tumblr_nv29b2S1pP1st6sz0o1_75sq.jpg</photo-url><tag>wallpaper</tag></post><post id="129060308890" url="https://dummdida.tumblr.com/post/129060308890" url-with-slug="https://dummdida.tumblr.com/post/129060308890/opportunistic-encryption-prototype-with" type="regular" date-gmt="2015-09-14 07:32:49 GMT" date="Mon, 14 Sep 2015 09:32:49" unix-timestamp="1442215969" format="markdown" reblog-key="vpq3cBpE" slug="opportunistic-encryption-prototype-with" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Opportunistic encryption (prototype) with libreswan 3.14</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/infanticida/412855801/" title="Swan lake - 5"&gt;&lt;img src="https://farm1.staticflickr.com/149/412855801_9e409b7b19.jpg" alt="Swan lake - 5"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Encryption by default, even with no authentication, why? Because it &lt;a href="http://www.rfc-editor.org/rfc/rfc7619.txt"&gt;defend(s) against Pervasive Monitoring attacks without the need to sacrifice anonymity.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;libreswan 3.14, which comes with initial (prototype) support for null auth, is available in Fedora 22 updates-testing.&lt;/p&gt;

&lt;p&gt;Enabling it by default for connections can be achieved as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Write the OE (null auth) configuration
echo &amp;gt; /etc/ipsec.d/oe.conf &amp;lt;&amp;lt;EOC
# From: &lt;a href="https://github.com/libreswan/libreswan/blob/master/testing/baseconfigs/all/etc/ipsec.d/ikev2-oe.conf"&gt;https://github.com/libreswan/libreswan/blob/master/testing/baseconfigs/all/etc/ipsec.d/ikev2-oe.conf&lt;/a&gt;
# default policy
conn packetdefault
        type=tunnel
        left=%defaultroute
        authby=null
        leftid=%null
        rightid=%null
        ikev2=insist
        right=%opportunistic
        failureshunt=passthrough
        negotiationshunt=passthrough
        auto=route
EOC

# Enable conf snippets in /etc/ipsec.d
sed -i "/include.*ipsec[.]d/ s/#include/include/" /etc/ipsec.conf

# Start ipsec (will generate nssdb if necessary)
service ipsec start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can check that connections to other hosts (where OE is enabled) will establish secure connections right away (with no more aotaheadahead of time key exchanges):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Monitor
tcpdump -i any proto 50
ipsec status
…
000 IPsec SAs: total(1), authenticated(0), anonymous(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works fine for me on my local network, the security however, needs to be proven.&lt;/p&gt;</regular-body><tag>ipsec</tag><tag>fedora</tag><tag>libreswan</tag></post><post id="126272476915" url="https://dummdida.tumblr.com/post/126272476915" url-with-slug="https://dummdida.tumblr.com/post/126272476915/goto-in-bash" type="regular" date-gmt="2015-08-09 18:57:36 GMT" date="Sun, 09 Aug 2015 20:57:36" unix-timestamp="1439146656" format="markdown" reblog-key="Tos6jQHC" slug="goto-in-bash" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>`goto` in bash</regular-title><regular-body>&lt;p&gt;One way to spend Sunday night is to implement the famous &lt;code&gt;goto&lt;/code&gt; in bash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;goto() { eval "$(cat "$0" | sed -n "$1,$ p")" ; }
goto $1
exit

echo "Yeah!"
goto $1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And run it using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goto.sh 4
&lt;/code&gt;&lt;/pre&gt;</regular-body><tag>bash</tag></post><post id="121087781445" url="https://dummdida.tumblr.com/post/121087781445" url-with-slug="https://dummdida.tumblr.com/post/121087781445/re-udev-events-in-a-container" type="regular" date-gmt="2015-06-09 06:24:22 GMT" date="Tue, 09 Jun 2015 08:24:22" unix-timestamp="1433831062" format="markdown" reblog-key="FIOzssbQ" slug="re-udev-events-in-a-container" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Re: udev events in a container</regular-title><regular-body>&lt;p&gt;It is possible to get udev events into the container. Just use &lt;code&gt;--net=host -v /dev:/dev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;</regular-body><tag>docker</tag><tag>container</tag><tag>udev</tag></post><post id="120760696790" url="https://dummdida.tumblr.com/post/120760696790" url-with-slug="https://dummdida.tumblr.com/post/120760696790/in-real-time" type="video" date-gmt="2015-06-05 07:24:35 GMT" date="Fri, 05 Jun 2015 09:24:35" unix-timestamp="1433489075" format="markdown" reblog-key="3aHLOgv8" slug="in-real-time" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://vimeo.com/121146483</video-source><video-caption>&lt;p&gt;… in real time!&lt;/p&gt;</video-caption><video-player>&lt;iframe src="https://player.vimeo.com/video/121146483?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="400" height="225" frameborder="0" title="A Boy and His Kite: An Animated Short" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe src="https://player.vimeo.com/video/121146483?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="500" height="281" frameborder="0" title="A Boy and His Kite: An Animated Short" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe src="https://player.vimeo.com/video/121146483?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="250" height="141" frameborder="0" title="A Boy and His Kite: An Animated Short" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player></post><post id="120685318395" url="https://dummdida.tumblr.com/post/120685318395" url-with-slug="https://dummdida.tumblr.com/post/120685318395/ovirt-engine-squeezed-into-a-container" type="regular" date-gmt="2015-06-04 10:37:47 GMT" date="Thu, 04 Jun 2015 12:37:47" unix-timestamp="1433414267" format="markdown" reblog-key="9C71c4ph" slug="ovirt-engine-squeezed-into-a-container" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>oVirt Engine - squeezed into a container</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/nez/179660009" title="Technical Drawing by Andrew, auf Flickr"&gt;&lt;img src="https://c1.staticflickr.com/1/61/179660009_96aad51bd6.jpg" width="405" height="500" alt="Technical Drawing"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ovirt.org"&gt;oVirt Engine&lt;/a&gt;  provides the web-based management interface (webadmin) in oVirt. In addition it communicates with postgresql to maintain the database of all the involved entities.
And it is based on &lt;a href="http://www.jboss.org"&gt;JBoss&lt;/a&gt; and can be installed on &lt;a href="http://www.fedoraproject.org"&gt;Fedora&lt;/a&gt; or &lt;a href="http://www.centos.org"&gt;CentOS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This kind of application is perfectly suited for &lt;a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization"&gt;containers&lt;/a&gt; - well - you&amp;rsquo;ve probably heard of them.&lt;/p&gt;

&lt;p&gt;Well, as it&amp;rsquo;s suitable I gave it a go - I&amp;rsquo;m not the first one who gave it a go, Moran &lt;a href="https://community.redhat.com/blog/2014/10/ovirt-dockerized/"&gt;also&lt;/a&gt; &lt;a href="https://community.redhat.com/blog/2014/10/ovirt-dockerized-part-2/"&gt;did&lt;/a&gt; this. My work is similar to his, I just tried to leverage some enhancements which popped up in the last 6 months - mainly the integration with the &lt;code&gt;atomic&lt;/code&gt; command and a simpler integration with systemd.&lt;/p&gt;

&lt;p&gt;The image is based on this &lt;a href="https://gerrit.ovirt.org/gitweb?p=ovirt-container-engine.git;a=blob;f=Dockerfile;h=4fa88b5a59564c84bf39c7ee731600cd66fd2ad8;hb=HEAD"&gt;Dockerfile&lt;/a&gt; and &lt;a href="https://gerrit.ovirt.org/gitweb?p=ovirt-container-engine.git;a=blob;f=container/atomic-install.sh;h=3b1243f5bb13e6ce4e41b8364df1ae5bb819976c;hb=HEAD"&gt;this atomic installation script&lt;/a&gt; to perform the engine setup on deployment.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;atomic&lt;/code&gt; command the usage is quite easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;atomic install fabiand/ovirt-engine-3.5
# or
ADMINPW=foo atomic install fabiand/ovirt-engine-3.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;docker&lt;/code&gt; it&amp;rsquo;s a few more lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export IMAGE=docker.io/fabiand/ovirt-engine-3.5
export NAME=ovirt-engine-3.5

# Use a transient (--rm) container to create the real the container
docker run --rm -v /:/host \
  -e FQDN=$(hostname) \
  -e ADMINPASSWORD=${ADMINPW:-ovirt} \
  -e NAME=$NAME \
  -e IMAGE=$IMAGE \
  $IMAGE container/atomic-install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note: You can also use &lt;code&gt;docker inspect -f '{{.Config.Labels.INSTALL}}' docker.io/fabiand/ovirt-engine-3.5&lt;/code&gt; to retrieve the correct commandline directly from the image)&lt;/p&gt;

&lt;p&gt;After this run you can access oVirt Engine on port 80 and 443 of that host.&lt;/p&gt;

&lt;p&gt;However, there are still some unclean or open ends:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Take care of upgrades&lt;/li&gt;
&lt;li&gt;Find a nicer way to set the admin password&lt;/li&gt;
&lt;li&gt;For now &lt;a href="http://postgresql.org/"&gt;postgres&lt;/a&gt; is bundled&lt;/li&gt;
&lt;li&gt;Static vs dynamic ports&lt;/li&gt;
&lt;li&gt;Use the latest oVirt bits&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;</regular-body><tag>ovirt</tag><tag>engine</tag><tag>container</tag><tag>fedora</tag><tag>centos</tag><tag>postgresql</tag><tag>atomic</tag></post><post id="120428526875" url="https://dummdida.tumblr.com/post/120428526875" url-with-slug="https://dummdida.tumblr.com/post/120428526875" type="video" date-gmt="2015-06-01 08:40:03 GMT" date="Mon, 01 Jun 2015 10:40:03" unix-timestamp="1433148003" format="markdown" reblog-key="Q6tboFcC" slug="" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://www.youtube.com/watch?feature=player_embedded&amp;v=ZTidn2dBYbY</video-source><video-player>&lt;iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/ZTidn2dBYbY?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe width="500" height="281"  id="youtube_iframe" src="https://www.youtube.com/embed/ZTidn2dBYbY?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe width="250" height="141"  id="youtube_iframe" src="https://www.youtube.com/embed/ZTidn2dBYbY?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player></post><post id="119365551180" url="https://dummdida.tumblr.com/post/119365551180" url-with-slug="https://dummdida.tumblr.com/post/119365551180" type="photo" date-gmt="2015-05-19 15:32:26 GMT" date="Tue, 19 May 2015 17:32:26" unix-timestamp="1432049546" format="markdown" reblog-key="puBccw9w" slug="" state="published" is_reblog="false" tumblelog="dummdida" width="3840" height="2160"><photo-url max-width="1280">https://66.media.tumblr.com/5b812b0cd45e257ed84fc2f92976daf6/tumblr_nolsi2icbC1st6sz0o1_1280.jpg</photo-url><photo-url max-width="500">https://66.media.tumblr.com/5b812b0cd45e257ed84fc2f92976daf6/tumblr_nolsi2icbC1st6sz0o1_500.jpg</photo-url><photo-url max-width="400">https://66.media.tumblr.com/5b812b0cd45e257ed84fc2f92976daf6/tumblr_nolsi2icbC1st6sz0o1_400.jpg</photo-url><photo-url max-width="250">https://66.media.tumblr.com/5b812b0cd45e257ed84fc2f92976daf6/tumblr_nolsi2icbC1st6sz0o1_250.jpg</photo-url><photo-url max-width="100">https://66.media.tumblr.com/5b812b0cd45e257ed84fc2f92976daf6/tumblr_nolsi2icbC1st6sz0o1_100.jpg</photo-url><photo-url max-width="75">https://66.media.tumblr.com/5b812b0cd45e257ed84fc2f92976daf6/tumblr_nolsi2icbC1st6sz0o1_75sq.jpg</photo-url><tag>blender</tag><tag>low poly</tag></post><post id="119306436010" url="https://dummdida.tumblr.com/post/119306436010" url-with-slug="https://dummdida.tumblr.com/post/119306436010/opencl-a-small-glance-at-where-we-stand-and-what" type="regular" date-gmt="2015-05-18 21:27:20 GMT" date="Mon, 18 May 2015 23:27:20" unix-timestamp="1431984440" format="markdown" reblog-key="qQhGksX4" slug="opencl-a-small-glance-at-where-we-stand-and-what" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>OpenCL - A small glance at where we stand and what we achieved. (And ocl-icd)</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/devnull/364375415" title="together by daniel zimmel, auf Flickr"&gt;&lt;img src="https://c1.staticflickr.com/1/123/364375415_bbc9b74c4e.jpg" width="500" height="375" alt="together"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More than a year ago it was a change. A change in Fedora 22: The &lt;a href="https://fedoraproject.org/wiki/Changes/OpenCL"&gt;introduction of OpenCL&lt;/a&gt;.
The idea was to get OpenCL somewhat usable out of the boxin Fedora, to enable people to use it, to further get more people testing it, to finally find more bugs and raise the demand.
With a lot of help from others, especially Björn, the change made it into Fedora 21.&lt;/p&gt;

&lt;p&gt;About a year later a couple of bugs were found, and some OpenCL related packages got co-maintainers and more or less regular updates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1219646"&gt;One bug tho&lt;/a&gt; in ocl-icd (an OpenCL ICD loader) gained some attention lately, because the usage of &lt;a href="https://forge.imag.fr/projects/ocl-icd/"&gt;ocl-icd&lt;/a&gt; lead to an infite loop.&lt;/p&gt;

&lt;p&gt;After some discussion on the bug, two of us reached out to upstream. Within ours we got a feedback, and even more, the bug got (likely) fixed.
That is nice, and that is the power of open source. The power of sharing, caring, and working together.
This is especially remarkable, because the ocl-icd maintainers are not active in the Fedora community, but were so responsive and had open ears to fix the bug. This is not always the case, but nice that it worked so nicely here.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get to something else after this outburst: OpenCL is used much more in Fedora compared to how much it was used a year ago.
While trying to identify the packages which might need a rebuild because of this ocl-icd change, I saw that we&amp;rsquo;ve got quite some packages which now require ocl-icd (the only ICD loader in Fedora for now).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ repoquery --whatrequires ocl-icd --qf "%{name}" | sort -u
clinfo
clpeak
erlang-cl
gocl
LuxRender
LuxRender-core
LuxRender-lib
mesa-libOpenCL
ocl-icd-devel
pocl
wine-opencl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice to see that the interest is higher than before. But we also see that OpenCL still needs much love to make it really usable.
But work is done everywhere, especially the implementations progress slowly, but steady.&lt;/p&gt;</regular-body><tag>opencl</tag><tag>fedora</tag><tag>ocl-icd</tag></post><post id="118770655240" url="https://dummdida.tumblr.com/post/118770655240" url-with-slug="https://dummdida.tumblr.com/post/118770655240/udev-events-in-containers" type="regular" date-gmt="2015-05-12 10:17:32 GMT" date="Tue, 12 May 2015 12:17:32" unix-timestamp="1431425852" format="markdown" reblog-key="3GNtG0An" slug="udev-events-in-containers" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>udev events in containers</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/maxelman/5338475820" title="fire sprite by Max Elman, auf Flickr"&gt;&lt;img src="https://c2.staticflickr.com/6/5204/5338475820_e72e898191_z.jpg" width="640" height="427" alt="fire sprite"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can monitor events related to udev by using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ udevadm monitor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for fun you can trigger events by calling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ udevadm trigger --subsystem=net --action=change
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;udev has actually two types of events - thanks prajnoha - kernel events and udev events.&lt;/p&gt;

&lt;p&gt;The kernels events come from - well - the kernel and have minimal informations.
The udev events come from the udev daemon, after processing the udev rules and have many more informations (those created and attached by the rules).
To monitor just the one or the other you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ udevadm monitor --kernel --env
$ udevadm monitor --udev --env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes you might want that a container get&amp;rsquo;s those events from the host as well. I.e. to monitor the creation of new blockdevices, think of a containerized udisks which wants to follow dynamic system changes.&lt;/p&gt;

&lt;p&gt;Without a hassle a container can see the kernel events.
But currently I do not see a way to retrieve the host side generated udev events inside the container.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>udev</tag><tag>docker</tag><tag>systemd</tag><tag>container</tag></post><post id="118686497295" url="https://dummdida.tumblr.com/post/118686497295" url-with-slug="https://dummdida.tumblr.com/post/118686497295/moving-unconnected-nics-into-a-container-namespace" type="regular" date-gmt="2015-05-11 10:13:59 GMT" date="Mon, 11 May 2015 12:13:59" unix-timestamp="1431339239" format="markdown" reblog-key="uYzA0D40" slug="moving-unconnected-nics-into-a-container-namespace" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Moving unconnected NICs into a container namespace</regular-title><regular-body>&lt;p&gt;As &lt;a href="http://dummdida.tumblr.com/post/118347887245/different-ways-of-passing-nics-to-containers-and"&gt;discussed previously&lt;/a&gt;, sometimes you might want to move NICs into a container network namespace. The following script will ease this process.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
# Usage: move-nics.sh network-router-container
docker-pid() { docker inspect --format="{{.State.Pid}}" $1 ; }

DSTCT=${1}
DSTPID=$(docker-pid $DSTCT)

devices() { nmcli -t -f device,type,connection device) ; }
UNCONNECTEDETH=$(devices | egrep "ethernet:--$" | cut -d ":" -f1)
for NIC in $UNCONNECTEDETH
do
  echo "Moving '$NIC' to netns of '$DSTPID'"
  ip link set netns ${DSTPID} $NIC
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A longer version is available &lt;a href="https://github.com/fabiand/dockerfiles/blob/master/move-nics.sh"&gt;here&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>docker</tag><tag>container</tag><tag>nmcli</tag><tag>NetworkManager</tag></post><post id="118370107970" url="https://dummdida.tumblr.com/post/118370107970" url-with-slug="https://dummdida.tumblr.com/post/118370107970/real-persistence-with-ovirt-node" type="regular" date-gmt="2015-05-07 15:59:38 GMT" date="Thu, 07 May 2015 17:59:38" unix-timestamp="1431014378" format="markdown" reblog-key="pyWgs9t6" slug="real-persistence-with-ovirt-node" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Real persistence with oVirt Node</regular-title><regular-body>&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/ellasdad/373339245" title="Lego speeder"&gt;&lt;img src="https://c1.staticflickr.com/1/128/373339245_b2a9be68aa.jpg" width="500" height="400" alt="Lego speeder"/&gt;&lt;/a&gt;&lt;script async src="//widgets.flickr.com/embedr/embedr.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Node is conservative about keeping changes in files. And it is impossible to modify the root filesystem of a running Node in such a way, that changes to it would survive a reboot.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s true. But you can modify the intermediate layers to persist the changes made to the rootfs.
Huh? That sounds weird. It is.&lt;/p&gt;

&lt;p&gt;The background is roughly: The Node iso is going through some loop mounts and through device-mapper snapshot.
Somewhere the dm snapshot requires a backing file for the changes made to the block device it maps.
&lt;a href="https://github.com/haraldh/dracut/blob/master/modules.d/90dmsquash-live/dmsquash-live-root.sh#L111"&gt;Normally&lt;/a&gt; this temporary device is a memory (thorugh a tmpfs), but with some nifty &lt;a href="https://github.com/haraldh/dracut/blob/master/modules.d/90dmsquash-live/dmsquash-live-root.sh#L24"&gt;dracut&lt;/a&gt; magic this backing device for the device-mapper snapshot can be any device.
And if you choose a device which keeps changes (like any regular harddisk) then your changes to the rootfs will survive - not in the rootfs - but in the intermediate layers.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a bit complex to explain but easy to use and but useful.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll illustrate the flow using qemu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a file for the harddisk where you want to install Node:
qemu-img create -f qcow2 hda.qcow2 20G

# Create a backing file for the persistency
qemu-img create -f raw hdb.raw 500M

# Create a file in the persistence image which holds the actual changes
mkfs.ext4 hdb.raw
mkdir loop
mount -o loop hdb.raw loop
dd if=/dev/zero bs=1M count=300 of=loop/persist-hda.img
umount -f loop

# Run qemu
qemu-system-x86_64 -m 2048 -hda hda.qcow2 -hdb hdb.raw -cdrom node.iso
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now install Node normally.&lt;/p&gt;

&lt;p&gt;Whenever you want to &lt;strong&gt;make a change&lt;/strong&gt; or &lt;strong&gt;run the system with the change&lt;/strong&gt;, you need to add the following to your grub commandline:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rd.live.overlay=/dev/sdb:/persist-hda.img
# overlay= on el6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or in general:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rd.live.overlay=&amp;lt;device&amp;gt;:&amp;lt;absolute path relative to the root of device&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That also means that you can have different files inside your persistence device for different persisted things. Maybe you know what I mean. I.e.:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;/persist-vdsm-update.img&lt;/li&gt;
&lt;li&gt;/persist-node-update.img&lt;/li&gt;
&lt;li&gt;/persist-qemu-update.img&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;However, one drawback is: This doesnot work for upgrades. After you upgraded Node, the persistence image can not be used anymore.&lt;/p&gt;

&lt;p&gt;Also note that the rootfs is by default mounted &lt;code&gt;ro&lt;/code&gt; - you either need to remove the &lt;code&gt;ro&lt;/code&gt; keyword from the kernel cmdline or remount the root fs writable.
Take also care that you don&amp;rsquo;t try to modify a path which is on a tmpfs.&lt;/p&gt;</regular-body><tag>node</tag><tag>dracut</tag><tag>fedora</tag><tag>persistence</tag></post><post id="118347887245" url="https://dummdida.tumblr.com/post/118347887245" url-with-slug="https://dummdida.tumblr.com/post/118347887245/different-ways-of-passing-nics-to-containers-and" type="regular" date-gmt="2015-05-07 06:31:51 GMT" date="Thu, 07 May 2015 08:31:51" unix-timestamp="1430980311" format="markdown" reblog-key="ycetMyuA" slug="different-ways-of-passing-nics-to-containers-and" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Different ways of passing NICs to containers - and their limitations</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/iaea_imagebank/5263282196" title="02510170 by IAEA Imagebank, on Flickr"&gt;&lt;img src="https://farm6.staticflickr.com/5242/5263282196_567f31252a_z.jpg" width="640" height="425" alt="02510170"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NICs are needed inside containers. By default docker is adding a single linkl to a container.
Somtimes tho, you want more links inside the container. There are several ways to do this:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Use veths and bridges&lt;/li&gt;
&lt;li&gt;Use &lt;a href="http://dummdida.tumblr.com/post/118274685190/1-1-mapping-of-host-side-nics-into-a-container"&gt;macvlans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;--net=host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Move individual NICs into the containers network namespace&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are likely more ways to do this, but the ones above are the ones I looked at up to now.&lt;/p&gt;

&lt;p&gt;Considering that &lt;code&gt;--net=host&lt;/code&gt; put&amp;rsquo;s alll host sided NICs into the container, you might wonder why I investigated the other methods. The reason is that &lt;code&gt;--net=host&lt;/code&gt; breaks the isolation between the host and container badly, and also has an effect on the network connectivity of other containers on the network.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m looking for a less desruptive way to have more NICs inside the container.
&lt;code&gt;veths&lt;/code&gt; and &lt;code&gt;macvlans&lt;/code&gt; have the &lt;strong&gt;advantage&lt;/strong&gt; that they are virtual, and can be added and handled easily, and provide a clean separation between the physical NICs and the NICs inside the container.
The &lt;strong&gt;drawbacks&lt;/strong&gt; are potential performance issues, also the functionality (&lt;code&gt;ethtool&lt;/code&gt; …) &lt;em&gt;is&lt;/em&gt; limited. &lt;code&gt;ethtool&lt;/code&gt; will only see a virtual NIC, and can not configure stuff like offloading - because that is only available on the physical NIC.
It is also questionable if fancy network layouts inside the container (bonds, bridges, …) will work as expected.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--het=host&lt;/code&gt; and moving individual NICs into the containers network namespace has the &lt;strong&gt;advantage&lt;/strong&gt; that the container can operate on the real NICs. I&amp;rsquo;d expect less performance and functional issues as we operate on the real physical NIC.
The &lt;strong&gt;drawback&lt;/strong&gt; however is that with &lt;code&gt;--net=host&lt;/code&gt; we break the hosts connectivity and interfere with other containers.
The drawback of moving individual NICs is, that it&amp;rsquo;s sometimes not easy to decide in an automated way, what NICs to move into a container.
I.e. think of the &lt;code&gt;LABEL install …&lt;/code&gt; convention to install containers using the &lt;code&gt;atomic&lt;/code&gt; command, which would move the NICs between namespaces, would need to decide which NICs to move.&lt;/p&gt;

&lt;p&gt;We see there are - as often - many ways to achieve something, but it needs to eb carefully considered what approach suits the individual usecase.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>docker</tag><tag>network</tag><tag>macvlan</tag><tag>veth</tag><tag>bridge</tag><tag>bond</tag><tag>atomic</tag><tag>container</tag></post><post id="118274685190" url="https://dummdida.tumblr.com/post/118274685190" url-with-slug="https://dummdida.tumblr.com/post/118274685190/11-mapping-of-host-side-nics-into-a-container" type="regular" date-gmt="2015-05-06 11:10:40 GMT" date="Wed, 06 May 2015 13:10:40" unix-timestamp="1430910640" format="markdown" reblog-key="3NYBiKTM" slug="11-mapping-of-host-side-nics-into-a-container" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>1:1 mapping of host side NICs into a container</regular-title><regular-body>&lt;p&gt;You might want - i.e for testing purpose - map all your host sided NICs into your container.&lt;/p&gt;

&lt;p&gt;There are several ways to do this, one way is to use macvlans.&lt;/p&gt;

&lt;p&gt;This small script &lt;a href="https://github.com/fabiand/dockerfiles/blob/master/map-nics.sh"&gt;map-nics.sh&lt;/a&gt; can be used to map all host sided NIcs matching a glob expression into a given container.&lt;/p&gt;

&lt;p&gt;This simply works by creating a &lt;a href="http://www.pocketnix.org/posts/Linux%20Networking:%20MAC%20VLANs%20and%20Virtual%20Ethernets"&gt;macvlan device&lt;/a&gt; on the host side and then move it into the network namespace of the container.&lt;/p&gt;</regular-body><tag>docker</tag><tag>macvlan</tag><tag>fedora</tag><tag>container</tag></post><post id="118271155280" url="https://dummdida.tumblr.com/post/118271155280" url-with-slug="https://dummdida.tumblr.com/post/118271155280/hallo-systemd-by-fabian-deutsch" type="link" date-gmt="2015-05-06 09:13:32 GMT" date="Wed, 06 May 2015 11:13:32" unix-timestamp="1430903612" format="markdown" reblog-key="0FDAdir3" slug="hallo-systemd-by-fabian-deutsch" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Hallo, systemd. by Fabian Deutsch</link-text><link-url>https://slides.com/fabiand/hallo-systemd-2015/</link-url><tag>systemd</tag></post><post id="118114772060" url="https://dummdida.tumblr.com/post/118114772060" url-with-slug="https://dummdida.tumblr.com/post/118114772060/doing-stuff-on-the-host-from-within-a-container" type="regular" date-gmt="2015-05-04 14:01:13 GMT" date="Mon, 04 May 2015 16:01:13" unix-timestamp="1430748073" format="markdown" reblog-key="0RA3I8jF" slug="doing-stuff-on-the-host-from-within-a-container" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Doing stuff on the host from within a container?</regular-title><regular-body>&lt;p&gt;When you&amp;rsquo;ve got a super privileged container (SPC) and the hosts&amp;rsquo;s filesystem mounted into the container, then you can easily interact with the host by &lt;code&gt;chroot&lt;/code&gt;-ing into &lt;code&gt;/host&lt;/code&gt; within the container.&lt;/p&gt;

&lt;p&gt;This has to be proven.&lt;/p&gt;</regular-body><tag>docker</tag><tag>atomic</tag><tag>container</tag></post><post id="118113332965" url="https://dummdida.tumblr.com/post/118113332965" url-with-slug="https://dummdida.tumblr.com/post/118113332965/kdump-on-the-host" type="regular" date-gmt="2015-05-04 13:34:36 GMT" date="Mon, 04 May 2015 15:34:36" unix-timestamp="1430746476" format="markdown" reblog-key="eRGLtLh7" slug="kdump-on-the-host" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>kdump? On the host.</regular-title><regular-body>&lt;p&gt;&lt;code&gt;kdump&lt;/code&gt; is one of those technologies which are a bit tricky in the container world. Well, what does tricky mean, it wsa tricky to mean how all the involved components interact.
After all it turns out to be simple: kdump is on the host (atomic) and can be triggered by privileged containers. That&amp;rsquo;s it.&lt;/p&gt;</regular-body><tag>kdump</tag><tag>atomic</tag><tag>container</tag><tag>docker</tag></post><post id="118112381480" url="https://dummdida.tumblr.com/post/118112381480" url-with-slug="https://dummdida.tumblr.com/post/118112381480/where-is-lsif" type="regular" date-gmt="2015-05-04 13:16:02 GMT" date="Mon, 04 May 2015 15:16:02" unix-timestamp="1430745362" format="markdown" reblog-key="omjYH8zo" slug="where-is-lsif" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Where is lsif?</regular-title><regular-body>&lt;blockquote&gt;
  &lt;p&gt;Dear Lazyweb,&lt;/p&gt;
  
  &lt;p&gt;I hope you are well.&lt;/p&gt;
  
  &lt;p&gt;You probably know &lt;code&gt;lsblk&lt;/code&gt; which outputs nifty trees
  for your storage topology, showing on which device i.e.
  an LVM member resides.&lt;/p&gt;
  
  &lt;p&gt;Now, do you know of a similar tool for network devices?
  A tool which will show you the topology of your network devices
  including members and slaves of bonds and bridges, maybe even
  veths and vlans.
  So &lt;code&gt;lsblk&lt;/code&gt; for network interfaces, &lt;code&gt;lsif&lt;/code&gt; or &lt;code&gt;lsip&lt;/code&gt;?&lt;/p&gt;
  
  &lt;p&gt;Sincerely yours&lt;/p&gt;
&lt;/blockquote&gt;</regular-body><tag>lazyweb</tag><tag>fedora</tag><tag>lsblk</tag></post><post id="117606394785" url="https://dummdida.tumblr.com/post/117606394785" url-with-slug="https://dummdida.tumblr.com/post/117606394785/close-to-bare-metal-in-containers-and-about-spc" type="regular" date-gmt="2015-04-28 14:57:42 GMT" date="Tue, 28 Apr 2015 16:57:42" unix-timestamp="1430233062" format="markdown" reblog-key="1VMWiR59" slug="close-to-bare-metal-in-containers-and-about-spc" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Close to bare metal in containers, and about SPC</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/ben_salter/447467316" title="Cardiff Docks by Ben Salter, on Flickr"&gt;&lt;img src="https://farm1.staticflickr.com/248/447467316_fa9ffdc736_m.jpg" width="240" height="180" alt="Cardiff Docks"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, when you mess with LVM, iSCSI and friends, you need device access.
This is actually not one of the things you will get when you start with containers. Actually, containers are hiding those &amp;lsquo;details&amp;rsquo; by default.&lt;/p&gt;

&lt;p&gt;But if you need this access, you can get it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Privileged containers&lt;/em&gt; seem to be containers which are started (in the dockerland) with &lt;code&gt;run --privileged&lt;/code&gt;, docker will then not drop privileges. To give that container even more powers, you can specify what capabilities the process should get. &lt;code&gt;run --privileged --cap-add=ALL&lt;/code&gt; will then give you a fully privilged container with all powers, a so called &lt;em&gt;super privileged container&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That container is now capable of launching all sorts of software which interacts with the kernel in several ways, i.e. &lt;a href="http://dummdida.tumblr.com/post/117170605905/systemd-in-a-docker-container"&gt;launching systemd&lt;/a&gt; requires some privileges to work correctly.&lt;/p&gt;

&lt;p&gt;But in this case you still do not get access to the host devices.
You know, those files in &lt;code&gt;/dev/&lt;/code&gt;.
To get access to the host devices, you can eitehr specify them one by one when launching the container, using &lt;code&gt;run --device=/dev/sda&lt;/code&gt;. This has some limitations, like: The device needs to be available when you launch the container.
The second method is to pass all of &lt;code&gt;/dev/&lt;/code&gt; to the container using: &lt;code&gt;run -v /dev:/dev&lt;/code&gt;. Passing &lt;code&gt;/dev/&lt;/code&gt; to an SPC container should give you close to what you have when you run software on bare-metal.&lt;/p&gt;

&lt;p&gt;Some things I still need to play with are &lt;code&gt;--pid=host&lt;/code&gt;, &lt;code&gt;--ipc=host&lt;/code&gt;, and - some more ideas around - &lt;code&gt;--net=host&lt;/code&gt;.&lt;/p&gt;</regular-body><tag>docker</tag><tag>spc</tag><tag>lvm</tag><tag>iscsi</tag><tag>dev</tag><tag>devices</tag><tag>container</tag></post><post id="117601340070" url="https://dummdida.tumblr.com/post/117601340070" url-with-slug="https://dummdida.tumblr.com/post/117601340070/dev-should-be-shared-between-the-container-and" type="quote" date-gmt="2015-04-28 13:21:29 GMT" date="Tue, 28 Apr 2015 15:21:29" unix-timestamp="1430227289" format="markdown" reblog-key="w2QqFbYg" slug="dev-should-be-shared-between-the-container-and" state="published" is_reblog="false" tumblelog="dummdida"><quote-text>/dev should be shared between the container and the host by using -v /dev:/dev</quote-text><tag>docker</tag><tag>container</tag></post><post id="117170605905" url="https://dummdida.tumblr.com/post/117170605905" url-with-slug="https://dummdida.tumblr.com/post/117170605905/systemd-in-a-docker-container" type="regular" date-gmt="2015-04-23 14:28:28 GMT" date="Thu, 23 Apr 2015 16:28:28" unix-timestamp="1429799308" format="markdown" reblog-key="W2aqxzfh" slug="systemd-in-a-docker-container" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>systemd in a docker container</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/bevgoodwin/10904066976" title="Albert Dock by Beverley Goodwin, on Flickr"&gt;&lt;img src="https://farm6.staticflickr.com/5532/10904066976_3e16c0645a_n.jpg" width="320" height="229" alt="Albert Dock"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, that has been already done by &lt;a href="https://rhatdan.wordpress.com/2014/04/30/running-systemd-within-a-docker-container/"&gt;Dan&lt;/a&gt;, but I wanted a more stable approach, so basically changing as few stuff as necessary.&lt;/p&gt;

&lt;p&gt;The corner points are now:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Add &lt;code&gt;--cap-add=CAP_SYS_ADMIN&lt;/code&gt; (tho I am using &lt;code&gt;=ALL&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;–v /sys/fs/cgroup:/sys/fs/cgroup:ro&lt;/code&gt; (or use a privileged container)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;That&amp;rsquo;s it so far.&lt;/p&gt;</regular-body><tag>docker</tag><tag>systemd</tag><tag>container</tag></post><post id="117157045170" url="https://dummdida.tumblr.com/post/117157045170" url-with-slug="https://dummdida.tumblr.com/post/117157045170/modprobe-in-a-docker-container" type="regular" date-gmt="2015-04-23 08:49:16 GMT" date="Thu, 23 Apr 2015 10:49:16" unix-timestamp="1429778956" format="markdown" reblog-key="DkBDRvBQ" slug="modprobe-in-a-docker-container" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>modprobe in a docker container</regular-title><regular-body>&lt;p&gt;… it is actually prossible.&lt;/p&gt;

&lt;p&gt;You just need to make sure to:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Run the container in privileged mode (&lt;code&gt;--privileged&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Add all capabilities (&lt;code&gt;--cap-add=ALL&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Passthrough /lib/modules into the container (&lt;code&gt;-v /lib/modules:/lib/modules&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You will end up with a commandline like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --name lvm --rm --privileged --cap-add=ALL -it -v /dev:/dev -v /lib/modules:/lib/modules docker.io/fabiand/centos7-lvm
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Loading a kernel module inside the container make it available on the host, and thus also on all other containers running on that host.&lt;/p&gt;
&lt;/blockquote&gt;</regular-body><tag>docker</tag><tag>modprobe</tag><tag>container</tag></post><post id="116977249670" url="https://dummdida.tumblr.com/post/116977249670" url-with-slug="https://dummdida.tumblr.com/post/116977249670/servo-blog" type="link" date-gmt="2015-04-21 05:08:31 GMT" date="Tue, 21 Apr 2015 07:08:31" unix-timestamp="1429592911" format="markdown" reblog-key="t7NTB1XQ" slug="servo-blog" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Servo Blog</link-text><link-url>http://blog.servo.org/</link-url><tag>rust-lang</tag><tag>servo</tag></post><post id="116977228300" url="https://dummdida.tumblr.com/post/116977228300" url-with-slug="https://dummdida.tumblr.com/post/116977228300/this-week-in-rust" type="link" date-gmt="2015-04-21 05:08:11 GMT" date="Tue, 21 Apr 2015 07:08:11" unix-timestamp="1429592891" format="markdown" reblog-key="K6M1HpLJ" slug="this-week-in-rust" state="published" is_reblog="false" tumblelog="dummdida"><link-text>This Week in Rust</link-text><link-url>http://this-week-in-rust.org/</link-url><tag>rust-lang</tag><tag>rust</tag></post><post id="114141736445" url="https://dummdida.tumblr.com/post/114141736445" url-with-slug="https://dummdida.tumblr.com/post/114141736445/cockpit-on-centos-7" type="regular" date-gmt="2015-03-20 17:15:08 GMT" date="Fri, 20 Mar 2015 18:15:08" unix-timestamp="1426871708" format="markdown" reblog-key="Hcjsdpfa" slug="cockpit-on-centos-7" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Cockpit on CentOS 7</regular-title><regular-body>&lt;p&gt;Quick notes: You need EPEL 7 and you need the preview repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install -y &lt;a href="https://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm"&gt;https://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm&lt;/a&gt;
yum-config-manager --add-repo=https://copr.fedoraproject.org/coprs/sgallagh/cockpit-preview/repo/epel-7/sgallagh-cockpit-preview-epel-7.repo

yum install --nogpgcheck -y cockpit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you are good.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>cockpit</tag><tag>centos</tag></post><post id="114039260970" url="https://dummdida.tumblr.com/post/114039260970" url-with-slug="https://dummdida.tumblr.com/post/114039260970/updates-on-the-ovirt-appliances-installation-of" type="regular" date-gmt="2015-03-19 11:52:31 GMT" date="Thu, 19 Mar 2015 12:52:31" unix-timestamp="1426765951" format="markdown" reblog-key="z0n3grnU" slug="updates-on-the-ovirt-appliances-installation-of" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Updates on the oVirt Appliances (installation of engine and node)</regular-title><regular-body>&lt;p&gt;Lately I&amp;rsquo;ve updated the oVirt Engine appliance image to be based on CentOS 7,
to get away from breakage which came from the fast moving forward Fedora (previously
the appliance was based on Fedora).
Besides of that I&amp;rsquo;ve simplified the kickstart and Tolik added support for cloud-init,
which will hopefully help to pave the way for a better integration into hosted-engine.&lt;/p&gt;

&lt;p&gt;Another thing I&amp;rsquo;ve been working was to simplify the installation of the appliance
in use cases outside of hosted-engine.
Why? Because the Engine appliance image is a good way to start testing and using Engine.
It is an installed OS (CentOS 7) with all the necessary repos set up, and engine installed.
Ready to run &lt;code&gt;engine-setup --offline --config-append=ovirt-engine-answers&lt;/code&gt; to get engine set up.&lt;/p&gt;

&lt;p&gt;So why not simplify the consumption of this nice image for everybody?&lt;/p&gt;

&lt;p&gt;&lt;a href="http://jenkins.ovirt.org/job/fabiand_boo_build_testing/"&gt;This small job&lt;/a&gt; builds an &lt;a href="http://jenkins.ovirt.org/job/fabiand_boo_build_testing/lastSuccessfulBuild/artifact/ovirt-ipxe.iso"&gt;ISO&lt;/a&gt; with a boot menu, which can be used to install
the &lt;a href="http://jenkins.ovirt.org/job/ovirt-appliance_engine-3.5_master_merged/"&gt;Engine appliance&lt;/a&gt; directly into a VM or onto a real host.
During the installation you can set a root password which you can then use after
installation to log in.
Please note that all the relevant files (installer + os image) are pulled from Jenkins,
so the time to install heavily depends on your internet connection.
For me it takes ~20min to get from a fresh VM until Engine is running.&lt;/p&gt;

&lt;p&gt;When you run the ISO you might also see the option to install Node.
It&amp;rsquo;s not the classical Node, it&amp;rsquo;s rather a &lt;a href="http://jenkins.ovirt.org/job/ovirt-appliance_node-3.5_master_merged/"&gt;Node appliance&lt;/a&gt;, based on CentOS 7,
containing vdsm, glusterfs and cockpit (all from the upstream sources with the latest bits).
The appliance was simple to create is mainly a way to get the latest upstream bit&amp;rsquo;s in a
clean environment, to test our Node team cockpit move.
For me it took also roughly ~20min to get this appliance up and running.
You can mirror/cache the images locally if you want to speed up this process.&lt;/p&gt;

&lt;p&gt;Theoretically that appliance can be used as a host for Engine, but in my initial trials
I failed to attach the node to Engine. But we can probably fix that in future.&lt;/p&gt;

&lt;p&gt;This is more research and work in progress. But I am surely interested to make this mature in future.
One important step is to get the anaconda installer images from CentOS 7.1.
The CentOS 7.0 installer images are &lt;a href="http://bugs.centos.org/view.php?id=8239"&gt;very outdated&lt;/a&gt; and I can not use them. Temporarily I&amp;rsquo;m using
the Fedora anaconda images, but that &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1145130"&gt;has other drawbacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a last note I can tell that at least the node appliance has some testing (installation), but
should gain more.&lt;/p&gt;

&lt;p&gt;So take all of this with care, but feel free to experiment with the boot iso and roll
out your own Engine instances.
Help to fix the node appliance and feedback in general is welcome.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>appliance</tag><tag>node</tag><tag>engine</tag><tag>anaconda</tag><tag>fedora</tag><tag>centos</tag></post><post id="113959092885" url="https://dummdida.tumblr.com/post/113959092885" url-with-slug="https://dummdida.tumblr.com/post/113959092885/cebit-2015-retrospective" type="regular" date-gmt="2015-03-18 14:19:04 GMT" date="Wed, 18 Mar 2015 15:19:04" unix-timestamp="1426688344" format="markdown" reblog-key="yjqTSTiO" slug="cebit-2015-retrospective" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>CeBIT 2015 retrospective</regular-title><regular-body>&lt;p&gt;On Monday I visited this years CeBIT. The first time after three or so years.&lt;/p&gt;

&lt;p&gt;As usual most of the big vendors were represented.
Over at the IBM booth I looked if could find oVirt on Power8, but the only thing they were demonstrating were RHEL 7 (and some other distors) on Power8.&lt;/p&gt;

&lt;p&gt;The open source party was quite small. Just a few booths, far fewer than a few years ago.
But there were and are some quite interesting talks at the Open Source Forum - including a couple of talks from Jon &amp;lsquo;maddog&amp;rsquo; Hall, Klaus Knopper and a few others - look at the schedule &lt;a href="http://www.cebit.de/veranstaltung/open-source-forum/FOR/61524"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the end of the day - and 45minutes delayed - I had a short session (&lt;a href="https://fedorapeople.org/~fabiand/slides/2015-03-CeBIT-IntroductionToOVirt.pdf"&gt;slides&lt;/a&gt;) about oVirt.
The audience was small, but they seemed to be interested in oVirt and a couple of them seemed to get back to it.&lt;/p&gt;

&lt;p&gt;A real highlight? No, sorry, I did not see any.
For oVirt it was good to show up at an exhibition like this. You are visible to an audience which is normally not present at the f/loss conferences we usually have.&lt;/p&gt;

&lt;p&gt;And about the future of Open Source at CeBIT? I am not sure. To me it looks like the global vision on what Open Source want&amp;rsquo;s to represent at CeBIT is somewhat missing.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>cebit2015</tag><tag>docker</tag><tag>cockpit</tag></post><post id="113498059525" url="https://dummdida.tumblr.com/post/113498059525" url-with-slug="https://dummdida.tumblr.com/post/113498059525/at-last-sir-terry-we-must-walk-together" type="quote" date-gmt="2015-03-13 07:48:22 GMT" date="Fri, 13 Mar 2015 08:48:22" unix-timestamp="1426232902" format="markdown" reblog-key="bn2QFHZr" slug="at-last-sir-terry-we-must-walk-together" state="published" is_reblog="false" tumblelog="dummdida"><quote-text>AT LAST, SIR TERRY, WE MUST WALK TOGETHER.</quote-text><quote-source>&lt;p&gt;Terry took Death’s arm and followed him through the doors and on to the black desert under the endless night.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.heise.de/newsticker/meldung/The-End-Terry-Pratchett-ist-tot-2574017.html"&gt;Source&lt;/a&gt;&lt;/p&gt;</quote-source><tag>discworld</tag></post><post id="113338480655" url="https://dummdida.tumblr.com/post/113338480655" url-with-slug="https://dummdida.tumblr.com/post/113338480655/poc-of-how-simple-a-rootfs-image-can-be-pulled" type="video" date-gmt="2015-03-11 13:12:08 GMT" date="Wed, 11 Mar 2015 14:12:08" unix-timestamp="1426079528" format="markdown" reblog-key="1tDwuwjX" slug="poc-of-how-simple-a-rootfs-image-can-be-pulled" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://vimeo.com/121886601</video-source><video-caption>&lt;p&gt;POC of how simple a rootfs image can be pulled into ram and be used for booting. A candidate for oVirt Node stateless mode.&lt;/p&gt;

&lt;p&gt;In this example &lt;a href="http://jenkins.ovirt.org/job/fabiand_boo_build_testing/"&gt;iPXE&lt;/a&gt; is used to boot an image, containing the latest vdsm, cockpit and glusterfs bits, directly off &lt;a href="http://www.jenkins.ovirt.org"&gt;Jenkins&lt;/a&gt;. The image being pulled is &lt;a href="http://jenkins.ovirt.org/job/fabiand_ovirt-node-tng_image_build_daily_testing/"&gt;build on a nightly&lt;/a&gt; basis and - the best thing - &lt;a href="http://jenkins.ovirt.org/job/fabiand_ovirt-node-tng_image_install_testing/"&gt;sanity tested&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The intention of the image to make it the platform for testing the Next-Gen Node bits.&lt;/p&gt;

&lt;p&gt;Currently the vdsm contained in this image is not working properly (at least the last time I tested), because the image is based on Fedora 21, and vdsm has issues with that Fedora version.
The plan is - and that is already prepared - to base the imae on CentOS 7 (CentOS seems to be quite popular among oVirt users). But that is currently blocked by a &lt;a href="http://bugs.centos.org/view.php?id=8239"&gt;bug&lt;/a&gt;, which prevents building our images.&lt;/p&gt;</video-caption><video-player>&lt;iframe src="https://player.vimeo.com/video/121886601?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="400" height="268" frameborder="0" title="Booting into RAM - of an http server" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe src="https://player.vimeo.com/video/121886601?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="500" height="335" frameborder="0" title="Booting into RAM - of an http server" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe src="https://player.vimeo.com/video/121886601?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="250" height="168" frameborder="0" title="Booting into RAM - of an http server" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player><tag>ovirt</tag><tag>node</tag><tag>stateless</tag><tag>dracut</tag></post><post id="112893789355" url="https://dummdida.tumblr.com/post/112893789355" url-with-slug="https://dummdida.tumblr.com/post/112893789355/what-a-week-to-get-ovirt-node-36-on-track-we" type="regular" date-gmt="2015-03-06 18:21:57 GMT" date="Fri, 06 Mar 2015 19:21:57" unix-timestamp="1425666117" format="html" reblog-key="NujlHT2v" slug="what-a-week-to-get-ovirt-node-36-on-track-we" state="published" is_reblog="false" tumblelog="dummdida"><regular-body>&lt;p&gt;What a week.&lt;/p&gt;&lt;p&gt;To get oVirt Node 3.6 on track we need to rework the basics of Node. We’ll keep much of the grown knowledge (What is needed to configure CIM, SNMP, KDUMP?), but make them easier to reuse. At first, to allow a smooth migration to other packages once the knowledge is upstreamed.&lt;/p&gt;&lt;p&gt;In the last week Douglas paved the way to reuse the existing logic, by &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1191419"&gt;moving all of the logic into a ovirt-node subpackage&lt;/a&gt;. This was crucial, because installing ovirt-node will wreck a normal system.&lt;/p&gt;&lt;figure&gt;&lt;img src="https://66.media.tumblr.com/c77cb65213f25f9ae25dc750441752c6/tumblr_inline_nksz579dUt1s0jj7d.png"/&gt;&lt;/figure&gt;&lt;p&gt;Based on that work Ryan create a &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1191962"&gt;dbus wrapper around our configuration classes&lt;/a&gt;, which export the relevant functions via dbus. With all the known introspection magic.&lt;/p&gt;

&lt;figure&gt;&lt;img src="https://66.media.tumblr.com/21dc45194c64003046092db4b1528de3/tumblr_inline_nksz3wXDvi1s0jj7d.png"/&gt;&lt;/figure&gt;&lt;p&gt;Two big steps for oVirt Node 3.6, paving the &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1190758"&gt;move to Cockpit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the next steps will be to get Cockpit to consume this DBus API.&lt;/p&gt;

&lt;p&gt;What a week.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag></post><post id="112633655110" url="https://dummdida.tumblr.com/post/112633655110" url-with-slug="https://dummdida.tumblr.com/post/112633655110/servo-blog" type="link" date-gmt="2015-03-03 21:33:15 GMT" date="Tue, 03 Mar 2015 22:33:15" unix-timestamp="1425418395" format="markdown" reblog-key="DL3z1JRg" slug="servo-blog" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Servo Blog</link-text><link-url>http://blog.servo.org/</link-url><tag>rust</tag><tag>mozilla</tag><tag>firefox</tag><tag>os</tag></post><post id="111851478485" url="https://dummdida.tumblr.com/post/111851478485" url-with-slug="https://dummdida.tumblr.com/post/111851478485/node-goes-anaconda" type="regular" date-gmt="2015-02-23 10:38:00 GMT" date="Mon, 23 Feb 2015 11:38:00" unix-timestamp="1424687880" format="markdown" reblog-key="aKwrgKKb" slug="node-goes-anaconda" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Node goes anaconda</regular-title><regular-body>&lt;p&gt;After writing about &lt;a href="http://www.ovirt.org/Node"&gt;oVirt Node&lt;/a&gt; &lt;a href="http://dummdida.tumblr.com/post/111458709540/adding-a-cockpit-to-node"&gt;using cockpit for administration&lt;/a&gt;, there is more news.&lt;/p&gt;

&lt;p&gt;The setup TUI we deprecated in favor of &lt;a href="http://cockpit-project.org"&gt;cockpit&lt;/a&gt; was only one part of our custom TUI code.&lt;/p&gt;

&lt;p&gt;The installer is the second component in Node using or own handcrafted TUI. But, even more problematic is, that we also maintain our own installer.&lt;/p&gt;

&lt;p&gt;That can not be to hard, can it? Well, think of multipath, efi, secure boot, and an iSCSI root, and for sure all possible combinations of those items, then you get an idea how much fun and actually real work it can be to maintain a custom installer.&lt;/p&gt;

&lt;p&gt;Long story short, after some investigations of how we can improve our own owninstaller by leveraging more of other installers, we came to the conclusion that it makes more sense to settle with an existing installer, rather than trying to keep and maintain our own.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://avatars0.githubusercontent.com/u/10549274?v=3&amp;amp;s=200" alt="Anaconda"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rhinstaller/anaconda"&gt;anaconda&lt;/a&gt; is Fedora&amp;rsquo;s, as well as CentOS&amp;rsquo;s and RHEL&amp;rsquo;s installer, and it has everything we need, so at &lt;a href="http://lists.ovirt.org/pipermail/devel/2015-February/009899.html"&gt;last weeks team meeting&lt;/a&gt; we also decide to settle with anaconda as our default installer.&lt;/p&gt;

&lt;p&gt;EFI, Secure Boot, multipath, iSCSI all of this is already supported by anaconda. But Node is image based (and we want to stick with &lt;em&gt;that&lt;/em&gt;), how can you use anaconda? Anaconda is typically used with packages, but it can also install &amp;lsquo;live-images&amp;rsquo; (squashfs or even real disk images), and also ostrees.&lt;/p&gt;

&lt;p&gt;Over all it is quite obvious that Node is aligning much more with upstream projects than before.
This will also lead to shift in how the Node team works, initially we&amp;rsquo;ll be working hard to upstream our requests, to make sure that everything is in place to be able to ship a Node which can serve as the stable ground for oVirt.&lt;/p&gt;

&lt;p&gt;In additiona we take care to leverage cockpit&amp;rsquo;s and anaconda&amp;rsquo;s &amp;ldquo;extension points&amp;rdquo; to add some Node specific bits.&lt;/p&gt;

&lt;p&gt;We need to &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1190758"&gt;add cockpit plugins&lt;/a&gt; to deliver the functionality we already offer today.&lt;/p&gt;

&lt;p&gt;We want to &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1195177"&gt;add an anaconda plugin&lt;/a&gt; to support Engine registration during the installation.&lt;/p&gt;

&lt;p&gt;So there is some stuff on the horizon, and it is already close enough to see the contures.&lt;/p&gt;</regular-body><tag>anaconda</tag><tag>ovirt</tag><tag>node</tag><tag>fedora</tag><tag>centos</tag><tag>rhel</tag><tag>cockpit</tag><tag>plugin</tag></post><post id="111458709540" url="https://dummdida.tumblr.com/post/111458709540" url-with-slug="https://dummdida.tumblr.com/post/111458709540/adding-a-cockpit-to-node" type="regular" date-gmt="2015-02-19 10:27:00 GMT" date="Thu, 19 Feb 2015 11:27:00" unix-timestamp="1424341620" format="markdown" reblog-key="zkkPIMmq" slug="adding-a-cockpit-to-node" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Adding a cockpit to Node</regular-title><regular-body>&lt;p&gt;For several years now the administrative interface of &lt;a href="http://www.ovirt.org/Node"&gt;oVirt Node&lt;/a&gt; is a TUI - a textual user interface - displayed on the console of the host, the so called &lt;em&gt;setup TUI&lt;/em&gt;.
It does a pretty good job, but it is custom, and duplicates much code which is available in other projects.
Besides that a lot of our bugs are related to the TUI and small stuff like getting the tab-order correctly is hard to solve.&lt;/p&gt;

&lt;p&gt;For &lt;a href="http://www.ovirt.org"&gt;oVirt&lt;/a&gt; 3.6 (or so) we plan to do some heavy refactoring of oVirt Node, to be able to keep up with the pace of oVirt&amp;rsquo;s overall development, as well as beeing able to keep up with the pace of the platform (Feodra, CentOS) development!&lt;/p&gt;

&lt;p&gt;This refatoring includes looking around if other community supported projects exist, which provide parts of the functionality we have in  Node.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://cockpit-project.org/"&gt;cockpit project&lt;/a&gt; is one those (young) projects which provide a tool which has a big overlap with one of our tools, to be precise: It is also a tool perform administrative tasks on a host.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://cockpit-project.org/images/screenshot-storage.png" alt="A cockpit page"/&gt;&lt;/p&gt;

&lt;p&gt;As the Node team had some time between FOSDEM'15 and devconf.cz, we sat down and discussed if cockpit is viable way to go.
After some discussion we finally &lt;a href="http://lists.ovirt.org/pipermail/devel/2015-February/009899.html"&gt;agreed in one of our last meetings&lt;/a&gt; to migrate to cockpit, and add plugins for the functionality which is currently desired by us, but missing from cockpit.&lt;/p&gt;

&lt;p&gt;We are now heavily looking into what the best approach is to migrate our stuff. But it is going to be a fun ride, with a (hopefully) happy end.&lt;/p&gt;

&lt;p&gt;If you want to see where this is going, follow our &lt;a href="http://www.ovirt.org/Features/Node/Cockpit"&gt;feature page&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>cockpit</tag><tag>tui</tag><tag>snack</tag><tag>newt</tag><tag>urwid</tag></post><post id="111447559250" url="https://dummdida.tumblr.com/post/111447559250" url-with-slug="https://dummdida.tumblr.com/post/111447559250/ever-wondered-how-much-disk-space-an-ovirt" type="photo" date-gmt="2015-02-19 06:09:00 GMT" date="Thu, 19 Feb 2015 07:09:00" unix-timestamp="1424326140" format="markdown" reblog-key="patl0IRh" slug="ever-wondered-how-much-disk-space-an-ovirt" state="published" is_reblog="false" tumblelog="dummdida" width="1920" height="987"><photo-caption>&lt;p&gt;Ever wondered how much disk space an oVirt Appliance build takes? About 11GB.&lt;/p&gt;

&lt;p&gt;The build includes the original qcow2, the ova and a squashfs image.&lt;/p&gt;

&lt;p&gt;The size requirements of the qcow2 and squashfs image are quite predictive, but I am not sure what is happening when the ova is build.&lt;/p&gt;</photo-caption><photo-url max-width="1280">https://66.media.tumblr.com/131ca9920283152e9f9f8ba1256dcd40/tumblr_nk0942kOsv1st6sz0o1_1280.png</photo-url><photo-url max-width="500">https://66.media.tumblr.com/131ca9920283152e9f9f8ba1256dcd40/tumblr_nk0942kOsv1st6sz0o1_500.png</photo-url><photo-url max-width="400">https://66.media.tumblr.com/131ca9920283152e9f9f8ba1256dcd40/tumblr_nk0942kOsv1st6sz0o1_400.png</photo-url><photo-url max-width="250">https://66.media.tumblr.com/131ca9920283152e9f9f8ba1256dcd40/tumblr_nk0942kOsv1st6sz0o1_250.png</photo-url><photo-url max-width="100">https://66.media.tumblr.com/131ca9920283152e9f9f8ba1256dcd40/tumblr_nk0942kOsv1st6sz0o1_100.png</photo-url><photo-url max-width="75">https://66.media.tumblr.com/131ca9920283152e9f9f8ba1256dcd40/tumblr_nk0942kOsv1st6sz0o1_75sq.png</photo-url><tag>ovirt</tag><tag>engine</tag><tag>appliance</tag><tag>imgfac</tag></post><post id="110803538110" url="https://dummdida.tumblr.com/post/110803538110" url-with-slug="https://dummdida.tumblr.com/post/110803538110/technovelty-running-cloud-images-locally" type="link" date-gmt="2015-02-12 11:44:47 GMT" date="Thu, 12 Feb 2015 12:44:47" unix-timestamp="1423741487" format="markdown" reblog-key="eGYEc5sc" slug="technovelty-running-cloud-images-locally" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Technovelty - Running cloud images locally</link-text><link-url>https://www.technovelty.org//linux/running-cloud-images-locally.html</link-url><tag>fedora</tag><tag>cloud</tag><tag>cloud-init</tag><tag>configure</tag></post><post id="110732416740" url="https://dummdida.tumblr.com/post/110732416740" url-with-slug="https://dummdida.tumblr.com/post/110732416740/jasonbrooksbyo-atomic" type="link" date-gmt="2015-02-11 17:16:58 GMT" date="Wed, 11 Feb 2015 18:16:58" unix-timestamp="1423675018" format="markdown" reblog-key="D6NBdrwG" slug="jasonbrooksbyo-atomic" state="published" is_reblog="false" tumblelog="dummdida"><link-text>jasonbrooks/byo-atomic</link-text><link-url>https://github.com/jasonbrooks/byo-atomic/</link-url><link-description>&lt;blockquote class="link_og_blockquote"&gt;Contribute to byo-atomic development by creating an account on GitHub.&lt;/blockquote&gt;</link-description><tag>atomic</tag><tag>fedora</tag><tag>node</tag><tag>image</tag><tag>build</tag></post><post id="108962333800" url="https://dummdida.tumblr.com/post/108962333800" url-with-slug="https://dummdida.tumblr.com/post/108962333800/sending-rfb-via-a-theora-stream-also-works-you" type="photo" date-gmt="2015-01-24 01:26:00 GMT" date="Sat, 24 Jan 2015 02:26:00" unix-timestamp="1422062760" format="markdown" reblog-key="kqWtAulO" slug="sending-rfb-via-a-theora-stream-also-works-you" state="published" is_reblog="false" tumblelog="dummdida" width="749" height="529"><photo-caption>&lt;p&gt;Sending RFB via a theora stream also works, you just need to set some filters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gst-launch -q \
  rfbsrc view-only=true incremental=false ! \
  decodebin ! colorspace ! videoscale ! videorate ! \
  video/x-raw-yuv,width=640,height=480,framerate=10/1 ! \
  queue ! \
  theoraenc ! oggmux ! tcpserversink
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And open &lt;a href="http://127.0.0.1:4953"&gt;http://127.0.0.1:4953&lt;/a&gt;&lt;/p&gt;</photo-caption><photo-url max-width="1280">https://66.media.tumblr.com/2d63e3e50498d71841ebcff1474a7309/tumblr_ninqodm36s1st6sz0o1_1280.png</photo-url><photo-url max-width="500">https://66.media.tumblr.com/2d63e3e50498d71841ebcff1474a7309/tumblr_ninqodm36s1st6sz0o1_500.png</photo-url><photo-url max-width="400">https://66.media.tumblr.com/2d63e3e50498d71841ebcff1474a7309/tumblr_ninqodm36s1st6sz0o1_400.png</photo-url><photo-url max-width="250">https://66.media.tumblr.com/2d63e3e50498d71841ebcff1474a7309/tumblr_ninqodm36s1st6sz0o1_250.png</photo-url><photo-url max-width="100">https://66.media.tumblr.com/2d63e3e50498d71841ebcff1474a7309/tumblr_ninqodm36s1st6sz0o1_100.png</photo-url><photo-url max-width="75">https://66.media.tumblr.com/2d63e3e50498d71841ebcff1474a7309/tumblr_ninqodm36s1st6sz0o1_75sq.png</photo-url><tag>fedora</tag><tag>ovirt</tag><tag>vnc</tag><tag>rfb</tag><tag>gstreamer</tag><tag>theora</tag><tag>stream</tag></post><post id="108960369115" url="https://dummdida.tumblr.com/post/108960369115" url-with-slug="https://dummdida.tumblr.com/post/108960369115/the-approach-of-the-html5-spice-viewer-is-to-run" type="photo" date-gmt="2015-01-24 00:59:00 GMT" date="Sat, 24 Jan 2015 01:59:00" unix-timestamp="1422061140" format="markdown" reblog-key="fTRf44NE" slug="the-approach-of-the-html5-spice-viewer-is-to-run" state="published" is_reblog="false" tumblelog="dummdida" width="749" height="529"><photo-caption>&lt;p&gt;The approach of the &lt;a href="http://www.spice-space.org/page/Html5"&gt;html5 spice viewer&lt;/a&gt; is to run an &lt;em&gt;emscripted&lt;/em&gt; spice client in the browser. This has the benefit that many spice features (i.e. audio) are available as well.
But it seems that this feature will miss 3.6 - but this is a very nice feature, so what can be done …&lt;/p&gt;

&lt;p&gt;A much more simpler, but more restricted, approach is to make the guest output more suitable for the browser. For example, encode graphics and audio in a browser capable format i.e. webm.
Input can be pipped back to the guest using some websocket protocol.&lt;/p&gt;

&lt;p&gt;It seems that gstreamer can not directly transcode RFB (vnc) to WebM, but at least to mjpeg:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ qemu-kvm -vnc :0 &amp;amp;
$ { \
  # Send teh HTTP header
  echo -e "HTTP/1.0 200 OK\r\nContent-type: multipart/x-mixed-replace; boundary=--boundary\r\n\r\n" ;  \
  # And the seperated images
  gst-launch -q rfbsrc view-only=true incremental=false ! decodebin ! colorspace ! queue ! jpegenc quality=50 ! multipartmux boundary="--boundary" ! fdsink ; \
} | nc -l 4593
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This stream can be viewed with this simple HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;img src="http://127.0.0.1:4593"&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite simple, and the result can be seen at the top of this post.&lt;/p&gt;

&lt;p&gt;Some tear drop: gstreamer&amp;rsquo;s RFB client does not (yet) support to signal size changes correctly, and the stream will end.&lt;/p&gt;

&lt;p&gt;But: If you use the &lt;code&gt;rfbsrc&lt;/code&gt; with &lt;code&gt;autovideosink&lt;/code&gt;, you can at least use it as a simple client, with input support!&lt;/p&gt;</photo-caption><photo-url max-width="1280">https://66.media.tumblr.com/57f5681dcd45162760cd2065f6b70f1f/tumblr_ninpfqaoyI1st6sz0o1_1280.png</photo-url><photo-url max-width="500">https://66.media.tumblr.com/57f5681dcd45162760cd2065f6b70f1f/tumblr_ninpfqaoyI1st6sz0o1_500.png</photo-url><photo-url max-width="400">https://66.media.tumblr.com/57f5681dcd45162760cd2065f6b70f1f/tumblr_ninpfqaoyI1st6sz0o1_400.png</photo-url><photo-url max-width="250">https://66.media.tumblr.com/57f5681dcd45162760cd2065f6b70f1f/tumblr_ninpfqaoyI1st6sz0o1_250.png</photo-url><photo-url max-width="100">https://66.media.tumblr.com/57f5681dcd45162760cd2065f6b70f1f/tumblr_ninpfqaoyI1st6sz0o1_100.png</photo-url><photo-url max-width="75">https://66.media.tumblr.com/57f5681dcd45162760cd2065f6b70f1f/tumblr_ninpfqaoyI1st6sz0o1_75sq.png</photo-url><tag>fedora</tag><tag>ovirt</tag><tag>rfb</tag><tag>vnc</tag><tag>gstreamer</tag><tag>mjpeg</tag><tag>webm</tag><tag>vp8</tag><tag>spice</tag></post><post id="108630763080" url="https://dummdida.tumblr.com/post/108630763080" url-with-slug="https://dummdida.tumblr.com/post/108630763080" type="video" date-gmt="2015-01-20 08:45:23 GMT" date="Tue, 20 Jan 2015 09:45:23" unix-timestamp="1421743523" format="markdown" reblog-key="Kui9rVZH" slug="" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://www.youtube.com/watch?v=Dmho4gcRvQ4</video-source><video-player>&lt;iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/Dmho4gcRvQ4?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe width="500" height="281"  id="youtube_iframe" src="https://www.youtube.com/embed/Dmho4gcRvQ4?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe width="250" height="141"  id="youtube_iframe" src="https://www.youtube.com/embed/Dmho4gcRvQ4?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><tag>daala</tag><tag>mozilla</tag></post><post id="107339197990" url="https://dummdida.tumblr.com/post/107339197990" url-with-slug="https://dummdida.tumblr.com/post/107339197990/the-fedora-magazine-is-celebrating-networkmanager" type="photo" date-gmt="2015-01-06 20:31:30 GMT" date="Tue, 06 Jan 2015 21:31:30" unix-timestamp="1420576290" format="markdown" reblog-key="nFBJkJyd" slug="the-fedora-magazine-is-celebrating-networkmanager" state="published" is_reblog="false" tumblelog="dummdida" width="600" height="362"><photo-caption>&lt;p&gt;The &lt;a href="http://fedoramagazine.org/networkmanager-1-0-released/"&gt;Fedora Magazine is celebrating Networkmanager 1.0&lt;/a&gt; - and they deserve it. They did a pretty good job to pave the way for high-level user-directed network configuration.&lt;/p&gt;</photo-caption><photo-url max-width="1280">https://66.media.tumblr.com/b968278509dffceb38573785a5075194/tumblr_nhrvoizM4j1st6sz0o1_640.png</photo-url><photo-url max-width="500">https://66.media.tumblr.com/b968278509dffceb38573785a5075194/tumblr_nhrvoizM4j1st6sz0o1_500.png</photo-url><photo-url max-width="400">https://66.media.tumblr.com/b968278509dffceb38573785a5075194/tumblr_nhrvoizM4j1st6sz0o1_400.png</photo-url><photo-url max-width="250">https://66.media.tumblr.com/b968278509dffceb38573785a5075194/tumblr_nhrvoizM4j1st6sz0o1_250.png</photo-url><photo-url max-width="100">https://66.media.tumblr.com/b968278509dffceb38573785a5075194/tumblr_nhrvoizM4j1st6sz0o1_100.png</photo-url><photo-url max-width="75">https://66.media.tumblr.com/b968278509dffceb38573785a5075194/tumblr_nhrvoizM4j1st6sz0o1_75sq.png</photo-url><tag>fedora</tag><tag>networkmanager</tag></post><post id="107304020790" url="https://dummdida.tumblr.com/post/107304020790" url-with-slug="https://dummdida.tumblr.com/post/107304020790/multipath-in-libvirt-and-virt-manager" type="regular" date-gmt="2015-01-06 10:25:00 GMT" date="Tue, 06 Jan 2015 11:25:00" unix-timestamp="1420539900" format="markdown" reblog-key="HOYCV7D4" slug="multipath-in-libvirt-and-virt-manager" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Multipath in libvirt and virt-manager</regular-title><regular-body>&lt;p&gt;&lt;img src="https://66.media.tumblr.com/04a93f99f2f9285146fcdb66fcdee8d7/tumblr_inline_nhr3kxun6z1s0jj7d.png" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://dummdida.tumblr.com/post/98799178310/testing-multipath-with-qemu"&gt;Previously&lt;/a&gt; I mentioned that multipath can be tested with plain qemu.
Today I want to mention that it&amp;rsquo;s also possible to test ,ultipath with virt-manager, or &lt;a href="http://www.libvirt.org"&gt;libvirt&lt;/a&gt; in general.&lt;/p&gt;

&lt;p&gt;The basic trick is to point two (virtual) storage devices to the same backing image. And both devices must use the same serial. Caching should also be disabled.&lt;/p&gt;

&lt;p&gt;Summarized:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Multiple storage devices&lt;/li&gt;
&lt;li&gt;Same backing image for all of them&lt;/li&gt;
&lt;li&gt;Same serial for all of them&lt;/li&gt;
&lt;li&gt;No caching for all of them&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
  &lt;p&gt;Note: You need a raw (not qcow2) backing image, otherwise you can run into this &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1178941"&gt;bug&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</regular-body><tag>node</tag><tag>fedora</tag><tag>libvirt</tag><tag>multipath</tag><tag>virt-manager</tag></post><post id="106254113545" url="https://dummdida.tumblr.com/post/106254113545" url-with-slug="https://dummdida.tumblr.com/post/106254113545/this-time-of-the-year-again" type="regular" date-gmt="2014-12-26 20:46:42 GMT" date="Fri, 26 Dec 2014 21:46:42" unix-timestamp="1419626802" format="markdown" reblog-key="T9FlTXaH" slug="this-time-of-the-year-again" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>This time of the year again</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/mappix/2086030921" title="O' Tannenbaum by Micah A. Ponce, on Flickr"&gt;&lt;img src="https://farm3.staticflickr.com/2106/2086030921_80cf29799e_z.jpg?zz=1" width="461" height="640" alt="O' Tannenbaum"/&gt;&lt;/a&gt;&lt;/p&gt;</regular-body><tag>tannenbaum</tag></post><post id="104188427385" url="https://dummdida.tumblr.com/post/104188427385" url-with-slug="https://dummdida.tumblr.com/post/104188427385/monolithic-os-delivery-is-popular" type="regular" date-gmt="2014-12-02 22:01:00 GMT" date="Tue, 02 Dec 2014 23:01:00" unix-timestamp="1417557660" format="markdown" reblog-key="G2tf4jW3" slug="monolithic-os-delivery-is-popular" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Monolithic OS delivery is popular</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/idallen/488149912" title="ian_uw_board_monolith by Ian! D. Allen, on Flickr"&gt;&lt;img src="https://farm1.staticflickr.com/191/488149912_360d1967af_o.jpg" width="400" height="275" alt="ian_uw_board_monolith"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I actually had this post in my drafts for some while. Now it&amp;rsquo;s more of a reminder than a full post.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ovirt.org/Node"&gt;We&lt;/a&gt; do it, &lt;a href="http://www.projectatomic.io/"&gt;Atomic&lt;/a&gt; does it, the systemd-cabal does &lt;a href="http://0pointer.net/blog/revisiting-how-we-put-together-linux-systems.html"&gt;it&lt;/a&gt;, &lt;a href="http://www.openwrt.org"&gt;OpenWRT&lt;/a&gt; also does it - Delivering the OS or parts of it&amp;rsquo;s - in bigger chunks.
We and OpenWrt ship images, atomic trees, and the systemd cabal is also thinking about images.&lt;/p&gt;

&lt;p&gt;The projects got in common that due to the similar concepts of delivery, we also share a common set of problems.
One problem we all share is, how the state of a system instance - how the system specific configuration - is persisted/kept, between the (image/tree) based updates.&lt;/p&gt;

&lt;p&gt;This can seen pragramatically, like it&amp;rsquo;s the defautl way with rpm: The old configuration is not overwritten. But: rpm also has postlets (%post, and others) to apply some logic to files  when an rpm is updated.
This mechanism is used to i.e. convert files if they need some special handling between version upgrades (db schema migration, binary file conversion, &amp;hellip;).
So in the package based scenario, necessary changes to configuration files are done during the package update.
The same thing needs to happen with images.&lt;/p&gt;

&lt;p&gt;And so all of us, who do a &amp;ldquo;monolithic os delivery&amp;rdquo; are facing the same issue: How do we &amp;ldquo;migrate&amp;rdquo; the configuration files between image updates - or: How do we persist the state of the system between upgrades.&lt;/p&gt;

&lt;p&gt;Besides the technical differences in the solutions to this problem, there is one aspect that is unique&lt;sup id="fnref:andatomic"&gt;&lt;a href="#fn:andatomic" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt; to systemd: They try to solve conceptual problems.&lt;/p&gt;

&lt;p&gt;OpenWRT&amp;rsquo;s luci might be an interestnig approach to persistence; maybe it&amp;rsquo;s more about re-configuration than persistence.&lt;/p&gt;

&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;&lt;ol&gt;&lt;li id="fn:andatomic" role="doc-endnote"&gt;
&lt;p&gt;For this specific example - persisting the configuration - the atomic people are also quite involved as far as I can tell. &lt;a href="#fnref:andatomic" class="footnote-backref" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;&lt;/div&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>reminder</tag><tag>imgbased</tag><tag>imgbase</tag></post><post id="104188116490" url="https://dummdida.tumblr.com/post/104188116490" url-with-slug="https://dummdida.tumblr.com/post/104188116490/ways-to-persist-a-reminder" type="regular" date-gmt="2014-12-02 21:57:26 GMT" date="Tue, 02 Dec 2014 22:57:26" unix-timestamp="1417557446" format="markdown" reblog-key="Fk59QOnr" slug="ways-to-persist-a-reminder" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Ways to persist, a reminder</regular-title><regular-body>&lt;p&gt;I already wrote about persistence, now some diagrams to be more specific about some of them:&lt;/p&gt;

&lt;h2&gt;External&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;                 external

                 +------+
          .......| /etc |.......
          :      +------+      :
          :                    :
+--------------+           +--------------+
|              |           |              |
| layer-1      |           | layer-2      |
|              |           |              |
+--------------+           +--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most easy approach to persist data residing in &lt;code&gt;/etc&lt;/code&gt;, is to keep &lt;code&gt;/etc&lt;/code&gt; on a separate volume is shared between layers. &lt;code&gt;etc&lt;/code&gt; will be kept &lt;em&gt;external&lt;/em&gt; of the layers.&lt;/p&gt;

&lt;h2&gt;Copy&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;                       copy
            ...........................
            :                         :
            :                         :
        +------+                   +------+
+-------+ /etc +           +-------+ /etc +
|       +------+           |       +------+
|              |           |              |
| layer-1      |           | layer-2      |
|              |           |              |
+--------------+           +--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way is to copy the state from &lt;code&gt;layer-1&lt;/code&gt; to the next layer, possibly applying some logic to update the configuration files if necessary.&lt;/p&gt;

&lt;h2&gt;Merge&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;                    3-way-merge
            ...........................
        (1) :                         :
            :     ................... : .......
            :     :                  `:´      :
            :     : (2)               :       : (3)
        +------+  :                +------+   :
+-------+ /etc +  :        +-------+ /etc +   :
|       +------+  :        |       +------+   :
|              |...        |              |....
| layer-1      |           | layer-2      |
|              |           |              |
+--------------+           +--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3-way merging is actually a specialization of the &lt;em&gt;copy&lt;/em&gt; method. The reason is that a way merge can be seen as copying the existing configurtaion and applying the changes, which were also done to the changes applied to &lt;code&gt;layer-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All of the previous approaches were context-free, in the sense that they could be applied to all configuration as long as it was plaintext.&lt;/p&gt;

&lt;h2&gt;Individual&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;                    individual

          ............. a ...............
          : ........... b ............. :
          : : ......... c ........... : :
          : : :                     : : :
        +------+                   +------+
+-------+ /etc +           +-------+ /etc +
|       +------+           |       +------+
|              |           |              |
| layer-1      |           | layer-2      |
|              |           |              |
+--------------+           +--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With individual I am referring to a method, were some service is deciding how a specific configuration file should be migrated from &lt;code&gt;layer-1&lt;/code&gt; to &lt;code&gt;layer-2&lt;/code&gt;. That service can for sure use the simple &lt;em&gt;copy&lt;/em&gt; or &lt;em&gt;merge&lt;/em&gt; approach, but it could also apply some advanced logic to evenm migrate binary files.&lt;/p&gt;</regular-body><tag>node</tag><tag>persist</tag><tag>3way</tag><tag>merge</tag><tag>reminder</tag><tag>imgbase</tag><tag>imgbased</tag></post><post id="104188041405" url="https://dummdida.tumblr.com/post/104188041405" url-with-slug="https://dummdida.tumblr.com/post/104188041405/node-atomic-upgrades-image-based-delivery-and" type="regular" date-gmt="2014-12-02 21:56:00 GMT" date="Tue, 02 Dec 2014 22:56:00" unix-timestamp="1417557360" format="markdown" reblog-key="FWhrrP83" slug="node-atomic-upgrades-image-based-delivery-and" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Node: Atomic upgrades, image based delivery, and room for customization</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/mr_t_in_dc/4191970931" title="Freer Gallery Paintings by Mr.TinDC, on Flickr"&gt;&lt;img src="https://farm5.staticflickr.com/4039/4191970931_7e48b8000a.jpg" width="500" height="333" alt="Freer Gallery Paintings"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.mecheye.net/2014/11/why-package-managers-are-not-my-ideal-software-distribution-mechanism/"&gt;Yet another post (Jasper) on image based OS deliveries&lt;/a&gt;. Jasper is also utilizing ostree which become widely known with the Fedora Atomic or &lt;a href="http://projectatomic.io/"&gt;Project Atomic&lt;/a&gt; effort.
And there is also the idea from the &lt;a href="http://0pointer.net/blog/revisiting-how-we-put-together-linux-systems.html"&gt;systemd people&lt;/a&gt; which got some attention.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not that image based OS delivery is new. oVirt Node is around for some years and &lt;em&gt;is&lt;/em&gt; an example of an image based OS with atomic upgrades. Maintaining this small project gives us some experience, and we also see the limitations of our current approach, this is the reason why we are also investigating how to redesign Node, and keep the image based delivery.
There are similarities between Node&amp;rsquo;s requirements and the use cases addressed byostree and the systemd people, so we also keep close eye on those projects.
One difference we, especially to ostree is, that Node is an appliance intended to be the OS of a bare-metal machine, which needs to be somewhat customizable at runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OStree&lt;/strong&gt; is nice. Several filesystem trees exist in parallel on a host. Upgrades happen by creating a new tree. The efficiency comes from reducing redundancies between the different trees.
The problem we currently see with this approach, is that we can not really customize the parts we need to modify: Adding 3rd party kernel modules and adding custom monitoring tools.
Sure, there is a POC for installing simple rpms at runtime, and it is possible to create new trees on the server side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;systemd-btrfs-composing&lt;/strong&gt; is a very interesting but young idea. I&amp;rsquo;m a bit sceptical that it&amp;rsquo;s tied to a single filesystemn, but let&amp;rsquo;s see. Functional it would provide us with all the features we need: Booting into a real filesystem, which is completely writable.
Beyond that - which makes this idea unqiue IMO - is the strong focus on changing the way how (especially) configuration is re-thought to make the separation of stateless (site unspecific, like libraries) and statefull (site specific, like configurations) possible. I&amp;rsquo;m thinking about the idea of moving default configurations to some factory directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.com/fabiand/imgbased"&gt;&lt;strong&gt;image&lt;/strong&gt;&lt;/a&gt; &lt;a href="http://dummdida.tumblr.com/tagged/imgbased"&gt;&lt;strong&gt;based&lt;/strong&gt;&lt;/a&gt; is the idea we&amp;rsquo;ve come up with. It&amp;rsquo;s basically a &lt;em&gt;specific LVM usage pattern&lt;/em&gt;. It is an old idea, but realized in a stricter way.
Node will become a rootfs (like the trees provided by ostree). Those root filesystems can be pulled and are pushed into local logical volumes. The volumes are read-only, and a writable thin volume is created atop the read-only volume. This concept is very similar to the backingstore concept of the qcow2 format.
Anyhow, the writable layer is used to boot the host.&lt;/p&gt;

&lt;p&gt;Updates are (partially) simple: A new root filesystem is pushed into a new (read-only) logical volume, a writable layer is created a top, and a new boot entry is added.&lt;/p&gt;

&lt;p&gt;Compared to ostree, we don&amp;rsquo;t boot into trees in a filesystem, we rather boot into different filesystems.
This has the benefit of beeing very close to a regular operating system.&lt;/p&gt;

&lt;p&gt;We are in progress of testing all our use cases with the &lt;strong&gt;imgbased&lt;/strong&gt; approach, but because the other projects advance as well, it&amp;rsquo;s good to revisit them now and then.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>fedora</tag><tag>ostree</tag><tag>systemd</tag><tag>btrfs</tag><tag>imgbased</tag></post><post id="103751359950" url="https://dummdida.tumblr.com/post/103751359950" url-with-slug="https://dummdida.tumblr.com/post/103751359950/robohash" type="link" date-gmt="2014-11-27 21:26:43 GMT" date="Thu, 27 Nov 2014 22:26:43" unix-timestamp="1417123603" format="markdown" reblog-key="1nn8xuSl" slug="robohash" state="published" is_reblog="false" tumblelog="dummdida"><link-text>RoboHash</link-text><link-url>http://robohash.org/</link-url><tag>hackergotchi</tag><tag>robot</tag></post><post id="103749218810" url="https://dummdida.tumblr.com/post/103749218810" url-with-slug="https://dummdida.tumblr.com/post/103749218810/the-netflix-tech-blog-introducing-dynomite" type="link" date-gmt="2014-11-27 20:59:12 GMT" date="Thu, 27 Nov 2014 21:59:12" unix-timestamp="1417121952" format="markdown" reblog-key="dEDIhTcA" slug="the-netflix-tech-blog-introducing-dynomite" state="published" is_reblog="false" tumblelog="dummdida"><link-text>The Netflix Tech Blog: Introducing Dynomite - Making Non-Distributed Databases, Distributed</link-text><link-url>http://techblog.netflix.com/2014/11/introducing-dynomite.html</link-url><tag>database</tag><tag>replicate</tag><tag>scale</tag><tag>distribute</tag></post><post id="103452643535" url="https://dummdida.tumblr.com/post/103452643535" url-with-slug="https://dummdida.tumblr.com/post/103452643535/famzpatchew" type="link" date-gmt="2014-11-24 10:23:56 GMT" date="Mon, 24 Nov 2014 11:23:56" unix-timestamp="1416824636" format="markdown" reblog-key="3wvvJmNA" slug="famzpatchew" state="published" is_reblog="false" tumblelog="dummdida"><link-text>famz/patchew</link-text><link-url>https://github.com/famz/patchew</link-url><link-description>&lt;blockquote class="link_og_blockquote"&gt;patchew - A patch email tracking and testing system&lt;/blockquote&gt;</link-description><tag>test</tag><tag>automation</tag><tag>node</tag><tag>ovirt</tag></post><post id="103195814700" url="https://dummdida.tumblr.com/post/103195814700" url-with-slug="https://dummdida.tumblr.com/post/103195814700/predictable-network-interface-names" type="link" date-gmt="2014-11-21 11:46:38 GMT" date="Fri, 21 Nov 2014 12:46:38" unix-timestamp="1416570398" format="markdown" reblog-key="eiTTth4X" slug="predictable-network-interface-names" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Predictable Network Interface Names</link-text><link-url>http://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/</link-url><link-description>&lt;p&gt;Even if quite &amp;ldquo;old&amp;rdquo;, one nice feature of systemd.&lt;/p&gt;</link-description><tag>fedora</tag><tag>systemd</tag><tag>node</tag></post><post id="103087393745" url="https://dummdida.tumblr.com/post/103087393745" url-with-slug="https://dummdida.tumblr.com/post/103087393745/targetcli-on-pre-fedora-21" type="regular" date-gmt="2014-11-20 02:05:00 GMT" date="Thu, 20 Nov 2014 03:05:00" unix-timestamp="1416449100" format="markdown" reblog-key="KfUb3p4I" slug="targetcli-on-pre-fedora-21" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>targetcli on pre-Fedora 21</regular-title><regular-body>&lt;p&gt;&lt;a href="https://github.com/agrover/targetcli-fb"&gt;&lt;code&gt;targetcli&lt;/code&gt;&lt;/a&gt; seemed to be a nice way to create an iSCSI target - which I needed - on Fedora 21.&lt;/p&gt;

&lt;p&gt;I actually followed &lt;a href="http://workaround.cz/cmd-targetcli-iscsi-target-lio-and-fedora-18/"&gt;this&lt;/a&gt; guide which is quite nice. But there is one difference from &lt;code&gt;targetcli&lt;/code&gt; on Fedora 18 and on Fedora 21:&lt;/p&gt;

&lt;p&gt;On Fedora 21 the service which restores the LIO configuration is in a separate package (and called differently).
&lt;code&gt;python-rtslib&lt;/code&gt; - yes very intuitive - is the package called, which ships &lt;code&gt;target.service&lt;/code&gt; (on Fedora 19 it was called &lt;code&gt;targetd.service&lt;/code&gt;, and part of targetcli). This service is responsible for restoring the LIO configuration on boot.&lt;/p&gt;

&lt;p&gt;Long story short: Use &lt;code&gt;targetcli&lt;/code&gt; to configure LIO. And use The &lt;code&gt;target&lt;/code&gt; service to save and restore this configuration on boot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Install targetcli
pkcon install targetcli

# Ensure to enable and start the relevant service
systemctl enable target.service
systemctl start target.service

# Ready to do the configuration
targetcli

# IMPORTANT: Save your configuration
targetctl save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general a nice tool, I&amp;rsquo;d be happy to see a nicer documentation. But to be fair, there might be one which I haven&amp;rsquo;t found yet.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>fedora</tag><tag>iscsi</tag><tag>node</tag><tag>reminder</tag></post><post id="102351339865" url="https://dummdida.tumblr.com/post/102351339865" url-with-slug="https://dummdida.tumblr.com/post/102351339865/customizing-your-ovirt-appliance" type="regular" date-gmt="2014-11-11 09:22:00 GMT" date="Tue, 11 Nov 2014 10:22:00" unix-timestamp="1415697720" format="markdown" reblog-key="qWhA6kCg" slug="customizing-your-ovirt-appliance" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Customizing your oVirt Appliance</regular-title><regular-body>&lt;p&gt;With 3.5, oVirt gained the oVirt Engine Appliance. This appliance is a qcow2 image with a preinstalled (but not configured) oVirt Engine.&lt;/p&gt;

&lt;p&gt;If you want to automate stuff, then an OVA is not &lt;em&gt;so&lt;/em&gt; handy, because you&amp;rsquo;ll need to unroll the ova, before you can modify your appliance (i.e. add an ssh key, or change the root password, &amp;hellip;)&lt;/p&gt;

&lt;p&gt;But, for convenience the &lt;a href="http://jenkins.ovirt.org/job/ovirt-appliance_engine-3.5_master_merged/"&gt;Jenkins job&lt;/a&gt; also builds the qcow2 image, just does not export it.&lt;/p&gt;

&lt;p&gt;Anyhow, when you&amp;rsquo;ve got the qcow2 image in hand (eitehr by unrolling the ova, or downloading the qcow2), you can modify it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Download
$ curl -O &lt;a href="http://jenkins.ovirt.org/job/ovirt-appliance_engine-3.5_master_merged/ws/ovirt-appliance/engine-appliance/ovirt-appliance-fedora.qcow2"&gt;http://jenkins.ovirt.org/job/ovirt-appliance_engine-3.5_master_merged/ws/ovirt-appliance/engine-appliance/ovirt-appliance-fedora.qcow2&lt;/a&gt;

# Create a qcow-qcow2
$ qemu-img create \
    -f qcow2 \
    -o backing_file=ovirt-appliance-fedora.qcow2 \
    ovirt-instance.qcow2

# Create the script to run inside
$ cat &amp;gt; inside.sh &amp;lt;&amp;lt;EOF
# Remove root password
passwd --unlock root
passwd --delete root

# Disable firstboot
rm -vf /etc/sysconfig/firstboot /etc/reconfigSys
chkconfig firstboot off
EOF

# Run the script insde the appliance
$ guestfish -ia ovirt-instance.qcow2 \
    upload inside.sh /tmp/inside.sh \
    : sh "bash -x /tmp/inside.sh &amp;gt;&amp;amp;2" \
    : rm "/tmp/inside.sh"

# Test
$ qemu-kvm -m 2048 -smp 4 -snapshot -hda ovirt-instance.qcow2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The newer guestfish tools provide more high-level functionality, IIRC also some functionality to disable the firstboot assistant.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>appliance</tag><tag>guestfish</tag></post><post id="102350510090" url="https://dummdida.tumblr.com/post/102350510090" url-with-slug="https://dummdida.tumblr.com/post/102350510090/datasources-cloud-init-077-documentation" type="link" date-gmt="2014-11-11 08:56:12 GMT" date="Tue, 11 Nov 2014 09:56:12" unix-timestamp="1415696172" format="markdown" reblog-key="qXbzfBIR" slug="datasources-cloud-init-077-documentation" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Datasources — Cloud-Init 0.7.7 documentation</link-text><link-url>http://cloudinit.readthedocs.org/en/latest/topics/datasources.html#fallback-none</link-url><link-description>&lt;p&gt;Nice to know that &lt;a href="https://help.ubuntu.com/community/CloudInit"&gt;cloud-init&lt;/a&gt; can be fed from different sources. Especially the fallback source is interesting, which basically allows you to pass the configuration data (meta- and user-data) to an instance using a vfat or iso9660 image. WHich is very convenient sometimes.&lt;/p&gt;</link-description><tag>ovirt</tag><tag>appliance</tag></post><post id="101420045985" url="https://dummdida.tumblr.com/post/101420045985" url-with-slug="https://dummdida.tumblr.com/post/101420045985/the-rust-guide" type="link" date-gmt="2014-10-31 14:28:47 GMT" date="Fri, 31 Oct 2014 15:28:47" unix-timestamp="1414765727" format="markdown" reblog-key="E7TkDWM2" slug="the-rust-guide" state="published" is_reblog="false" tumblelog="dummdida"><link-text>The Rust Guide</link-text><link-url>http://doc.rust-lang.org/guide.html</link-url><link-description>&lt;p&gt;It&amp;rsquo;s entertaining to read this guide. It&amp;rsquo;s remarkable how good this guide is written. Illustrated with a many examples this really is a nice read.&lt;/p&gt;</link-description><tag>rust</tag></post><post id="101075966830" url="https://dummdida.tumblr.com/post/101075966830" url-with-slug="https://dummdida.tumblr.com/post/101075966830/overlay-filesystem" type="quote" date-gmt="2014-10-27 09:36:41 GMT" date="Mon, 27 Oct 2014 10:36:41" unix-timestamp="1414402601" format="markdown" reblog-key="sq2fGW65" slug="overlay-filesystem" state="published" is_reblog="false" tumblelog="dummdida"><quote-text>overlay filesystem</quote-text><quote-source>&lt;a href="http://lkml.iu.edu/hypermail/linux/kernel/1410.3/01094.html"&gt;http://lkml.iu.edu/hypermail/linux/kernel/1410.3/01094.html&lt;/a&gt;</quote-source><tag>linux</tag><tag>kernel</tag><tag>unionfs</tag><tag>overlayfs</tag><tag>unionmounts</tag></post><post id="100846793630" url="https://dummdida.tumblr.com/post/100846793630" url-with-slug="https://dummdida.tumblr.com/post/100846793630/watching-the-progress" type="regular" date-gmt="2014-10-24 19:05:21 GMT" date="Fri, 24 Oct 2014 21:05:21" unix-timestamp="1414177521" format="markdown" reblog-key="OglV2Wxk" slug="watching-the-progress" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Watching the progress …</regular-title><regular-body>&lt;p&gt;Ever wanted to watch when something isgoing wrong during Node&amp;rsquo;s installation?
Drop to shell and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openvt -f -c 1 -w -s -l -- bash &amp;amp;&amp;amp; openvt -f -c 2 -w -s -l bash &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks Ryan.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag></post><post id="100833866725" url="https://dummdida.tumblr.com/post/100833866725" url-with-slug="https://dummdida.tumblr.com/post/100833866725/virtual-machine-plugin-avocado-0140" type="link" date-gmt="2014-10-24 15:30:57 GMT" date="Fri, 24 Oct 2014 17:30:57" unix-timestamp="1414164657" format="markdown" reblog-key="qAHsgcpa" slug="virtual-machine-plugin-avocado-0140" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Virtual Machine Plugin — Avocado 0.14.0 documentation</link-text><link-url>http://avocado-framework.readthedocs.org/en/latest/VirtualMachinePlugin.html</link-url><tag>reminder</tag><tag>test</tag><tag>testing</tag><tag>node</tag><tag>fedora</tag></post><post id="100833843510" url="https://dummdida.tumblr.com/post/100833843510" url-with-slug="https://dummdida.tumblr.com/post/100833843510/avocado-frameworkavocado" type="link" date-gmt="2014-10-24 15:30:00 GMT" date="Fri, 24 Oct 2014 17:30:00" unix-timestamp="1414164600" format="markdown" reblog-key="w8chVc25" slug="avocado-frameworkavocado" state="published" is_reblog="false" tumblelog="dummdida"><link-text>avocado-framework/avocado</link-text><link-url>https://github.com/avocado-framework/avocado</link-url><link-description>&lt;blockquote class="link_og_blockquote"&gt;avocado - Avocado Test Framework&lt;/blockquote&gt;</link-description><tag>reminder</tag><tag>test</tag><tag>testing</tag><tag>node</tag><tag>fedora</tag></post><post id="100682079065" url="https://dummdida.tumblr.com/post/100682079065" url-with-slug="https://dummdida.tumblr.com/post/100682079065/source" type="photo" date-gmt="2014-10-22 18:30:38 GMT" date="Wed, 22 Oct 2014 20:30:38" unix-timestamp="1414002638" format="markdown" reblog-key="4AAnp5in" slug="source" state="published" is_reblog="false" tumblelog="dummdida" width="2020" height="448"><photo-caption>&lt;p&gt;Source: &lt;a href="http://www.technologyreview.com/view/531911/isaac-asimov-mulls-how-do-people-get-new-ideas/"&gt;http://www.technologyreview.com/view/531911/isaac-asimov-mulls-how-do-people-get-new-ideas/&lt;/a&gt;&lt;/p&gt;</photo-caption><photo-url max-width="1280">https://66.media.tumblr.com/1d72e7d9f122ac693d8c4e7b2dcc5795/tumblr_nduzf2CRNG1st6sz0o1_1280.jpg</photo-url><photo-url max-width="500">https://66.media.tumblr.com/1d72e7d9f122ac693d8c4e7b2dcc5795/tumblr_nduzf2CRNG1st6sz0o1_500.jpg</photo-url><photo-url max-width="400">https://66.media.tumblr.com/1d72e7d9f122ac693d8c4e7b2dcc5795/tumblr_nduzf2CRNG1st6sz0o1_400.jpg</photo-url><photo-url max-width="250">https://66.media.tumblr.com/1d72e7d9f122ac693d8c4e7b2dcc5795/tumblr_nduzf2CRNG1st6sz0o1_250.jpg</photo-url><photo-url max-width="100">https://66.media.tumblr.com/1d72e7d9f122ac693d8c4e7b2dcc5795/tumblr_nduzf2CRNG1st6sz0o1_100.jpg</photo-url><photo-url max-width="75">https://66.media.tumblr.com/1d72e7d9f122ac693d8c4e7b2dcc5795/tumblr_nduzf2CRNG1st6sz0o1_75sq.jpg</photo-url></post><post id="100495275225" url="https://dummdida.tumblr.com/post/100495275225" url-with-slug="https://dummdida.tumblr.com/post/100495275225/getting-a-writable-filesystems-on-node" type="regular" date-gmt="2014-10-20 12:14:00 GMT" date="Mon, 20 Oct 2014 14:14:00" unix-timestamp="1413807240" format="markdown" reblog-key="Br6fcP3X" slug="getting-a-writable-filesystems-on-node" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Getting a writable filesystems on Node</regular-title><regular-body>&lt;p&gt;The diagram illustrates how we plan to bring a writable root filesystem to Node,  without any limitations.
No limitations, because the fs is justa regular filesystem, nothing special about it, the special handling is below, on the block layer, provided by LVM thin volumes (thanks to dm-thin):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      . . . . . . . . . . . . . . . . 
      :               :             :   
      :         +--------------+--------------+
      :         | layer-1 (rw) | layer-2 (rw) |
      :         +--------------+--------------+
      :         | base-1 (ro)  | base-2 (ro)  |
+------------+  +--------------+--------------+-----------+
| bootloader |  | lvm vg                                  |   
+------------+--+-----------------------------------------+
| disk                                                    |   
+---------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each image (called &lt;code&gt;base-N&lt;/code&gt;) we publish will be stored as a read-only (thin) logical volume in the volume group (&lt;code&gt;lvm vg&lt;/code&gt;).
For each base &lt;code&gt;base-N&lt;/code&gt; a writable layer named &lt;code&gt;layer-N&lt;/code&gt; will be created atop of the base.
To boot into the writable layers, boot entries will be added to the bootloader, pointing to all available (writable) layers.
There is no possibility to boot into the read-only bases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;State&lt;/strong&gt; If modifying/customizing of a layer is interpreted as the state of a base, then migrating the custom configuration between layers (i.e. migrating the changes to from an old to a new layer), can be called persisting the state of a base.&lt;/p&gt;

&lt;p&gt;Apparently there are many ways how the state of a base can be persisted. It has been discussed and will be discussed, yet it is not clear what the &lt;em&gt;Königsweg&lt;/em&gt; is.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s obvious that &lt;code&gt;base-N&lt;/code&gt; is intended to be an ancestor of &lt;code&gt;base-(N+1)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Block layer&lt;/strong&gt; Hiding the sparseness in the block layer has the big advantage that it is completely transparent to file based stuff, like permissions and (especially) SELinux.&lt;/p&gt;

&lt;p&gt;It currently has the drawback that deduplication is harder - or impossible.&lt;/p&gt;</regular-body><tag>node</tag><tag>ovirt</tag><tag>imgbase</tag><tag>imgbased</tag><tag>persistence</tag></post><post id="100159663170" url="https://dummdida.tumblr.com/post/100159663170" url-with-slug="https://dummdida.tumblr.com/post/100159663170/blockdiag-simple-diagram-images-generator" type="link" date-gmt="2014-10-16 14:12:14 GMT" date="Thu, 16 Oct 2014 16:12:14" unix-timestamp="1413468734" format="markdown" reblog-key="iF22eTdZ" slug="blockdiag-simple-diagram-images-generator" state="published" is_reblog="false" tumblelog="dummdida"><link-text>blockdiag - simple diagram images generator — blockdiag 1.0 documentation</link-text><link-url>http://blockdiag.com/</link-url><tag>python</tag><tag>diagram</tag></post><post id="100155457650" url="https://dummdida.tumblr.com/post/100155457650" url-with-slug="https://dummdida.tumblr.com/post/100155457650/why-images-matter" type="regular" date-gmt="2014-10-16 12:37:34 GMT" date="Thu, 16 Oct 2014 14:37:34" unix-timestamp="1413463054" format="markdown" reblog-key="KYPZHpNZ" slug="why-images-matter" state="draft" is_reblog="false" tumblelog="dummdida"><regular-title>Why images matter</regular-title><regular-body>&lt;p&gt;Images, a filesystem tarball, or a&lt;/p&gt;

&lt;p&gt;a well tested unit. Automation,&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>imgbase</tag><tag>testing</tag><tag>automation</tag></post><post id="100155137955" url="https://dummdida.tumblr.com/post/100155137955" url-with-slug="https://dummdida.tumblr.com/post/100155137955" type="photo" date-gmt="2014-10-16 12:29:30 GMT" date="Thu, 16 Oct 2014 14:29:30" unix-timestamp="1413462570" format="markdown" reblog-key="lZL2N65f" slug="" state="published" is_reblog="false" tumblelog="dummdida" width="960" height="540"><photo-link-url>https://fedorapeople.org/~fabiand/slides/2014-10-Where_Node_can_be_going_from_10000_ft.pdf</photo-link-url><photo-url max-width="1280">https://66.media.tumblr.com/52c0bfe0263a435ccc9426133b5838d8/tumblr_ndjep65HEH1st6sz0o1_1280.png</photo-url><photo-url max-width="500">https://66.media.tumblr.com/52c0bfe0263a435ccc9426133b5838d8/tumblr_ndjep65HEH1st6sz0o1_500.png</photo-url><photo-url max-width="400">https://66.media.tumblr.com/52c0bfe0263a435ccc9426133b5838d8/tumblr_ndjep65HEH1st6sz0o1_400.png</photo-url><photo-url max-width="250">https://66.media.tumblr.com/52c0bfe0263a435ccc9426133b5838d8/tumblr_ndjep65HEH1st6sz0o1_250.png</photo-url><photo-url max-width="100">https://66.media.tumblr.com/52c0bfe0263a435ccc9426133b5838d8/tumblr_ndjep65HEH1st6sz0o1_100.png</photo-url><photo-url max-width="75">https://66.media.tumblr.com/52c0bfe0263a435ccc9426133b5838d8/tumblr_ndjep65HEH1st6sz0o1_75sq.png</photo-url><tag>node</tag><tag>imgbase</tag><tag>slides</tag><tag>linuxcon</tag><tag>ovirt</tag></post><post id="99558030675" url="https://dummdida.tumblr.com/post/99558030675" url-with-slug="https://dummdida.tumblr.com/post/99558030675/testing-pxeboot-with-qemu" type="regular" date-gmt="2014-10-09 11:00:00 GMT" date="Thu, 09 Oct 2014 13:00:00" unix-timestamp="1412852400" format="markdown" reblog-key="eiRYNecx" slug="testing-pxeboot-with-qemu" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Testing pxeboot with qemu</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/major_clanger/298474514" title="The View from my hotel room in Washington DC by Major Clanger, on Flickr"&gt;&lt;img src="https://farm1.staticflickr.com/101/298474514_18467ad7ab_z.jpg" width="640" height="481" alt="The View from my hotel room in Washington DC"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever wondered if it was possible to test &lt;a href="http://dummdida.tumblr.com/post/98799178310/testing-multipath-with-qemu"&gt;&lt;del&gt;multipathing&lt;/del&gt;&lt;/a&gt; PXE boot with qemu? it turns out it is.&lt;/p&gt;

&lt;p&gt;Basic idea: Extract an iso using Fedora&amp;rsquo;s &lt;code&gt;livecd-iso-to-pxeboot&lt;/code&gt; tool and point qemu to that directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ livecd-iso-to-pxeboot &amp;lt;isoname&amp;gt;
$ qemu \
    -hda hda.qcow2 \
    -net user,tftp=tftpboot,bootfile=pxelinux.0 -net nic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nifty?&lt;/p&gt;

&lt;p&gt;It will probably be re-used in some test automation context.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>pxe</tag><tag>qemu</tag><tag>kvm</tag><tag>node</tag><tag>test</tag><tag>automation</tag></post><post id="99481830970" url="https://dummdida.tumblr.com/post/99481830970" url-with-slug="https://dummdida.tumblr.com/post/99481830970/nested-virtualization-on-intel" type="regular" date-gmt="2014-10-08 12:53:00 GMT" date="Wed, 08 Oct 2014 14:53:00" unix-timestamp="1412772780" format="markdown" reblog-key="mMdtqyNT" slug="nested-virtualization-on-intel" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Nested virtualization on Intel</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/sizima/564751829" title="nesting by sizima, on Flickr"&gt;&lt;img src="https://farm2.staticflickr.com/1403/564751829_2112f4c0a9_z.jpg?zz=1" width="640" height="426" alt="nesting"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just because I needed it today, a reminder.&lt;/p&gt;

&lt;p&gt;If you need to do nested virtualization on some Intel CPU:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Configure kmod
cat /etc/modprobe.d/kvm.conf 
options kvm_intel nested=Y

# Unload kmod
rmmod kvm-intel &amp;amp;&amp;amp; rmmod kvm

# Load kmod
modprobe kvm &amp;amp;&amp;amp; modprobe kvm-intel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In virt-manager or alike, remember to copy the host cpu flags to the guest.&lt;/p&gt;</regular-body><tag>reminder</tag><tag>fedora</tag><tag>kvm</tag><tag>intel</tag><tag>libvirt</tag><tag>test</tag><tag>automation</tag></post><post id="99389401275" url="https://dummdida.tumblr.com/post/99389401275" url-with-slug="https://dummdida.tumblr.com/post/99389401275/fabiandtoggle-power" type="link" date-gmt="2014-10-07 07:57:00 GMT" date="Tue, 07 Oct 2014 09:57:00" unix-timestamp="1412668620" format="markdown" reblog-key="5yTT676N" slug="fabiandtoggle-power" state="published" is_reblog="false" tumblelog="dummdida"><link-text>fabiand/toggle-power</link-text><link-url>https://github.com/fabiand/toggle-power</link-url><link-description>&lt;blockquote class="link_og_blockquote"&gt;toggle-power - A small script to work with local remote builders&lt;/blockquote&gt;



&lt;p&gt;To save energy ressources it&amp;rsquo;s best to - save energy. In the light of this I&amp;rsquo;ve written a small script which I can easily be used to suspend my spare machines to RAM, and wake them up using wake-on-lan.&lt;/p&gt;

&lt;p&gt;Nice to have this easy command to suspend a Fedora host:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl suspend
&lt;/code&gt;&lt;/pre&gt;</link-description><tag>fedora</tag><tag>wake-on-lan</tag><tag>systemd</tag></post><post id="99303250930" url="https://dummdida.tumblr.com/post/99303250930" url-with-slug="https://dummdida.tumblr.com/post/99303250930/bofh-meets-systemtap-rootkits-made-trivial" type="link" date-gmt="2014-10-06 07:31:18 GMT" date="Mon, 06 Oct 2014 09:31:18" unix-timestamp="1412580678" format="markdown" reblog-key="ILWPQcNU" slug="bofh-meets-systemtap-rootkits-made-trivial" state="published" is_reblog="false" tumblelog="dummdida"><link-text>BOFH meets SystemTap: rootkits made trivial</link-text><link-url>http://stapbofh.krunch.be/systemtap-bofh-devconf.cz2014020701.pdf</link-url><tag>devconf2014</tag><tag>fedora</tag><tag>systemtap</tag><tag>keylogger</tag><tag>live-patching</tag></post><post id="98972409915" url="https://dummdida.tumblr.com/post/98972409915" url-with-slug="https://dummdida.tumblr.com/post/98972409915/isolated-test-runner-for-functional-tests-qemu" type="regular" date-gmt="2014-10-02 14:15:00 GMT" date="Thu, 02 Oct 2014 16:15:00" unix-timestamp="1412259300" format="markdown" reblog-key="CWkJ0sOl" slug="isolated-test-runner-for-functional-tests-qemu" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Isolated test runner for functional tests (qemu + 9p + serial)</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/redjar/136216456" title="remote control pig pile by redjar, on Flickr"&gt;&lt;img src="https://farm1.staticflickr.com/44/136216456_40df1bd6e1.jpg" width="500" height="333" alt="remote control pig pile"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve written about this &lt;a href="http://dummdida.tumblr.com/post/86583072660/automatic-testing-of-a-fedora-cloud-image-with-gherkin"&gt;before&lt;/a&gt;, functional testing of operating system features, i.e. messing with storage or network devices.&lt;/p&gt;

&lt;p&gt;In the last post I used gherkin, pexpect and qemu to do this. It works, but was still to cumbersome.&lt;/p&gt;

&lt;p&gt;This time I&amp;rsquo;ve further reduced the dependencies and made the process simpler and more mature.&lt;/p&gt;

&lt;p&gt;The flow is now roughly as follows:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Write testcases on the host-side&lt;/li&gt;
&lt;li&gt;Run a VM, and loop in some host-side dir, i.e. &lt;code&gt;$PWD&lt;/code&gt; using 9pfs over virtio, and attach the serial console of the VM to stdio&lt;/li&gt;
&lt;li&gt;Wait for some keyword to turn up and send the necessary client side commands to mount the host-side path into some dir&lt;/li&gt;
&lt;li&gt;Change into the mounted path and run the host-side testcases inside the VM&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Asciiart:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Job          Workspace                        VM

Init   --&amp;gt;   Populated

             Spawn a VM                  --&amp;gt;  Boot

             Pass workspace using 9pfs   --&amp;gt;  Mount workspace over
                                              9pfs

             Init test through serial io --&amp;gt;  Test runner runs
                                         &amp;lt;--  Write results to
                                              workspace through
                                              9pfs

                                              Shutdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This doesn&amp;rsquo;t sound fancy, but it has some nice aspects:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;No modification of the VM needed, as long as the serial console is used&lt;/li&gt;
&lt;li&gt;Reduce the interaction with the VM to a minimum (but is general enough to have low assumptions about the VM)&lt;/li&gt;
&lt;li&gt;Works nicely with Jenkins, because libvirt is not involved&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t touch the image by using snapshots&lt;/li&gt;
&lt;li&gt;The tests can do whatever they want, complete isolation&lt;/li&gt;
&lt;li&gt;Simple to understand and maintain&lt;/li&gt;
&lt;li&gt;Few constraints on the host&lt;/li&gt;
&lt;li&gt;Works with docker too?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To highlight the key achievements:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;9pfs is used to easily exchange data between host and guest.&lt;/li&gt;
&lt;li&gt;Kickoff testing within the VM using the virtio serial&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;An example for this approach can be found &lt;a href="http://jenkins.ovirt.org/job/fabiand_ovirt-node-tng_image_check_functional/"&gt;here&lt;/a&gt; - it used to test some Node experiments.&lt;/p&gt;

&lt;p&gt;The actual tests and test-runner can be found &lt;a href="https://github.com/fabiand/imgbased/tree/master/tests/runtime"&gt;here&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>qemu</tag><tag>fedora</tag><tag>ovirt</tag><tag>node</tag><tag>libvirt</tag><tag>test</tag><tag>automation</tag></post><post id="98799178310" url="https://dummdida.tumblr.com/post/98799178310" url-with-slug="https://dummdida.tumblr.com/post/98799178310/testing-multipath-with-qemu" type="regular" date-gmt="2014-09-30 11:13:00 GMT" date="Tue, 30 Sep 2014 13:13:00" unix-timestamp="1412075580" format="markdown" reblog-key="fKtOwunn" slug="testing-multipath-with-qemu" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Testing multipath with qemu</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/dno1967b/8347363864" title="Alternatives by Daniel Oines, on Flickr"&gt;&lt;img src="https://farm9.staticflickr.com/8091/8347363864_3afc816567_z.jpg" width="640" height="361" alt="Alternatives"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever wondered if it was possible to test multipathing with qemu? it turns out it is.&lt;/p&gt;

&lt;p&gt;Basic idea: Create two devices which point to the same backing image. Important: Let qemu know that it is the same disk, by using the same serial for both.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ qemu \
    -drive file=hda.qcow2,media=disk,bus=0,unit=0,if=ide,cache=none,serial=abcde \
    -drive file=hda.qcow2,media=disk,bus=1,unit=1,if=ide,cache=none,serial=abcde \
    -cdrom boot.iso
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in your guest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# multipath -ll
QEMU_HARDDISK_abcde dm-0 ATA     ,QEMU HARDDISK   
size=30G features='0' hwhandler='0' wp=rw
|-+- policy='service-time 0' prio=1 status=active
| `- 0:0:0:0 sda 8:0  active ready running
`-+- policy='service-time 0' prio=1 status=enabled
  `- 1:0:1:0 sdb 8:16 active ready running
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nifty?&lt;/p&gt;

&lt;p&gt;It will probably be re-used in some test automation context.&lt;/p&gt;</regular-body><tag>testing</tag><tag>automation</tag><tag>qemu</tag><tag>fedora</tag><tag>test</tag></post><post id="98471320820" url="https://dummdida.tumblr.com/post/98471320820" url-with-slug="https://dummdida.tumblr.com/post/98471320820/gnome-314" type="regular" date-gmt="2014-09-26 15:12:30 GMT" date="Fri, 26 Sep 2014 17:12:30" unix-timestamp="1411744350" format="markdown" reblog-key="HYMQMbC0" slug="gnome-314" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>GNOME 3.14</regular-title><regular-body>&lt;iframe width="560" height="315" src="//www.youtube-nocookie.com/embed/7p8Prlu3owc?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</regular-body><tag>fedora</tag><tag>gnome</tag><tag>video</tag></post><post id="98376786615" url="https://dummdida.tumblr.com/post/98376786615" url-with-slug="https://dummdida.tumblr.com/post/98376786615/nice-paintings-from-daala-intra-prediction-and" type="regular" date-gmt="2014-09-25 08:59:00 GMT" date="Thu, 25 Sep 2014 10:59:00" unix-timestamp="1411635540" format="markdown" reblog-key="JO8tNfZg" slug="nice-paintings-from-daala-intra-prediction-and" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Nice paintings from daala - intra prediction and complexity</regular-title><regular-body>&lt;p&gt;&lt;a href="https://people.xiph.org/~jm/daala/paint_demo/"&gt;&lt;img src="https://people.xiph.org/~jm/daala/paint_demo/paint_crepuscular16.jpg" alt="Intra-Paint"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;daala was actually the reason why I started with packaging &lt;a href="https://fedoraproject.org/wiki/Changes/OpenCL"&gt;OpenCL for Fedora&lt;/a&gt;.
daala planned to provide an OpenCL based reference implementation, but there was a lack of platforms supporting OpenCL.&lt;/p&gt;

&lt;p&gt;Anyhow, Jean-Marc Valin wrote about an algorithm yesterday which is visually quite impressive, but it&amp;rsquo;s also complex. On the pro side is, that it is massively parallel - which actually directly redirects us to OpenCL.
Sadly I won&amp;rsquo;t be able to contribute something, but at least that is a niche, where OpenCL can help.&lt;/p&gt;

&lt;p&gt;The results of the algorithm are quite nice (see at the bottom of the post), and might be practical if the complexity can be addressed.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>daala</tag><tag>opencl</tag></post><post id="98373540195" url="https://dummdida.tumblr.com/post/98373540195" url-with-slug="https://dummdida.tumblr.com/post/98373540195/automation-aint-easy-but-it-pays-back¹" type="regular" date-gmt="2014-09-25 07:05:00 GMT" date="Thu, 25 Sep 2014 09:05:00" unix-timestamp="1411628700" format="markdown" reblog-key="YNRAq5dF" slug="automation-aint-easy-but-it-pays-back¹" state="draft" is_reblog="false" tumblelog="dummdida"><regular-title>Automation ain't easy; but it pays back¹ - Pitfalls in automating the build of images</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/simonm1965/5978129712" title="push the button by Simon Murphy, on Flickr"&gt;&lt;img src="https://farm7.staticflickr.com/6147/5978129712_541d6661c8_z.jpg" width="640" height="443" alt="push the button"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More than two months ago I &lt;a href="http://dummdida.tumblr.com/post/91741656270/weekly-ovirt-engine-virtual-appliance-builds"&gt;wrote about the oVirt Engine Virtual Appliance&lt;/a&gt; which is now beeing build for oVirt 3.5.&lt;/p&gt;

&lt;p&gt;Back then the first initial builds happened and I thought I was done - as in: Fine; the images are now build, nothing can happen.&lt;/p&gt;

&lt;h1&gt;Unstable&lt;/h1&gt;

&lt;p&gt;Well, it wasn&amp;rsquo;t that easy - again &amp;hellip; The builds weren&amp;rsquo;t as stable as expected and I had to adress several issues.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s give some background: We are using &lt;a href="http://jenkins.ovirt.org"&gt;Jenkins&lt;/a&gt; within oVirt for continous intgeration and other tasks. I&amp;rsquo;m also building &lt;a href="http://www.ovirt.org/Node"&gt;oVirt Node&lt;/a&gt;, which is also some kind of image.&lt;/p&gt;

&lt;p&gt;Compared to the Node image, the appliance image is different, because it can be build using livemedia-creator. Node in contrast needs livecd-tools.&lt;/p&gt;

&lt;p&gt;The difference beteween livecd-creator (lmc) and livecd-tools is a rather big one. livecd-tools is using a chroot to build the image, lmc otoh is using a complete VM (through libvirt) to isolate the image creation from the host operating system. This is good for several reasons:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;SELinux - If the SELinux policy between host and guest difffer to much, then obscur problems can appear&lt;/li&gt;
&lt;li&gt;If the build fails, mount points must be cleared&lt;/li&gt;
&lt;li&gt;If the build fails, loop devides must be cleared (!)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To name just a few.&lt;/p&gt;

&lt;p&gt;livecd-tools main drawback is it&amp;rsquo;s use of loop back devices, which ain&amp;rsquo;t bad per se, but it turns out that - still - situations can occur where loop devices can not be removed again. I mean, they can not be removed at all, without rebooting the system.
On a CI system, this will slowly eat up all the loop devices, until a builder is unable to build an image because of this execssive use of loop devices.
That is a big problem when building images using livecd-tools.&lt;/p&gt;

&lt;p&gt;Now, to address this I wanted to use lmc.
lmc is not using loop devices, but it&amp;rsquo;s using libvirt. Which is actually quite nice. But it seems that there are also some &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1103308"&gt;problems&lt;/a&gt; which make the use of libvirt in jenkins environments hard.&lt;/p&gt;

&lt;p&gt;Let me say that those kind of problems might be in general not to bad, you set SELinux to permissive, and run lmc as root.
But that is the difference between your lcoal environemnt and a shared Jenkins instance: You don&amp;rsquo;t have the full controll over your environment. You can&amp;rsquo;t always tell ahead of time what exact&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m actually a big fan of using existing code. Because often others have already thought about and solved a problem. But in this case I went with using qemu directly.
This turned out to be very well suited for Jenkins, because a qemu instance is independent and does need loop mounts (wohoo) to create a disk image.&lt;/p&gt;

&lt;p&gt;Qemu was in place, and was booting anaconda nicely. But it was slow and failed.&lt;/p&gt;

&lt;p&gt;It was slow, because the builder does not have a great bandwidth into the internet. So to improve To address this, I setup a caching mechanism, which is working fairly well, but could be further improved by mirroring the release trees of the required distribution.&lt;/p&gt;

&lt;p&gt;¹: In the best case&lt;/p&gt;</regular-body><tag>fedora</tag><tag>ovirt</tag><tag>node</tag><tag>appliance</tag><tag>livemedia-creator</tag><tag>livecd-tools</tag><tag>jenkins</tag><tag>qemu</tag><tag>libvirt</tag></post><post id="98325873565" url="https://dummdida.tumblr.com/post/98325873565" url-with-slug="https://dummdida.tumblr.com/post/98325873565/bash-specially-crafted-environment-variables-code" type="link" date-gmt="2014-09-24 19:25:33 GMT" date="Wed, 24 Sep 2014 21:25:33" unix-timestamp="1411586733" format="markdown" reblog-key="6GRLiHxA" slug="bash-specially-crafted-environment-variables-code" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Bash specially-crafted environment variables code injection attack</link-text><link-url>https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack/</link-url><link-description>&lt;blockquote class="link_og_blockquote"&gt;Bash or the Bourne again shell, is a UNIX like shell, which is perhaps one of the most installed utilities on any Linux system. From its creation in 1980, bash has evolved from a simple terminal ba&amp;hellip;&lt;/blockquote&gt;</link-description><tag>bash</tag><tag>fedora</tag><tag>reminder</tag><tag>vulnerability</tag></post><post id="98305230505" url="https://dummdida.tumblr.com/post/98305230505" url-with-slug="https://dummdida.tumblr.com/post/98305230505" type="video" date-gmt="2014-09-24 13:23:39 GMT" date="Wed, 24 Sep 2014 15:23:39" unix-timestamp="1411565019" format="markdown" reblog-key="O4ENTXrP" slug="" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://www.youtube.com/watch?v=dSRiU8QM-xM</video-source><video-player>&lt;iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/dSRiU8QM-xM?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe width="500" height="281"  id="youtube_iframe" src="https://www.youtube.com/embed/dSRiU8QM-xM?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe width="250" height="141"  id="youtube_iframe" src="https://www.youtube.com/embed/dSRiU8QM-xM?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><tag>drone</tag><tag>juist</tag></post><post id="98238898445" url="https://dummdida.tumblr.com/post/98238898445" url-with-slug="https://dummdida.tumblr.com/post/98238898445/custom-storage-layout-in-anaconda" type="regular" date-gmt="2014-09-23 17:47:39 GMT" date="Tue, 23 Sep 2014 19:47:39" unix-timestamp="1411494459" format="markdown" reblog-key="AJnTOgzx" slug="custom-storage-layout-in-anaconda" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>custom storage layout in anaconda</regular-title><regular-body>&lt;p&gt;A custom installer class implementation carried in a product.img can be used to provide a custom storage configuration to anaconda.&lt;/p&gt;</regular-body><tag>reminder</tag><tag>anaconda</tag><tag>node</tag></post><post id="98151563015" url="https://dummdida.tumblr.com/post/98151563015" url-with-slug="https://dummdida.tumblr.com/post/98151563015/weston-brdp-backendso-waylands-rdp-backend" type="regular" date-gmt="2014-09-22 16:16:00 GMT" date="Mon, 22 Sep 2014 18:16:00" unix-timestamp="1411402560" format="markdown" reblog-key="x3homTes" slug="weston-brdp-backendso-waylands-rdp-backend" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>weston -Brdp-backend.so -- Wayland's RDP backend</regular-title><regular-body>&lt;p&gt;kalev mentioned that wayland&amp;rsquo;s RDP backend is already part of Fedora&amp;rsquo;s wayland builds. I just gave it a quick shot:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://66.media.tumblr.com/00eb4318770cd9487f59333e75fe700b/tumblr_inline_ncb8ywcSNj1s0jj7d.png" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;(VM with weston running - to the right, remmina as an RDP client &amp;ndash; to the left)&lt;/p&gt;

&lt;p&gt;This basically means that wayland is acting as an RDP server (without session management).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pkcon install xkeyboard-config weston
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs wayland (and a dependency). To then start weston with the RDP backend use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ weston -Brdp-backend.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally you can use remmina to connect to wayland.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>wayland</tag><tag>rdp</tag><tag>remmina</tag><tag>weston</tag><tag>gtk3</tag></post><post id="98150980530" url="https://dummdida.tumblr.com/post/98150980530" url-with-slug="https://dummdida.tumblr.com/post/98150980530/the-python-gtk-3-tutorial-python-gtk-3" type="link" date-gmt="2014-09-22 16:06:23 GMT" date="Mon, 22 Sep 2014 18:06:23" unix-timestamp="1411401983" format="markdown" reblog-key="vTG0VOrE" slug="the-python-gtk-3-tutorial-python-gtk-3" state="published" is_reblog="false" tumblelog="dummdida"><link-text>The Python GTK+ 3 Tutorial — Python GTK+ 3 Tutorial 3.4 documentation</link-text><link-url>http://python-gtk-3-tutorial.readthedocs.org/</link-url><tag>fedora</tag><tag>gtk3</tag><tag>python</tag></post><post id="97884854225" url="https://dummdida.tumblr.com/post/97884854225" url-with-slug="https://dummdida.tumblr.com/post/97884854225" type="regular" date-gmt="2014-09-19 12:59:00 GMT" date="Fri, 19 Sep 2014 14:59:00" unix-timestamp="1411131540" format="markdown" reblog-key="g4ttQLh6" slug="" state="published" is_reblog="false" tumblelog="dummdida"><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/michasfotos/4554971521" title="Fake Tilt Shift - Bremen by Micha, on Flickr"&gt;&lt;img src="https://farm4.staticflickr.com/3384/4554971521_841bc24aee_z.jpg" width="640" height="480" alt="Fake Tilt Shift - Bremen"/&gt;&lt;/a&gt;&lt;/p&gt;</regular-body><tag>bremen</tag><tag>tiltshift</tag></post><post id="97882897670" url="https://dummdida.tumblr.com/post/97882897670" url-with-slug="https://dummdida.tumblr.com/post/97882897670/ovirt-node-and-foreman-reminder" type="regular" date-gmt="2014-09-19 12:10:00 GMT" date="Fri, 19 Sep 2014 14:10:00" unix-timestamp="1411128600" format="markdown" reblog-key="1S8YN7Bo" slug="ovirt-node-and-foreman-reminder" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>oVirt Node and Foreman reminder</regular-title><regular-body>&lt;p&gt;netbulae noticed, that the following snippet can be used during an oVirt Node auto-installation to prevent continous reboots:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local_boot_trigger=http://foreman.example.com/unattended/built?token=&amp;lt;%= @host.token %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local_boot_trigger=&amp;lt;%= foreman_url("built") %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That will tell Node to call this URL after the auto-install, calling that URL tells Foreman to disable PXE boto for that host.&lt;/p&gt;

&lt;p&gt;Reminder: Take care to adjust the FQDN of your foeman instance in that URL above.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>foreman</tag><tag>pxe</tag></post><post id="97639383890" url="https://dummdida.tumblr.com/post/97639383890" url-with-slug="https://dummdida.tumblr.com/post/97639383890/seeing-our-always-popular-to-be-bought-friend-suse" type="regular" date-gmt="2014-09-16 09:58:44 GMT" date="Tue, 16 Sep 2014 11:58:44" unix-timestamp="1410861524" format="markdown" reblog-key="gMeWBJRJ" slug="seeing-our-always-popular-to-be-bought-friend-suse" state="published" is_reblog="false" tumblelog="dummdida"><regular-body>&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/de/thumb/d/dc/SUSE_Linux_GmbH_Logo.svg/539px-SUSE_Linux_GmbH_Logo.svg.png" alt="SuSE logo"/&gt;&lt;/p&gt;

&lt;p&gt;Seeing our always popular-to-be-bought friend SuSE beeing &lt;a href="http://uk.reuters.com/article/2014/09/15/uk-micro-focus-inte-attachment-idUKKBN0HA0DN20140915"&gt;sold again&lt;/a&gt;. I wonder what&amp;rsquo;s left of the it&amp;rsquo;s core and values …&lt;/p&gt;</regular-body><tag>fedora</tag><tag>suse</tag><tag>friend</tag></post><post id="97209663225" url="https://dummdida.tumblr.com/post/97209663225" url-with-slug="https://dummdida.tumblr.com/post/97209663225/a-beautiful-renderer-seen-in-action-at" type="photo" date-gmt="2014-09-11 10:04:02 GMT" date="Thu, 11 Sep 2014 12:04:02" unix-timestamp="1410429842" format="markdown" reblog-key="4oR9iUXn" slug="a-beautiful-renderer-seen-in-action-at" state="published" is_reblog="false" tumblelog="dummdida" width="1920" height="501"><photo-caption>&lt;p&gt;A &lt;a href="https://geodienste.lyrk.de/"&gt;beautiful renderer&lt;/a&gt;, seen in action at &lt;a href="https://graphhopper.com/maps/"&gt;https://graphhopper.com/maps/&lt;/a&gt; - which is quite good btw.&lt;/p&gt;</photo-caption><photo-url max-width="1280">https://66.media.tumblr.com/e42c7b4670d90a18e831803fce70b185/tumblr_nbqemqFlkp1st6sz0o1_1280.png</photo-url><photo-url max-width="500">https://66.media.tumblr.com/e42c7b4670d90a18e831803fce70b185/tumblr_nbqemqFlkp1st6sz0o1_500.png</photo-url><photo-url max-width="400">https://66.media.tumblr.com/e42c7b4670d90a18e831803fce70b185/tumblr_nbqemqFlkp1st6sz0o1_400.png</photo-url><photo-url max-width="250">https://66.media.tumblr.com/e42c7b4670d90a18e831803fce70b185/tumblr_nbqemqFlkp1st6sz0o1_250.png</photo-url><photo-url max-width="100">https://66.media.tumblr.com/e42c7b4670d90a18e831803fce70b185/tumblr_nbqemqFlkp1st6sz0o1_100.png</photo-url><photo-url max-width="75">https://66.media.tumblr.com/e42c7b4670d90a18e831803fce70b185/tumblr_nbqemqFlkp1st6sz0o1_75sq.png</photo-url><tag>osm</tag><tag>fedora</tag><tag>lyrk</tag></post><post id="97209386530" url="https://dummdida.tumblr.com/post/97209386530" url-with-slug="https://dummdida.tumblr.com/post/97209386530/markdown-and-footnotes" type="regular" date-gmt="2014-09-11 09:55:00 GMT" date="Thu, 11 Sep 2014 11:55:00" unix-timestamp="1410429300" format="markdown" reblog-key="1fA7uip1" slug="markdown-and-footnotes" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Markdown and footnotes</regular-title><regular-body>&lt;p&gt;It seems that footnotes can be easily used in markdown (yey!):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_Needless to say[^say] to much._
[^say]: Everything has been said.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;becomes&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Needless to say&lt;sup id="fnref:say"&gt;&lt;a href="#fn:say" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt; to much.&lt;/em&gt;&lt;/p&gt;

&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;&lt;ol&gt;&lt;li id="fn:say" role="doc-endnote"&gt;
&lt;p&gt;Everything has been said. &lt;a href="#fnref:say" class="footnote-backref" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;&lt;/div&gt;</regular-body><tag>tumblr</tag><tag>markdown</tag><tag>footnote</tag></post><post id="97208762630" url="https://dummdida.tumblr.com/post/97208762630" url-with-slug="https://dummdida.tumblr.com/post/97208762630/persistence" type="regular" date-gmt="2014-09-11 09:33:00 GMT" date="Thu, 11 Sep 2014 11:33:00" unix-timestamp="1410427980" format="markdown" reblog-key="CUFAHUSX" slug="persistence" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Persistence</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/blakeemrys/54713863" title="moss01 by Blake Emrys, on Flickr"&gt;&lt;img src="https://farm1.staticflickr.com/27/54713863_8017abe3ca.jpg" width="500" height="375" alt="moss01"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Persistence is a somewhat relevant topic for Node.&lt;sup id="fnref:imagepersistence"&gt;&lt;a href="#fn:imagepersistence" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;When I say persistence I&amp;rsquo;m talking about keeping the state of files between images. And the two aspects I want to speak about is &lt;em&gt;how&lt;/em&gt; files are persisted and &lt;em&gt;what&lt;/em&gt; files are persisted.&lt;/p&gt;

&lt;p&gt;Node is delivered as an image (now and in &lt;a href="http://dummdida.tumblr.com/post/97207385480/node-is-moving"&gt;future&lt;/a&gt;).
An update (a new rootfs) is also delivered as an image.
Migrating changes between the original image, and the updated image is what I call persistence.&lt;/p&gt;

&lt;h1&gt;Now&lt;/h1&gt;

&lt;p&gt;In the current Node persistence is implemented by keeping changed files on a writable partition, and bind mounting them at boot time into the target.
The persistence works with a white-list, so a user (or package) needs to name all files which need to be persisted.
A drawback of this approach is, that the bind-mounts are not available in the early boto stages.
The problem can be illustrated if you think about persisting a modified &lt;code&gt;/etc/fstab&lt;/code&gt; or new (3rd party) kernel modules.
Additionally someone needs to determine the files which define the state of a component.&lt;/p&gt;

&lt;h1&gt;Then&lt;/h1&gt;

&lt;p&gt;For the future we are thinking about an approach where the whole root filesystem is writable&lt;sup id="fnref:readonlyroot"&gt;&lt;a href="#fn:readonlyroot" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;In addition to it beeing writable, we will be also booting into that filesystem. This makes it possible to&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Modify any file&lt;/li&gt;
&lt;li&gt;(which implies) Modify files which are relevant for the early boot process&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The key difference to the old approach is, that we can now modify the filesystem we use to boot.&lt;/p&gt;

&lt;h1&gt;How&lt;/h1&gt;

&lt;p&gt;Persistence then works by &lt;em&gt;migrating&lt;/em&gt; a file from the previous to the next image.
The migration can be a simple copy or similar to a 3-way merge. Maybe even both. Or more?
Independent of what strategy is choosen, he key fact remains: Persisting works by &lt;em&gt;migrating&lt;/em&gt; the old state, to the new image.&lt;/p&gt;

&lt;p&gt;Now we know &lt;em&gt;how&lt;/em&gt; we persist files, but it&amp;rsquo;s still the question &lt;em&gt;what&lt;/em&gt; files we need to be persist.&lt;/p&gt;

&lt;h1&gt;What&lt;/h1&gt;

&lt;p&gt;As said above, currently this works by whitelisting files.
This has the drawback that the user (or package/consumer) needs to be aware that it#s running on Node, and that is cumbersome to maintain, and not obvious to a user, why files need to be persisted.&lt;/p&gt;

&lt;p&gt;I anticipate something like &amp;ldquo;transparent&amp;rdquo; persistence for the next-gen Node. It should be transparent to the user/consumer that persistence is necessary, so Node should decide what files need to be persisted which not.&lt;/p&gt;

&lt;p&gt;Because Node will keep the original image, and a layer with the changed filesystem tree around, we can easily determine the changed files.&lt;/p&gt;

&lt;h2&gt;Greedy&lt;/h2&gt;

&lt;p&gt;A clear option is to migrate all of the changed files to a new (updated) image. This approach is greedy: Each file that has been touched is copied from one image to the next. This will result in many changes which are moved from one image to another.
We need something smarter. And there is more than one option.&lt;/p&gt;

&lt;h2&gt;File&lt;/h2&gt;

&lt;p&gt;We could use file-level white-listing like we do today.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perists /etc/passwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s very selective, but needs a lot of maintenance.&lt;/p&gt;

&lt;h2&gt;Package&lt;/h2&gt;

&lt;p&gt;Besides doing it on a file level, we can also do it on the package level.
Two approaches: We can either name the package (and all of it&amp;rsquo;s files) to be persisted, or we can determine the package of a file, when the user tries to persist a file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ persist pkg vdsm

$ persist file /etc/passwd
Do you want to perists all changes to files of the package 'core-utils' instead of the single file '/etc/passwd'?
Yes/No/Maybe [Maybe]?
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Blacklist&lt;/h2&gt;

&lt;p&gt;Or we could just come up with a blacklist of paths which should not be persisted. Except when explicitly requested.&lt;/p&gt;

&lt;p&gt;These are a couple of options that come to my mind, I&amp;rsquo;m not yet sure how the final solution will look like. But I see use cases for all this ways. And the good is, the current infrastructure we plan, will support all of these approaches.&lt;/p&gt;

&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;&lt;ol&gt;&lt;li id="fn:imagepersistence" role="doc-endnote"&gt;
&lt;p&gt;it&amp;rsquo;s not only Node that needs persistence. It affects all &lt;a href="http://www.projectatomic.io/"&gt;projects&lt;/a&gt; which need to take care to keep the &lt;em&gt;customized state&lt;/em&gt; of a system. If the state is not kept, then we are talking about &lt;em&gt;stateless&lt;/em&gt;. &lt;a href="#fnref:imagepersistence" class="footnote-backref" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn:readonlyroot" role="doc-endnote"&gt;
&lt;p&gt;Currently the root filesystem is read-only, and only parts are made writable using tmpfs and bind-mounts to writable partitions &lt;a href="#fnref:readonlyroot" class="footnote-backref" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;&lt;/div&gt;</regular-body><tag>node</tag><tag>persistence</tag><tag>fedora</tag><tag>atomic</tag></post><post id="97207490830" url="https://dummdida.tumblr.com/post/97207490830" url-with-slug="https://dummdida.tumblr.com/post/97207490830/47-securing-virtual-private-networks-vpns" type="link" date-gmt="2014-09-11 08:48:00 GMT" date="Thu, 11 Sep 2014 10:48:00" unix-timestamp="1410425280" format="markdown" reblog-key="BqPh3m6P" slug="47-securing-virtual-private-networks-vpns" state="published" is_reblog="false" tumblelog="dummdida"><link-text>4.7. Securing Virtual Private Networks (VPNs)</link-text><link-url>https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Securing_Virtual_Private_Networks.html</link-url><link-description>&lt;p&gt;For long it was on my list to gget started with &lt;a href="http://libreswan.org"&gt;libreswan&lt;/a&gt; (part of Fedora) and created some ipsec tunnel between hosts.&lt;/p&gt;

&lt;p&gt;It turns out that configuring libreswan is &lt;em&gt;much&lt;/em&gt; easier than configuring the kame ipsec tools.&lt;/p&gt;

&lt;p&gt;The link above is a good starting point, it can also be applied to &lt;a href="https://www.archlinux.org/"&gt;arch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now I just need to find a way of how to distribute a key via mdns.&lt;/p&gt;</link-description><tag>fedora</tag><tag>arch</tag><tag>ipsec</tag><tag>libreswan</tag></post><post id="97207385480" url="https://dummdida.tumblr.com/post/97207385480" url-with-slug="https://dummdida.tumblr.com/post/97207385480/node-is-moving" type="regular" date-gmt="2014-09-11 08:44:00 GMT" date="Thu, 11 Sep 2014 10:44:00" unix-timestamp="1410425040" format="markdown" reblog-key="bbdGP2ba" slug="node-is-moving" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Node is moving.</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/wscullin/3770015203" title="Blueprint by Will Scullin, on Flickr"&gt;&lt;img src="https://farm4.staticflickr.com/3449/3770015203_9cb9aa2188.jpg" width="500" height="333" alt="Blueprint"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We visited &lt;a href="http://"&gt;project atomic&lt;/a&gt; and the &lt;a href="http://"&gt;btrfs idea of the systemd cabal&lt;/a&gt;. The first does not really fit and has issues in our usecase, the latter is very bleeding edge. We visited them to evaluate them for the next-gen &lt;a href="http://www.ovirt.org/Node"&gt;Node&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But before we come to approaches, let&amp;rsquo;s take a brief look at &lt;em&gt;some&lt;/em&gt; issues.
Node is everything. An image, an installer, a configuration UI, a way of how a system can run. And that makes it hard to develop, maintain, test and cumbersome to use. But I should note that it is doing it&amp;rsquo;s job well, beeing stable at runtime.&lt;/p&gt;

&lt;p&gt;We believe that Node can be improved if we delegate responsibilities to individual (existing) components. A drawback of this will be that removing the high integration and going over to a more modular approach will likely increase the size of the currently very small (~250MB) image.&lt;/p&gt;

&lt;p&gt;In the next generation of Node, we are looking at the components to be used in parts of Node&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="https://fedoraproject.org/wiki/Anaconda"&gt;anaconda&lt;/a&gt; to replace our own installer,&lt;/li&gt;
&lt;li&gt;&lt;a href="http://puppetlabs.com/blog/deploying-puppet-in-client-server-standalone-and-massively-scaled-environments"&gt;puppet&lt;/a&gt; to do the system configuration (locally and central) instead of using our own classes,&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fedorahosted.org/lorax/"&gt;livemedia-creator&lt;/a&gt; (oz/imagefactory) to build the appliance (and iso), and&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/fabiand/imgbased"&gt;imgbased&lt;/a&gt; to take care of persistence and multiple-images.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It is not yet set in stone. But the investigations we do are looking promising. And not everything will change: Likely we&amp;rsquo;ll keep our &lt;code&gt;ovirt-node-setup&lt;/code&gt; TUI (but we are also having an eye on anaconda&amp;rsquo;s &lt;code&gt;initial-setup&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The outcome we expect is&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;less installer problems and maintenance burden as we rely on anaconda&lt;/li&gt;
&lt;li&gt;less configuraiton bugs as we reuse the well maintained puppet classes, and can also contribute to them&lt;/li&gt;
&lt;li&gt;less build problems because livemdia-creator is running the builds in isolated VMs&lt;/li&gt;
&lt;li&gt;better runtime experience for users, because the filesystem will be writable&lt;/li&gt;
&lt;li&gt;easier to integrate 3rd parties, because we aim to make the persistence transparent&lt;/li&gt;
&lt;li&gt;better testability by delegating responsibilities&lt;/li&gt;
&lt;li&gt;more distro agnostic&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The biggest drawback will be the increased size. We don&amp;rsquo;t know yet where we will land, but lets throw 1 GB into the air.
We will also - obviously - be much more dependent on other components - but we don&amp;rsquo;t fear that.&lt;/p&gt;

&lt;p&gt;Much to come, and we are just starting. If you want to join, reach out to us on irc://irc.oftc.net/#ovirt or irc://irc.freenode.net/#ovirt-node.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>anaconda</tag><tag>lorax</tag><tag>puppet</tag><tag>fedora</tag></post><post id="96355665290" url="https://dummdida.tumblr.com/post/96355665290" url-with-slug="https://dummdida.tumblr.com/post/96355665290/weint-eigentlich-noch-jemand-der-glühbirne" type="quote" date-gmt="2014-09-01 13:38:07 GMT" date="Mon, 01 Sep 2014 15:38:07" unix-timestamp="1409578687" format="markdown" reblog-key="zFaPUfpd" slug="weint-eigentlich-noch-jemand-der-glühbirne" state="published" is_reblog="false" tumblelog="dummdida"><quote-text>Weint eigentlich noch jemand der Glühbirne hinterher? Ich jedenfalls nicht, angesichts der rasanten Fortschritte der LED-Hersteller. Als ich vor vier oder fünf Jahren meine erste LED-Birne für stolze 35 Euro gekauft habe, kam ich mir noch ziemlich verarscht vor: Das Ding verbrauchte zwar kaum Strom, produzierte dafür aber auch kaum Licht. Nicht einmal als Leselampe taugte es etwas. Heute habe ich wunderbare 6-Watt-LEDs für unter zehn Euro, die ähnlich warmes Licht abgeben wie eine herkömmliche matte 40-Watt-Birne. Ob es ohne Glühbirnenverbot eine ähnliche Entwicklung gegeben hätte? Darüber kann ich nur spekulieren. Geschadet haben dürfte es jedenfalls nicht.</quote-text><quote-source>Source: &lt;a href="http://heise.de/-2305503"&gt;http://heise.de/-2305503&lt;/a&gt;</quote-source></post><post id="94529490130" url="https://dummdida.tumblr.com/post/94529490130" url-with-slug="https://dummdida.tumblr.com/post/94529490130/gerrits-rest-api" type="regular" date-gmt="2014-08-12 12:42:00 GMT" date="Tue, 12 Aug 2014 14:42:00" unix-timestamp="1407847320" format="markdown" reblog-key="PPf4FGNi" slug="gerrits-rest-api" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Gerrit's REST API</regular-title><regular-body>&lt;p&gt;Gerrit has a nice &lt;a href="http://gerrit-review.googlesource.com/Documentation/rest-api.html"&gt;REST API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had the need to quickly check if a change was merged or not, it turned out to be quite easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while read CHANGE ; do curl "gerrit.ovirt.org/changes/ovirt-node~master~$CHANGE" ; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That way I just had to paste the change-id into the terminal and quickly got my response.&lt;/p&gt;</regular-body><tag>gerrit</tag><tag>git</tag><tag>fedora</tag><tag>ovirt</tag><tag>node</tag></post><post id="93671429385" url="https://dummdida.tumblr.com/post/93671429385" url-with-slug="https://dummdida.tumblr.com/post/93671429385/bookzilla-instead-of-amazon" type="regular" date-gmt="2014-08-03 10:34:40 GMT" date="Sun, 03 Aug 2014 12:34:40" unix-timestamp="1407062080" format="markdown" reblog-key="RhjeZpLY" slug="bookzilla-instead-of-amazon" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>bookzilla instead of amazon</regular-title><regular-body>&lt;p&gt;This is nothing new, actually uncovered last year already. But today I just saw it again, and some aspects are just not what I want to support with my kaufkraft/buying power. And that is actually our - consumers - best weapon: Where we spend our money.&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/l8pX-mX4fMw?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;So, time to re-activate my bookzilla account, which is also supporting F/LOSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.bookzilla.de"&gt;&lt;img src="https://media.shop-asp.de/shop/magazine-pictures/bookzilla_neu_200_0.gif" alt="Bookzilla"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is surely the possibility of using those sub-shops of amazon which also support F/LOSS, but those sub-shops will still use amazon&amp;rsquo;s infrastructure and &amp;ldquo;huma ressources&amp;rdquo;, which ain&amp;rsquo;t what I want.&lt;/p&gt;

&lt;p&gt;But I must admit that I am not sure how the workers at libri/bookzilla are treated.&lt;/p&gt;</regular-body><tag>amazon</tag><tag>bookzilla</tag><tag>floss</tag><tag>libri</tag></post><post id="92817739200" url="https://dummdida.tumblr.com/post/92817739200" url-with-slug="https://dummdida.tumblr.com/post/92817739200/more" type="video" date-gmt="2014-07-25 10:25:28 GMT" date="Fri, 25 Jul 2014 12:25:28" unix-timestamp="1406283928" format="markdown" reblog-key="QJ7JLbwk" slug="more" state="published" is_reblog="false" tumblelog="dummdida"><video-source>http://vimeo.com/100988314</video-source><video-caption>&lt;p&gt;More: &lt;a href="http://binairytalk.niklas-isselburg.com/?page_id=31"&gt;http://binairytalk.niklas-isselburg.com/?page_id=31&lt;/a&gt;&lt;/p&gt;</video-caption><video-player>&lt;iframe src="https://player.vimeo.com/video/100988314?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="400" height="225" frameborder="0" title="BINAIRY TALK" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe src="https://player.vimeo.com/video/100988314?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="500" height="281" frameborder="0" title="BINAIRY TALK" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe src="https://player.vimeo.com/video/100988314?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="250" height="141" frameborder="0" title="BINAIRY TALK" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player><tag>video</tag></post><post id="92623586320" url="https://dummdida.tumblr.com/post/92623586320" url-with-slug="https://dummdida.tumblr.com/post/92623586320/mozillas-cargo-and-travis-ci-well-integrated" type="link" date-gmt="2014-07-23 10:58:30 GMT" date="Wed, 23 Jul 2014 12:58:30" unix-timestamp="1406113110" format="markdown" reblog-key="xjf9T6Ll" slug="mozillas-cargo-and-travis-ci-well-integrated" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Mozilla's Cargo and Travis CI well integrated</link-text><link-url>https://github.com/alexcrichton/rust-compress/blob/master/.travis.yml</link-url><link-description>&lt;blockquote class="link_og_blockquote"&gt;rust-compress - Various compression algorithms written in rust.&lt;/blockquote&gt;

&lt;p&gt;This .&lt;code&gt;travis.yml&lt;/code&gt; actually shows how easy &lt;a href="https://travis-ci.org/alexcrichton/rust-compress"&gt;CI&lt;/a&gt; can be &amp;ndash; on simple packages, nothing like (Node)[http://www.ovirt.org/Node].&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install:
  - curl &lt;a href="http://www.rust-lang.org/rustup.sh"&gt;http://www.rust-lang.org/rustup.sh&lt;/a&gt; | sudo sh -
script:
  - cargo build --verbose
  - cargo test --verbose
  - rustdoc --test src/lib.rs -L target
env:
  - LD_LIBRARY_PATH=/usr/local/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Source: &lt;a href="https://github.com/alexcrichton/rust-compress/blob/master/.travis.yml"&gt;https://github.com/alexcrichton/rust-compress/blob/master/.travis.yml&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</link-description><tag>rust</tag><tag>cargo</tag><tag>travis ci</tag></post><post id="92045138180" url="https://dummdida.tumblr.com/post/92045138180" url-with-slug="https://dummdida.tumblr.com/post/92045138180/missing-computing-device-manufaktur" type="regular" date-gmt="2014-07-17 12:54:33 GMT" date="Thu, 17 Jul 2014 14:54:33" unix-timestamp="1405601673" format="markdown" reblog-key="Nb2Wtueq" slug="missing-computing-device-manufaktur" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Missing Computing Device Manufaktur</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/marcelschrom/3147972112/" title="Goldene Herrentaschenuhr Nr. 1613 von MarcelS bei Flickr"&gt;&lt;img src="https://farm4.staticflickr.com/3262/3147972112_3cdd42a3b7.jpg" width="500" height="337" alt="Goldene Herrentaschenuhr Nr. 1613"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not really sad, but I wonder: Where are the people and companies caring about decent computing hardware. I mean shiny, stylish laptops, solidly build, reliable, durable, and maybe not &lt;a href="http://www.intel.cmo"&gt;beef&lt;/a&gt;, but &lt;a href="http://www.amd.com"&gt;tofu&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We know that &lt;a href="http://www.apple.com"&gt;one&lt;/a&gt; … who was it … vendor. But that can not be everything. &lt;a href="http://www.samsung.com"&gt;Many&lt;/a&gt; &lt;a href="http://www.lenovo.com"&gt;others&lt;/a&gt; make devices, but they lack &lt;em&gt;it&lt;/em&gt; - the bit which makes a device perfect, different, fitting, the thing you want.&lt;/p&gt;

&lt;p&gt;Can it be that hard?&lt;/p&gt;

&lt;p&gt;The mobile world is showing that smalld evices can also be done by small &amp;ldquo;&lt;em&gt;Manufakturen&lt;/em&gt;&amp;rdquo;. &lt;a href="http://www.geeksphone.com"&gt;Geekpshone&lt;/a&gt;, &lt;a href="http://www.jolla.com"&gt;Jolla&lt;/a&gt;, and &lt;a href="http://www.fairphone.com"&gt;Fairphone&lt;/a&gt; are just three examples of small vendors which build decent hardware.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>laptop</tag><tag>amd</tag><tag>intel</tag><tag>apple</tag><tag>adore</tag><tag>hardware</tag></post><post id="92037159315" url="https://dummdida.tumblr.com/post/92037159315" url-with-slug="https://dummdida.tumblr.com/post/92037159315/anaconda-addon-development-guide" type="link" date-gmt="2014-07-17 09:40:49 GMT" date="Thu, 17 Jul 2014 11:40:49" unix-timestamp="1405590049" format="markdown" reblog-key="4FWsAiBE" slug="anaconda-addon-development-guide" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Anaconda Addon Development Guide</link-text><link-url>http://vpodzime.fedorapeople.org/anaconda-addon-development-guide/</link-url><link-description>&lt;blockquote&gt;
  &lt;p&gt;The Anaconda installer is a piece of software used to install Fedora, 
  RHEL and their derivatives. Since the installation is internally a 
  complicated process and there are many aspects of the resulting system 
  that need to be configured during installation it has been decided that the 
  Anaconda installer needs to support dynamically loaded plugins 
  (addons) that will be developed and maintained by other teams and 
  people specialized in certain areas. This guide should help those people 
  writting an Anaconda addon to get an insight to the architecture and 
  basic principles used by the Anaconda installer as well as an overview of 
  the API and helper functions provided.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ever wondered how to write addon&amp;rsquo;s for anaconda? Vratislav wrote it down for all of us!&lt;/p&gt;</link-description><tag>fedora</tag><tag>anaconda</tag><tag>link</tag><tag>ovirt</tag></post><post id="91741656270" url="https://dummdida.tumblr.com/post/91741656270" url-with-slug="https://dummdida.tumblr.com/post/91741656270/weekly-ovirt-engine-virtual-appliance-builds" type="regular" date-gmt="2014-07-14 13:03:16 GMT" date="Mon, 14 Jul 2014 15:03:16" unix-timestamp="1405342996" format="markdown" reblog-key="uo3pHfEy" slug="weekly-ovirt-engine-virtual-appliance-builds" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Weekly oVirt Engine Virtual Appliance builds</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/rrrodrigo/9479858193/" title="Światło na końcu tunelu / Light at the end of the tunnel von Rrrodrigo bei Flickr"&gt;&lt;img src="https://farm4.staticflickr.com/3774/9479858193_e4cb6d31dd.jpg" width="500" height="333" alt="Światło na końcu tunelu / Light at the end of the tunnel"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally there are weekly Fedora 19 based oVirt Engine Appliance builds.&lt;/p&gt;

&lt;p&gt;They can be found in &lt;a href="http://jenkins.ovirt.org/view/All/job/ovirt-appliance_master_merged/"&gt;oVirt&amp;rsquo;s jenkins instance&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>ovirt</tag><tag>engine</tag><tag>appliance</tag></post><post id="91343759155" url="https://dummdida.tumblr.com/post/91343759155" url-with-slug="https://dummdida.tumblr.com/post/91343759155/if-you-want-to-use-copr-repos-then-you-want-to" type="regular" date-gmt="2014-07-10 10:31:27 GMT" date="Thu, 10 Jul 2014 12:31:27" unix-timestamp="1404988287" format="markdown" reblog-key="bGdsxnWr" slug="if-you-want-to-use-copr-repos-then-you-want-to" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>If you want to use Copr repos, then you want to use dnf as well</regular-title><regular-body>&lt;p&gt;It has never been easier to use a &lt;a href="http://copr.fedoraproject.org/"&gt;Copr&lt;/a&gt; repository with the &lt;a href="http://dnf.baseurl.org/2014/03/19/copr-plugin/"&gt;Copr plugin for dnf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To enable a copr repo on your local host you just need to run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnf copr enable bkabrda/python-3.4 fedora-20-x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you ain&amp;rsquo;t sure what repo to enable just try&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnf copr search rust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the repository is enabled, it is also available to the other yum/rpm based tools, like &lt;code&gt;yum&lt;/code&gt; and &lt;code&gt;pkcon&lt;/code&gt;.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>yum</tag><tag>pkcon</tag><tag>dnf</tag><tag>copr</tag></post><post id="91342527085" url="https://dummdida.tumblr.com/post/91342527085" url-with-slug="https://dummdida.tumblr.com/post/91342527085/caching-large-objects-and-repos-with-squid-easy" type="regular" date-gmt="2014-07-10 10:00:00 GMT" date="Thu, 10 Jul 2014 12:00:00" unix-timestamp="1404986400" format="markdown" reblog-key="JL7V6rEO" slug="caching-large-objects-and-repos-with-squid-easy" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Caching large objects and repos with Squid - Easy huh?</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/laughingsquid/4031499134/" title="Squid von Scott Beale bei Flickr"&gt;&lt;img src="https://farm3.staticflickr.com/2794/4031499134_d594346743.jpg" width="500" height="375" alt="Squid"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;… yes it is. But only if you take care that the &lt;em&gt;§$%&amp;amp;/()&lt;/em&gt; &lt;code&gt;maximum_object_size&lt;/code&gt; directive appears &lt;strong&gt;&lt;a href="http://squid-web-proxy-cache.1019090.n4.nabble.com/Problem-with-caching-larger-files-td4666004.html#a4666006"&gt;above/before&lt;/a&gt;&lt;/strong&gt; the &lt;code&gt;cache_dir&lt;/code&gt; directive.&lt;/p&gt;

&lt;p&gt;If you remember this, then &lt;a href="http://ma.ttwagner.com/lazy-distro-mirrors-with-squid/"&gt;Matt&amp;rsquo;s »Lazy distro mirrors with squid« tutorial&lt;/a&gt; is a great thing to lazily cache repos.&lt;/p&gt;

&lt;p&gt;Personally I took a slightly different approach. I edited &lt;code&gt;/etc/hosts&lt;/code&gt; to let &lt;code&gt;download.fedoraproject.org&lt;/code&gt; point to my proxy, and configured squid as a &lt;a href="http://wiki.squid-cache.org/ConfigExamples/Reverse/BasicAccelerator"&gt;reverse proxy&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;…

# Let the local proxy accelerate access to download.fp.o
http_port 80 accel defaultsite=download.fedoraproject.org no-vhost
# Tell squid where the origin is
cache_peer download.fedoraproject.org parent 80 0 no-query originserver name=myAccel

# REMEMBER the ORDER
maximum_object_size 5 GB
cache_dir ufs /var/spool/squid 20000 16 256

…

# Caching of rpms and isos 
refresh_pattern -i .rpm$ 129600 100% 129600 refresh-ims override-expire
refresh_pattern -i .iso$ 129600 100% 129600 refresh-ims override-expire
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Squid can be easily installed using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pkcon install squid
&lt;/code&gt;&lt;/pre&gt;</regular-body><tag>fedora</tag><tag>squid</tag><tag>yum</tag><tag>repo</tag><tag>caching</tag><tag>ovirt</tag></post><post id="90879359350" url="https://dummdida.tumblr.com/post/90879359350" url-with-slug="https://dummdida.tumblr.com/post/90879359350/mozillas-precompiled-rust-for-fedora" type="regular" date-gmt="2014-07-05 21:04:30 GMT" date="Sat, 05 Jul 2014 23:04:30" unix-timestamp="1404594270" format="markdown" reblog-key="059n0ZDs" slug="mozillas-precompiled-rust-for-fedora" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Mozilla's precompiled Rust for Fedora</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/aigle_dore/5677012485/" title="Rust von Moyan_Brenn bei Flickr"&gt;&lt;img src="https://farm6.staticflickr.com/5104/5677012485_2f7ac8c1e1.jpg" width="500" height="334" alt="Rust"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is still not easy to package rust for Fedora in the intended way, which includes using Fedora&amp;rsquo;s llvm and libuv.&lt;/p&gt;

&lt;p&gt;A much easier way which I now chose is to use the official &lt;a href="http://www.rust-lang.org/install.html"&gt;rust binaries&lt;/a&gt; and wrap them in an rpm.
This can then be build in &lt;a href="http://copr.fedoraproject.org/coprs/fabiand/rust-binary/"&gt;Copr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;rust-binary&lt;/code&gt; package includes the official release. The same method can also be used to create a &lt;code&gt;rust-nightly-binary&lt;/code&gt; which could deliver the precompiled rust nightlies.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s easy to enjoy rust on Fedora - especially with the lately discovered &lt;a href="http://rustbyexample.com/"&gt;Rust By Example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get started you just need to run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# We are using dnf's copr plugin, because it is - easy!
$ pkcon install dnf dnf-plugins-core

# Enable copr repo
$ sudo dnf copr enable fabiand/rust-binary

# Install rust-binary
$ pkcon refresh
$ pkcon install rust-binary

$ rustc --version
rustc 0.11.0 (aa1163b92de7717eb7c5eba002b4012e0574a7fe 2014-06-27 12:50:16 -0700)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note that the rpm only includes &lt;code&gt;rustc&lt;/code&gt; and &lt;code&gt;rustdoc&lt;/code&gt;, not &lt;code&gt;cargo&lt;/code&gt;, rust&amp;rsquo;s upcoming package manager.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>rust</tag><tag>copr</tag><tag>packagekit</tag><tag>pkcon</tag></post><post id="90876865655" url="https://dummdida.tumblr.com/post/90876865655" url-with-slug="https://dummdida.tumblr.com/post/90876865655/introduction-rust-by-example" type="link" date-gmt="2014-07-05 20:32:29 GMT" date="Sat, 05 Jul 2014 22:32:29" unix-timestamp="1404592349" format="markdown" reblog-key="DaEIUG5j" slug="introduction-rust-by-example" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Introduction | Rust by Example</link-text><link-url>http://rustbyexample.com/</link-url><link-description>&lt;blockquote&gt;
  &lt;p&gt;Rust is a programming language with a focus ontype safety, memory safety, concurrency and performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This site seems to be a nice walk-through through some of Rust&amp;rsquo;s aspects.&lt;/p&gt;</link-description><tag>rust</tag><tag>fedora</tag></post><post id="90734487945" url="https://dummdida.tumblr.com/post/90734487945" url-with-slug="https://dummdida.tumblr.com/post/90734487945/draft-dukhovni-opportunistic-security-00" type="link" date-gmt="2014-07-04 06:09:08 GMT" date="Fri, 04 Jul 2014 08:09:08" unix-timestamp="1404454148" format="markdown" reblog-key="Fn9ARPPK" slug="draft-dukhovni-opportunistic-security-00" state="published" is_reblog="false" tumblelog="dummdida"><link-text>draft-dukhovni-opportunistic-security-00 - Opportunistic Security: some protection most of the time</link-text><link-url>https://tools.ietf.org/html/draft-dukhovni-opportunistic-security-00</link-url><tag>oe</tag><tag>opportunistic encryption</tag></post><post id="89891532795" url="https://dummdida.tumblr.com/post/89891532795" url-with-slug="https://dummdida.tumblr.com/post/89891532795/html5-webrtc-sites" type="regular" date-gmt="2014-06-25 20:40:41 GMT" date="Wed, 25 Jun 2014 22:40:41" unix-timestamp="1403728841" format="markdown" reblog-key="oVZR0Cz1" slug="html5-webrtc-sites" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>html5 webrtc sites</regular-title><regular-body>&lt;p&gt;&lt;a href="http://palava.tv"&gt;http://palava.tv&lt;/a&gt; and &lt;a href="http://talky.io"&gt;http://talky.io&lt;/a&gt; are two places to communicate.&lt;/p&gt;</regular-body><tag>webrtc</tag><tag>firefox</tag><tag>talky</tag><tag>palava</tag></post><post id="89886713590" url="https://dummdida.tumblr.com/post/89886713590" url-with-slug="https://dummdida.tumblr.com/post/89886713590/there-are-a-few-findings-that-stand-out" type="quote" date-gmt="2014-06-25 19:47:15 GMT" date="Wed, 25 Jun 2014 21:47:15" unix-timestamp="1403725635" format="markdown" reblog-key="gMGQi3ak" slug="there-are-a-few-findings-that-stand-out" state="published" is_reblog="false" tumblelog="dummdida"><quote-text>[…] there are a few findings that stand out: Build frequency and developer (in)experience don&amp;rsquo;t affect failure rates, most build errors are dependency-related, […]</quote-text><quote-source>Source: &lt;a href="http://www.itworld.com/big-data/424262/why-software-builds-fail"&gt;http://www.itworld.com/big-data/424262/why-software-builds-fail&lt;/a&gt;</quote-source><tag>fedora</tag><tag>automation</tag><tag>ovirt</tag><tag>node</tag><tag>jenkins</tag></post><post id="89051342705" url="https://dummdida.tumblr.com/post/89051342705" url-with-slug="https://dummdida.tumblr.com/post/89051342705/taking-a-look-at-the-rootfs-footprint-of-a-livecd" type="regular" date-gmt="2014-06-17 11:56:54 GMT" date="Tue, 17 Jun 2014 13:56:54" unix-timestamp="1403006214" format="markdown" reblog-key="kGr9ohlF" slug="taking-a-look-at-the-rootfs-footprint-of-a-livecd" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Taking a look at the rootfs footprint of a LiveCD and a disk (image)</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/nasamarshall/7973820086/" title="Archive: First Footprint on the Moon (NASA, Marshall, 07/69) von NASA's Marshall Space Flight Center bei Flickr"&gt;&lt;img src="https://farm9.staticflickr.com/8316/7973820086_ab7a9a2b57.jpg" width="275" height="248" alt="Archive: First Footprint on the Moon (NASA, Marshall, 07/69)"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides the details about Node&amp;rsquo;s memory footprint, it was also intersting to see how much space we gain form the rootfs by our minimization efforts.&lt;/p&gt;

&lt;p&gt;The idea is to take a recent oVirt Node image, and compare some stats of it, to the stats of a regular image, build using the &lt;code&gt;@core&lt;/code&gt; group.&lt;/p&gt;

&lt;p&gt;The two points I investigated are:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;How does the minimization affect the number of packages?&lt;/li&gt;
&lt;li&gt;How does the minimization affect the space requirements?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;first one was addressed by counting the number of installed packages (&lt;code&gt;rpm&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the second one was addressed by

&lt;ul&gt;&lt;li&gt;Summing up the reported size of the installed packages (&lt;code&gt;rpm&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Determining the disk space in use (&lt;code&gt;df&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Because &lt;a href="http://libguestfs.org/"&gt;guestfish'ing&lt;/a&gt; into a LiveCD is tiresome, I created &lt;a href="https://gist.github.com/fabiand/48fa450d84591f7b4454"&gt;this script&lt;/a&gt; to gather the stats for me. Additionally it&amp;rsquo;s nice to have a tool by hand to create reproducable results.&lt;/p&gt;

&lt;p&gt;The results are - once again - interesting.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bash img-stats.sh ovirt-node-iso-scratch.iso runtime-layout.img
Image: ovirt-node-iso-scratch.iso
ImageSize: 197.00 MB
in_node
  NumPkgs:    449
  SizePkgs:   867.50 MB
  SizeRootfs: 564.97 MB

Image: runtime-layout.img
ImageSize: 1543.63 MB
in_imgbased
  NumPkgs:    490
  SizePkgs:   1071.67 MB
  SizeRootfs: 1323.57 MB

DiffNum: -41
DiffSizePkgs: -204.17
DiffSizeRootfs: -758.60
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What do we see here?&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;We see that the plain rootfs has 41 additional packages installed. Or the other way round: 41 packages are  blacklisted on the LiveCD.&lt;/li&gt;
&lt;li&gt;The sum of reported rpm sizes is ~200 MB higher on the plain rootfs than on the livecd&lt;/li&gt;
&lt;li&gt;The disk usage on the plain rootfs is ~760 MB higher than on the livecd&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Especially the last two points indicate that the file based blacklisting is actually responsible for freeing up so much space.&lt;/p&gt;

&lt;p&gt;This is just a rough estimate. More time needs to be spend on investigating the details of this differences.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>node</tag><tag>livecd</tag><tag>rootfs</tag><tag>minimization</tag><tag>libguestfs</tag></post><post id="88952357625" url="https://dummdida.tumblr.com/post/88952357625" url-with-slug="https://dummdida.tumblr.com/post/88952357625/taking-a-look-at-the-memory-footprint-of-a-livecd" type="regular" date-gmt="2014-06-16 12:29:00 GMT" date="Mon, 16 Jun 2014 14:29:00" unix-timestamp="1402921740" format="markdown" reblog-key="zy3yPFMP" slug="taking-a-look-at-the-memory-footprint-of-a-livecd" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Taking a look at the memory footprint of a LiveCD and a disk (image)</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/jonmcgovern/4523517597/" title="A memory von Jon McGovern bei Flickr"&gt;&lt;img src="https://farm5.staticflickr.com/4065/4523517597_5ef1049eac.jpg" width="500" height="291" alt="A memory"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Minimization is a hot topic for &lt;a href="http://www.ovirt.org/Node"&gt;oVirt Node&lt;/a&gt; - mainly to reduce the size of the resulting rootfs (and livecd) image.&lt;/p&gt;

&lt;p&gt;This time the question was how large the memory footprint of Node actually is.&lt;/p&gt;

&lt;p&gt;The method for measurement was rough:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Boot into the image and run &lt;code&gt;free -m&lt;/code&gt; on the console to find out the memory usage&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;df -h&lt;/code&gt; to determine the rootfs size&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;LiveCD&lt;/strong&gt;
Looking at some recent ovirt-node-iso image, which has a LiveCD size of 205MB and a rootfs size of 565MB, had a memory footprint (usage) of 626MB right after booting into the installer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;plain rootfs&lt;/strong&gt;
For comparison I took an image used for &lt;a href="http://www.github.com/fabiand/imgbased"&gt;imgbased&lt;/a&gt;. That image had a rootfs size of 1.2GB.
That image actually had a memory footprint right after boot of 192MB.&lt;/p&gt;

&lt;p&gt;The interesting bit with&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;the livecd is that mere 626MB are required to boot into the 565MB large rootfs.&lt;/li&gt;
&lt;li&gt;the rootfs is that 192MB are required to boot into the 1.2GB large rootfs.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So where does the difference come from? Actually the squashfs containing the rootfs on the LiveCD needs to be extracted, before it can be booted. This is done by dracut using device-mapper.
So all 565MB are pushed into RAM before the boot can continue.&lt;/p&gt;

&lt;p&gt;So we learned that squashing the rootfs reduces the &amp;ldquo;deployment size&amp;rdquo;, but results in a larger memory overhead at runtime (at least if the squashfs is used).&lt;/p&gt;

&lt;p&gt;The plain rootfs does not need to be uncompressed before it can be used, that is why much less memory is used at runtime. But the delivery size is much larger.&lt;/p&gt;

&lt;p&gt;Dear Lazyweb, do you know how I can see the number of pages or size of memory claimed by the squashfs module and/or the device-mapper in memory vodoo?&lt;/p&gt;</regular-body><tag>fedora</tag><tag>node</tag><tag>ovirt</tag><tag>memory</tag><tag>comaprison</tag><tag>footprint</tag></post><post id="88944206100" url="https://dummdida.tumblr.com/post/88944206100" url-with-slug="https://dummdida.tumblr.com/post/88944206100/say-hello-to-the-ovirt-engine-virtual-appliance" type="regular" date-gmt="2014-06-16 09:16:00 GMT" date="Mon, 16 Jun 2014 11:16:00" unix-timestamp="1402910160" format="markdown" reblog-key="DSdZ64aO" slug="say-hello-to-the-ovirt-engine-virtual-appliance" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Say Hello to the oVirt Engine Virtual Appliance</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/quikchange/1381233732/" title="Virtual Appliance von Random Tony bei Flickr"&gt;&lt;img src="https://farm2.staticflickr.com/1399/1381233732_39d16017fa.jpg" width="500" height="375" alt="Virtual Appliance"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the things on the list for oVirt 3.5 was the
&lt;a href="http://www.ovirt.org/Feature/oVirtAppliance"&gt;oVirt Virtual Appliance&lt;/a&gt;.
&lt;em&gt;Huh, what&amp;rsquo;s that?&lt;/em&gt; You might ask. Well, imagine a cloud image with oVirt
Engine 3.5 and it&amp;rsquo;s dependencies pre-installed, and a sane default answer file
for &lt;code&gt;ovirt-engine-setup&lt;/code&gt;. All of this delivered in an OVA file.
The intention is to get you a running oVirt Engine without much hassle.&lt;/p&gt;

&lt;p&gt;Furthermore this appliance can be used in conjunction with
the &lt;a href="http://www.ovirt.org/Features/Self_Hosted_Engine"&gt;Self Hosted Engine&lt;/a&gt; feature,
and the upcoming &lt;a href="http://www.ovirt.org/Node_Hosted_Engine"&gt;oVirt Node Hosted Engine plugin&lt;/a&gt;
(note the &lt;em&gt;Node&lt;/em&gt; within).&lt;/p&gt;

&lt;p&gt;Just as a reminder to myself: Hosted Engine is a feature
where a VM containing the oVirt Engine instance is managed by itself.&lt;/p&gt;

&lt;p&gt;As you can find more informations about the oVirt Hosted Engine and
oVirt Node Hosted Engine elsewhere, let me just drop a couple of words on the
appliance.&lt;/p&gt;

&lt;p&gt;The appliance is based on the Fedora 19 cloud images, with some modifications
and oVirt Engine packages pre-installed. An answer file can be used as a
starting point for &lt;code&gt;engine-setup&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Quick Guide&lt;/h2&gt;

&lt;p&gt;Build &lt;del&gt;Download&lt;/del&gt; the appliance yourself&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Get the sources
$ git clone git://gerrit.ovirt.org/ovirt-appliance
$ cd ovirt-appliance
$ git submodule update --init
$ cd engine-appliance

# To only build the `.raw` image use:
$ make ovirt-appliance-fedora.raw

# And run the image:
$ qemu-kvm -snapshot -m 4096 -smp 4 -hda ovirt-appliance-fedora.raw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the VM:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Wait a bit&lt;/li&gt;
&lt;li&gt;Finish the &lt;code&gt;initial-setup&lt;/code&gt; (set a root password and optionally add a user)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ engine-setup --config-append=ovirt-engine-answers
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Building the virtual appliance&lt;/h2&gt;

&lt;p&gt;To build the appliance you need three ingredients:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;The appliance kickstarts (kept in the ovirt-appliance repo)&lt;/li&gt;
&lt;li&gt;A Fedora 19 boot.iso (or the netinstall iso)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lorax&lt;/code&gt; and &lt;code&gt;pykickstart&lt;/code&gt; installed&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The build process can then be initiated by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yum install lorax pykickstart
$ git clone git://gerrit.ovirt.org/ovirt-appliance
$ cd ovirt-appliance
$ git submodule update --init
$ cd engine-appliance

# Build the .ova
$ make

# Or: To only build the `.raw` image (without sparsification/sysprep) use:
$ make ovirt-appliance-fedora.raw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;.ova&lt;/code&gt; build will actually go through the following steps:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Create a kickstart from the provided template&lt;/li&gt;
&lt;li&gt;Pass the boot iso and kickstart to &lt;code&gt;livemedia-creator&lt;/code&gt; (part of &lt;code&gt;lorax&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;sysprep, resize, sparsify and convert the intermediate image to OVA&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;code&gt;.ova&lt;/code&gt; file now contains some metadata and the qcow2 image, to extarct the
image run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir out ; cd out
$ tar xf ../ovirt-appliance-fedora.ova

# Run the image:
$ qemu-kvm -snapshot -m 4096 -smp 4 -hda images/*/!(*.meta)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Running the virtual appliance&lt;/h2&gt;

&lt;p&gt;Once the image is build - an image called &lt;code&gt;ovirt-appliance-fedora.ova&lt;/code&gt; should
be in your working directory - you can point &lt;code&gt;hosted-engine-setup&lt;/code&gt; to it, which
will use it for the initial VM.
If you want to try the imagine with qemu (or libvirt), just use the &lt;code&gt;.raw&lt;/code&gt;
image (also available in the current workingdir) and something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ qemu-kvm -snapshot -m 4096 -smp 4 -hda ovirt-appliance-fedora.raw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you boot into the image, the &lt;code&gt;initial-setup&lt;/code&gt; dialog will pop-up to guide you through some initial steps.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://66.media.tumblr.com/295e567a3dc7cc73143e507336a036b9/tumblr_inline_n798adOX271s0jj7d.png" alt=""/&gt;&lt;/p&gt;

&lt;h2&gt;Finishing the &lt;code&gt;ovirt-engine-setup&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Once you finished the &lt;code&gt;initial-setup&lt;/code&gt; (which should be self describing),
login as root and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ engine-setup --config-append=ovirt-engine-answers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://66.media.tumblr.com/e06cccacea05f3c138e2a0d5b5a85065/tumblr_inline_n79878wzQG1s0jj7d.png" alt=""/&gt;&lt;/p&gt;

&lt;h2&gt;Comments on some design decisions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Why Fedora and why 19?&lt;/strong&gt; Because oVirt Engine runs fine on Fedora 19.
Also Fedora provides a nice set of cloud images (kickstarts) from which the
oVirt Engine appliance inherits, this eases the maintenance.
Fedora 20 is not used because Engine did not support it when the development of
the appliance started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why not CentOS?&lt;/strong&gt; We started with Fedora 19, because the cloud images where
available, the plan is to either adapt them to CentOS, or look if they&amp;rsquo;ve
also got cloud image kickstarts from which we could inherit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why initial-setup?&lt;/strong&gt; Another reason for using Fedora 19 was, that &lt;code&gt;anaconda&lt;/code&gt; could be leveraged to
run the &lt;code&gt;inital-setup&lt;/code&gt;. The initial-setup is responsible to ask the user some
questions (what root password, what timezone, and if an additional user should
be created).
&lt;code&gt;cloud-init&lt;/code&gt; could not be used, because &lt;code&gt;cloud-init&lt;/code&gt; requires some kind of
management instance at boot time (like oVirt or OpenStack) to get configured.
But this isn&amp;rsquo;t the case with the virtual appliance, because the appliance will
only become the Engine.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;FutureFeature&lt;/em&gt; could be to add another &lt;em&gt;spoke&lt;/em&gt; to the
&lt;code&gt;initial-setup&lt;/code&gt; where the remaining questions for the &lt;code&gt;engine-setup&lt;/code&gt; are asked,
that way a user is actually guided through the setup, and does not need to
manually trigger the &lt;code&gt;engine-setup&lt;/code&gt; after login.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Less maintenance!?&lt;/strong&gt; In general the &lt;code&gt;ovirt-appliance-fedora.ks&lt;/code&gt; inherits from the
&lt;code&gt;fedora-spin-kickstarts/fedora-cloud-base.ks&lt;/code&gt; file.
We also try hard to not diverge to much from the upstream configuration.
But some modifications are applied to the final (post-ksflatten) kickstart,
to change some defaults which are currently set in the &lt;code&gt;fedora-cloud-base.ks&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In detail we do the following:
* Don&amp;rsquo;t blacklist any package - To prevent missing dependencies
* Disable text installation - This does not work with &lt;code&gt;livemedia-creator&lt;/code&gt;
* Change the partition (rootfs) size to 4GB
* Generalize network activation - To be independent of nick names
* Ignore missing packages - Because the cloud ks uses Fedora 20 package names
* Do not explicitly set the default target
* Remove disablement of &lt;code&gt;initial-setup&lt;/code&gt; - Because we use it
* Remove dummy user game - Not needed because initial-setup is used&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;code&gt;Makefile&lt;/code&gt; for the exact informations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where is the UI?&lt;/strong&gt; The appliance comes without a desktop environment.
There is no hard need for it (some other host with an OS can be used to access
Engine&amp;rsquo;s web-ui) and it keeps the image small.&lt;/p&gt;

&lt;p&gt;If you want to add a desktop environment, you are free to do so, by using &lt;code&gt;yum&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Next steps&lt;/h2&gt;

&lt;p&gt;This is the first shot of this appliance. Let&amp;rsquo;s see how it turns out.
Some integration tests with the &lt;a href="http://www.ovirt.org/Node_Hosted_Engine"&gt;oVirt Node Hosted Engine plugin&lt;/a&gt;
are pending. I expect some more cleanup and fixes, before it&amp;rsquo;s ready for
the &lt;a href="http://www.ovirt.org/OVirt_3.5_TestDay"&gt;oVirt 3.5 TestDays&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open items include:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Heavy testing&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So feel enlighted to try out the &lt;del&gt;ready to use image or&lt;/del&gt;
&lt;a href="http://gerrit.ovirt.org/gitweb?p=ovirt-appliance.git;a=blob;f=README.md;hb=HEAD"&gt;build the appliance yourself&lt;/a&gt;.
Please provide feedback and questions to the &lt;code&gt;users@ovirt.org&lt;/code&gt; mailinglist.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>appliance</tag><tag>engine</tag><tag>node</tag><tag>19</tag><tag>libguestfs</tag><tag>libvirt</tag><tag>qemu</tag><tag>lorax</tag><tag>ova</tag><tag>virtual</tag><tag>hosted-engine</tag><tag>fedora</tag></post><post id="88595475415" url="https://dummdida.tumblr.com/post/88595475415" url-with-slug="https://dummdida.tumblr.com/post/88595475415/net-neutrality-or-avoiding-responsibility-in" type="regular" date-gmt="2014-06-12 19:40:46 GMT" date="Thu, 12 Jun 2014 21:40:46" unix-timestamp="1402602046" format="markdown" reblog-key="c2JMBcja" slug="net-neutrality-or-avoiding-responsibility-in" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Net neutrality - Or avoiding responsibility in complex organizations</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/biederbeck/4422602259/" title="Funkbüro von Herr von Draussen bei Flickr"&gt;&lt;img src="https://farm5.staticflickr.com/4026/4422602259_265e859829.jpg" width="500" height="333" alt="Funkbüro"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is frustrating. For over a month now. Actually since the 6th of May 2014, I&amp;rsquo;m trying to get a DSL line from the biggest (wired) carrier in Germany.&lt;/p&gt;

&lt;p&gt;On the 6th I got a confirmation that the line will be available on the 21st. Nice.
That contract got canceled. The confirmed date of delivery became a fake.
After several calls (7+) to the hotline, and several (4?) visits in the close by shop, finally … nothing happened.
No one was responsible, no one could come up with solutions. It was always some other group within the company which was causing the trouble.
You were redirected randomly.&lt;/p&gt;

&lt;p&gt;They offered a wireless solution until the line was available. I still had to pay for the hardware, the offer was just about the &amp;ldquo;SIM card&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;About a week after the confirmed date I reached out to a lawyer to get an idea of what can be done to get the carrier to do what it actually wrote down in the contract.
After naming the carriers, the lawyer stepped back and suggested to just be happy if the line will be setup at all.
He agreed that it is a valid contract, but he also said that the carrier would probably just sit it out. Basically not react and just cancel the contract as soon as possible.&lt;/p&gt;

&lt;p&gt;A couple of days later I received another confirmation that th eline would now be available on June 12th. Today.
But actually nothing happened, … yada yada and so one.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s frustrating, if even a lawyer tells you, that you can just obey to what the carrier dictates.&lt;/p&gt;</regular-body></post><post id="86892914075" url="https://dummdida.tumblr.com/post/86892914075" url-with-slug="https://dummdida.tumblr.com/post/86892914075/git-man-page-generator" type="link" date-gmt="2014-05-26 13:24:55 GMT" date="Mon, 26 May 2014 15:24:55" unix-timestamp="1401110695" format="markdown" reblog-key="n42gjoMh" slug="git-man-page-generator" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Git man page generator</link-text><link-url>http://git-man-page-generator.lokaltog.net/</link-url></post><post id="86874611960" url="https://dummdida.tumblr.com/post/86874611960" url-with-slug="https://dummdida.tumblr.com/post/86874611960/screencast-automated-testing-of-a-fedora-cloud" type="regular" date-gmt="2014-05-26 06:38:00 GMT" date="Mon, 26 May 2014 08:38:00" unix-timestamp="1401086280" format="markdown" reblog-key="ZRU83hcz" slug="screencast-automated-testing-of-a-fedora-cloud" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Screencast: Automated testing of a Fedora Cloud image. (webm version)</regular-title><regular-body>&lt;center&gt;
&lt;video controls="" width="100%" src="http://fedorapeople.org/~fabiand/pub/2014-05-23-cloud-image-testing.webm"&gt;Please use Firefox or Chrome to view this video.&lt;/video&gt;&lt;/center&gt;

&lt;p&gt;The first scenario is basically a dummy because of &lt;a href="https://fedorahosted.org/cloud/ticket/60"&gt;this bug&lt;/a&gt; (missing serial console output for the bootloader).&lt;/p&gt;

&lt;p&gt;The second scenario finishes quickly, before the vncviewer can be attached.&lt;/p&gt;

&lt;p&gt;The vncviewer schon in the cast is actually attached to the third scenario.&lt;/p&gt;

&lt;p&gt;The QEMU_CMD in the beginning just forces the backend to use qemu-kvm instead of using qemu with emulation (which is slower).&lt;/p&gt;</regular-body><tag>fedora</tag><tag>automation</tag><tag>qemu</tag><tag>virtexpect</tag><tag>cloud</tag></post><post id="86584633715" url="https://dummdida.tumblr.com/post/86584633715" url-with-slug="https://dummdida.tumblr.com/post/86584633715/screencast-automated-testing-of-a-fedora-cloud" type="video" date-gmt="2014-05-23 09:51:00 GMT" date="Fri, 23 May 2014 11:51:00" unix-timestamp="1400838660" format="html" reblog-key="De46jdmw" slug="screencast-automated-testing-of-a-fedora-cloud" state="published" is_reblog="false" tumblelog="dummdida" direct-video="true"><video-source><content-type>video/mp4</content-type><extension>mp4</extension><width>1920</width><height>1080</height><duration>35</duration><revision>0</revision></video-source><video-caption>&lt;p&gt;Screencast: Automated testing of a Fedora Cloud image.&lt;/p&gt;
&lt;p&gt;The first scenario is basically a dummy because of &lt;a href="https://fedorahosted.org/cloud/ticket/60"&gt;this bug&lt;/a&gt; (missing serial console output for the bootloader).&lt;/p&gt;
&lt;p&gt;The second scenario finishes quickly, before the vncviewer can be attached.&lt;/p&gt;
&lt;p&gt;The vncviewer schon in the cast is actually attached to the third scenario.&lt;/p&gt;
&lt;p&gt;The QEMU_CMD in the beginning just forces the backend to use qemu-kvm instead of using qemu with emulation (which is slower).&lt;/p&gt;</video-caption><video-player>
&lt;video  id='embed-5c0ce8ecacb10256067397' class='crt-video crt-skin-default' width='400' height='225' poster='https://66.media.tumblr.com/tumblr_n60u0uRdo21st6sz0_frame1.jpg' preload='none' muted data-crt-video data-crt-options='{"autoheight":null,"duration":35,"hdUrl":false,"filmstrip":{"url":"http://24.media.tumblr.com/previews/tumblr_n60u0uRdo21st6sz0_filmstrip.jpg","width":"200","height":"112"}}' &gt;
    &lt;source src="https://dummdida.tumblr.com/video_file/t:f-JKqRHWTpWK1DKXwqj3Yg/86584633715/tumblr_n60u0uRdo21st6sz0" type="video/mp4"&gt;
&lt;/video&gt;
</video-player><video-player max-width="500">
&lt;video  id='embed-5c0ce8ecacb10256067397' class='crt-video crt-skin-default' width='500' height='281' poster='https://66.media.tumblr.com/tumblr_n60u0uRdo21st6sz0_frame1.jpg' preload='none' muted data-crt-video data-crt-options='{"autoheight":null,"duration":35,"hdUrl":false,"filmstrip":{"url":"http://24.media.tumblr.com/previews/tumblr_n60u0uRdo21st6sz0_filmstrip.jpg","width":"200","height":"112"}}' &gt;
    &lt;source src="https://dummdida.tumblr.com/video_file/t:f-JKqRHWTpWK1DKXwqj3Yg/86584633715/tumblr_n60u0uRdo21st6sz0" type="video/mp4"&gt;
&lt;/video&gt;
</video-player><video-player max-width="250">
&lt;video  id='embed-5c0ce8ecacb10256067397' class='crt-video crt-skin-default' width='250' height='141' poster='https://66.media.tumblr.com/tumblr_n60u0uRdo21st6sz0_frame1.jpg' preload='none' muted data-crt-video data-crt-options='{"autoheight":null,"duration":35,"hdUrl":false,"filmstrip":{"url":"http://24.media.tumblr.com/previews/tumblr_n60u0uRdo21st6sz0_filmstrip.jpg","width":"200","height":"112"}}' &gt;
    &lt;source src="https://dummdida.tumblr.com/video_file/t:f-JKqRHWTpWK1DKXwqj3Yg/86584633715/tumblr_n60u0uRdo21st6sz0" type="video/mp4"&gt;
&lt;/video&gt;
</video-player><tag>fedora</tag><tag>automation</tag><tag>virtexpect</tag><tag>cloud</tag></post><post id="86583072660" url="https://dummdida.tumblr.com/post/86583072660" url-with-slug="https://dummdida.tumblr.com/post/86583072660/automatic-testing-of-a-fedora-cloud-image-with" type="regular" date-gmt="2014-05-23 09:02:00 GMT" date="Fri, 23 May 2014 11:02:00" unix-timestamp="1400835720" format="html" reblog-key="GLrUPSNF" slug="automatic-testing-of-a-fedora-cloud-image-with" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Automatic testing of a Fedora Cloud image with gherkin, qemu, pexpect and travis</regular-title><regular-body>&lt;p&gt;Automatic testing - in all it&amp;rsquo;s glory - has been one of my problems for some time now.&lt;/p&gt;
&lt;p&gt;The result for the automated testing of the current Fedora Cloud image is: &lt;img alt="image" src="https://travis-ci.org/fabiand/fedora-cloud-features.svg?branch=master" title="Build status"/&gt;&lt;/p&gt;
&lt;p&gt;A screencast can be found &lt;a href="http://dummdida.tumblr.com/post/86584633715/screencast-of-a-behave-session-the-first"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;tl;dr&lt;/p&gt;
&lt;p&gt;Not to long ago I &lt;a href="http://dummdida.tumblr.com/post/82368744933/automatically-testing-vms-using-pexpect-and-qemu"&gt;wrote about using pexpect to interact with virtual machines&lt;/a&gt;. This time I extend the last experiment and add &lt;a href="http://pythonhosted.org/behave/gherkin.html"&gt;gherkin&lt;/a&gt; (through&lt;a href="http://pythonhosted.org/behave"&gt; python-behave&lt;/a&gt;) to describe the features to be tested.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Gherkin"&gt;&lt;img alt="image" src="http://upload.wikimedia.org/wikipedia/commons/3/39/Gherkins.jpg" title="A gherkin"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I like gherkin, because it enables non-programmers to write test cases, to describe their needs, the features they want to so. Much has been written about it elsewhere and there are nice recommendations of how good features should be written.&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://github.com/fabiand/fedora-cloud-features/blob/master/boot.feature"&gt;feature to describe the basic bootability&lt;/a&gt; of a cloud image could look like:&lt;/p&gt;
&lt;pre&gt;Feature: Basic bootability
  Cover the basic boot process. Ensure that we see a bootloader
  and a login prompt is displayed.

  Background: Some virtual machine with Fedora
    Given a default VM
      and the latest Fedora cloud image
      and that the VM is turned on

  Scenario: A bootloader is expected right after boot
       When we wait for 30 seconds at most
       Then we expect the bootloader prompt to appear

  Scenario: The kernel and systemd is started
       When we wait for 60 seconds at most
       Then we expect the kernel to be loaded
        and systemd to be running

  Scenario: A login prompt is displayed
       When we wait for 480 seconds at most
       Then we expect a login prompt
&lt;/pre&gt;
&lt;p&gt;(The feature is suboptimal written.)&lt;/p&gt;
&lt;p&gt;How each of this lines is achieved is up to the programmer / the implementation.&lt;/p&gt;
&lt;p&gt;The implementation in this case is the same as I&amp;rsquo;ve previously written about. qemu and pexpect ironed together.&lt;/p&gt;
&lt;p&gt;As the implementation is quite standalone (only python and qemu are required), it was just logical to run it on Travis CI.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.travis-ci.org"&gt;&lt;img alt="image" src="http://docs.travis-ci.com/images/travisci-small.png" title="Travis CI Icon"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The result is that it &lt;a href="https://travis-ci.org/fabiand/fedora-cloud-features/builds/25853392"&gt;passes&lt;/a&gt; (after a bit of forth and back). Look at the history to see, that failures are also catched.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/fabiand/fedora-cloud-features/blob/master/.travis.yml"&gt;.travis.yml&lt;/a&gt; file is surprisingly clean:&lt;/p&gt;
&lt;pre&gt;language: python

python:
  - "2.7"

before_install:
 - "sudo apt-get update"
 - "sudo apt-get install qemu curl"
 - "pip install -r requirements.txt"

script:
 - "curl -L -O &lt;a href="http://download.fedoraproject.org/pub/fedora/linux/updates/20/Images/x86_64/Fedora-x86_64-20-20140407-sda.qcow2"&gt;http://download.fedoraproject.org/pub/fedora/linux/updates/20/Images/x86_64/Fedora-x86_64-20-20140407-sda.qcow2&lt;/a&gt;"
 - "behave"
 - "rm -vf *.qcow2"
&lt;/pre&gt;
&lt;p&gt;All of this can be found &lt;a href="https://github.com/fabiand/fedora-cloud-features"&gt;in this repository&lt;/a&gt;. Feel free to test, fork and improve!&lt;/p&gt;
&lt;p&gt;Things I like about this approach:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Separation of concern - Implementation is independent of specification&lt;/li&gt;
&lt;li&gt;Works well for local setups and testing in the cloud&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s simple&lt;/li&gt;
&lt;/ul&gt;</regular-body><tag>fedora</tag><tag>cloud</tag><tag>automation</tag><tag>pexpect</tag><tag>python</tag><tag>qemu</tag><tag>virtexpect</tag></post><post id="86332938365" url="https://dummdida.tumblr.com/post/86332938365" url-with-slug="https://dummdida.tumblr.com/post/86332938365/geeksphone-revolution" type="regular" date-gmt="2014-05-20 19:50:00 GMT" date="Tue, 20 May 2014 21:50:00" unix-timestamp="1400615400" format="html" reblog-key="N8yUEMvu" slug="geeksphone-revolution" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Geeksphone Revolution</regular-title><regular-body>&lt;p&gt;Lately the display of my HTC Desire ONE C cbroke completely. It survived about a year with heavy scratches. But finally the touch screen keyboard wasn&amp;rsquo;t useful anymore, because the cracks crossed to many keys (especially T and F).&lt;/p&gt;
&lt;p&gt;Long story short. A useable smartphone can be aquired for about 100,-. The Geeksphone Revoltion was just repriced and cost 199,-. That was acceptable, as that phone supports Firefox OS (or B2G) - wich I want to try.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GP Revolution" border="0/" src="http://www.geeksphone.com/wp-content/themes/gp/img/phone-rev.png"/&gt;&lt;/p&gt;
&lt;p&gt;The phone came with a preinstalled stock/clean Android 4.x which behaved very smooth and nicely. There was nothing to complain. So I started and tried to figure out how I could flash B2G onto the device.&lt;/p&gt;
&lt;p&gt;Initially I thought that some kind of development tools were needed to do this. But with some luck I came over some menu point, which allowed me to install B2G with just a click.&lt;/p&gt;
&lt;p&gt;It appeared as if B2G was installed side by side with Android, but as it turned out, Android got replaced. Luckily I hadn&amp;rsquo;t had any data on the device yet.&lt;/p&gt;
&lt;p&gt;B2G has a very nice initial dialog (setting up the language etc), but in general it still feels a bit rough. But all in all it fit&amp;rsquo;s my daily usage quite well.&lt;/p&gt;
&lt;p&gt;What I really miss is a better documentation from Geeksphone (on i.e how to get B2g onto the device, and Android back on afterwards) and nightlies for the Revolution (which are missing).&lt;/p&gt;
&lt;p&gt;B2g itself has still some way to go. But I am curious where we are in a year.&lt;/p&gt;</regular-body><tag>firefoxos</tag><tag>android</tag><tag>geeksphone</tag><tag>revolution</tag><tag>fedora</tag></post><post id="86201231090" url="https://dummdida.tumblr.com/post/86201231090" url-with-slug="https://dummdida.tumblr.com/post/86201231090" type="video" date-gmt="2014-05-19 10:48:28 GMT" date="Mon, 19 May 2014 12:48:28" unix-timestamp="1400496508" format="html" reblog-key="w8WFFleh" slug="" state="published" is_reblog="false" tumblelog="dummdida"><video-source>http://vimeo.com/93206523</video-source><video-player>&lt;iframe src="https://player.vimeo.com/video/93206523?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="400" height="159" frameborder="0" title="The illusion of life" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe src="https://player.vimeo.com/video/93206523?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="500" height="198" frameborder="0" title="The illusion of life" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe src="https://player.vimeo.com/video/93206523?title=0&amp;byline=0&amp;portrait=0&amp;app_id=122963" width="250" height="99" frameborder="0" title="The illusion of life" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;</video-player></post><post id="85803539430" url="https://dummdida.tumblr.com/post/85803539430" url-with-slug="https://dummdida.tumblr.com/post/85803539430/linotp-and-html5-google-authenticator-on-firefox" type="regular" date-gmt="2014-05-15 08:29:51 GMT" date="Thu, 15 May 2014 10:29:51" unix-timestamp="1400142591" format="html" reblog-key="I7KCLQiK" slug="linotp-and-html5-google-authenticator-on-firefox" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>LinOTP and html5-google-authenticator (on Firefox OS)</regular-title><regular-body>&lt;p&gt;The &lt;a href="https://github.com/gbraad/html5-google-authenticator"&gt;html5-google-authenticator&lt;/a&gt; can be used with LinOTP for two-factor authentication.&lt;/p&gt;
&lt;p&gt;But LinOTP takes a &amp;ldquo;seed&amp;rdquo;, and the app a &amp;ldquo;secret&amp;rdquo;. They are not the same string, but different ones. This &lt;a href="https://github.com/mcepl/gen-oath-safe/blob/master/gen-oath-safe"&gt;script&lt;/a&gt; can be used to generate both.&lt;/p&gt;</regular-body><tag>linotp</tag><tag>firefoxos</tag><tag>otp</tag><tag>totp</tag></post><post id="85801837200" url="https://dummdida.tumblr.com/post/85801837200" url-with-slug="https://dummdida.tumblr.com/post/85801837200/from-gdm-into-a-virtual-machine" type="regular" date-gmt="2014-05-15 07:41:13 GMT" date="Thu, 15 May 2014 09:41:13" unix-timestamp="1400139673" format="html" reblog-key="DA36YWe9" slug="from-gdm-into-a-virtual-machine" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>From GDM into a virtual machine</regular-title><regular-body>&lt;p&gt;To extend the battery life of my netbook I started to move much of my tooling to remote servers.&lt;/p&gt;
&lt;p&gt;One thing I lately tried was how I could directly log into a remote virtual machine, after the GDM login. One way is to create a specific GDM session:&lt;/p&gt;
&lt;pre&gt;$ cat /usr/share/xsessions/f20-builder.desktop 
[Desktop Entry]
Name=F20 Builder
Exec=mutter &amp;amp; virt-viewer -f -c qemu://node.local/system f20-builder
Icon=
Type=Application
&lt;/pre&gt;
&lt;p&gt;Exchanging ssh-key up-front makes the experience even more relaxed.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>libvirt</tag><tag>gdm</tag></post><post id="85633867090" url="https://dummdida.tumblr.com/post/85633867090" url-with-slug="https://dummdida.tumblr.com/post/85633867090/gnome-ist-eine-hoch-intuitive-und" type="quote" date-gmt="2014-05-13 16:40:56 GMT" date="Tue, 13 May 2014 18:40:56" unix-timestamp="1399999256" format="html" reblog-key="qFbxZ7Z2" slug="gnome-ist-eine-hoch-intuitive-und" state="published" is_reblog="false" tumblelog="dummdida"><quote-text>GNOME ist eine hoch-intuitive und benutzerfreundliche Benutzeroberfläche</quote-text><quote-source>&lt;a href="https://git.fedorahosted.org/cgit/comps.git/tree/po/de.po#n1730"&gt;Fedora comps.xml&lt;/a&gt;</quote-source></post><post id="85514215875" url="https://dummdida.tumblr.com/post/85514215875" url-with-slug="https://dummdida.tumblr.com/post/85514215875/conditional-builds-with-rpm" type="link" date-gmt="2014-05-12 10:20:12 GMT" date="Mon, 12 May 2014 12:20:12" unix-timestamp="1399890012" format="html" reblog-key="We5FAjBK" slug="conditional-builds-with-rpm" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Conditional builds with rpm</link-text><link-url>http://rpm.org/wiki/PackagerDocs/ConditionalBuilds</link-url><link-description>&lt;p&gt;I just discovered this by accident - this seems to be handy.&lt;/p&gt;</link-description><tag>rpm</tag></post><post id="85505333075" url="https://dummdida.tumblr.com/post/85505333075" url-with-slug="https://dummdida.tumblr.com/post/85505333075/weve-had-all-this-innovation-on-the-internet" type="quote" date-gmt="2014-05-12 06:27:08 GMT" date="Mon, 12 May 2014 08:27:08" unix-timestamp="1399876028" format="html" reblog-key="23Tgf06i" slug="weve-had-all-this-innovation-on-the-internet" state="published" is_reblog="false" tumblelog="dummdida"><quote-text>‘We’ve had all this innovation on the Internet without net neutrality. Why do we need it now?’</quote-text><quote-source>&lt;a href="http://time.com/94205/al-franken-says-fcc-proposed-rules-are-the-opposite-of-net-neutrality/"&gt;Source&lt;/a&gt;</quote-source></post><post id="85109906000" url="https://dummdida.tumblr.com/post/85109906000" url-with-slug="https://dummdida.tumblr.com/post/85109906000/happy-50th-birthday-basic-the-visual-basic" type="link" date-gmt="2014-05-08 10:25:30 GMT" date="Thu, 08 May 2014 12:25:30" unix-timestamp="1399544730" format="html" reblog-key="bDOMA4mw" slug="happy-50th-birthday-basic-the-visual-basic" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Happy 50th Birthday, BASIC! - The Visual Basic Team - Site Home - MSDN Blogs</link-text><link-url>http://blogs.msdn.com/b/vbteam/archive/2014/05/01/happy-50th-birthday-basic.aspx</link-url><link-description>&lt;p&gt;&lt;img alt="This is also wehere my journey started." class="link_og_blockquote" src="http://blogs.msdn.com/cfs-filesystemfile.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-00-35-13/1565.sc1.png"/&gt;&lt;/p&gt;</link-description><tag>fedora</tag><tag>programming</tag><tag>visualbasic</tag><tag>png</tag></post><post id="85014668280" url="https://dummdida.tumblr.com/post/85014668280" url-with-slug="https://dummdida.tumblr.com/post/85014668280" type="photo" date-gmt="2014-05-07 11:53:00 GMT" date="Wed, 07 May 2014 13:53:00" unix-timestamp="1399463580" format="html" reblog-key="mEF6i0tK" slug="" state="published" is_reblog="false" tumblelog="dummdida" width="4000" height="2248"><photo-url max-width="1280">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_1280.jpg</photo-url><photo-url max-width="500">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_500.jpg</photo-url><photo-url max-width="400">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_400.jpg</photo-url><photo-url max-width="250">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_250.jpg</photo-url><photo-url max-width="100">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_100.jpg</photo-url><photo-url max-width="75">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_75sq.jpg</photo-url><photoset><photo offset="o1" caption="Just a dandelion" width="4000" height="2248"><photo-url max-width="1280">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_1280.jpg</photo-url><photo-url max-width="500">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_500.jpg</photo-url><photo-url max-width="400">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_400.jpg</photo-url><photo-url max-width="250">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_250.jpg</photo-url><photo-url max-width="100">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_100.jpg</photo-url><photo-url max-width="75">https://66.media.tumblr.com/04c89fe5932d06404fe6971baeefe33a/tumblr_n57d1pF8Od1st6sz0o1_75sq.jpg</photo-url></photo><photo offset="o2" caption="Weeds" width="4000" height="2248"><photo-url max-width="1280">https://66.media.tumblr.com/2c66ec8511b60ef90f4db3a6a902d907/tumblr_n57d1pF8Od1st6sz0o2_r1_1280.jpg</photo-url><photo-url max-width="500">https://66.media.tumblr.com/2c66ec8511b60ef90f4db3a6a902d907/tumblr_n57d1pF8Od1st6sz0o2_r1_500.jpg</photo-url><photo-url max-width="400">https://66.media.tumblr.com/2c66ec8511b60ef90f4db3a6a902d907/tumblr_n57d1pF8Od1st6sz0o2_r1_400.jpg</photo-url><photo-url max-width="250">https://66.media.tumblr.com/2c66ec8511b60ef90f4db3a6a902d907/tumblr_n57d1pF8Od1st6sz0o2_r1_250.jpg</photo-url><photo-url max-width="100">https://66.media.tumblr.com/2c66ec8511b60ef90f4db3a6a902d907/tumblr_n57d1pF8Od1st6sz0o2_r1_100.jpg</photo-url><photo-url max-width="75">https://66.media.tumblr.com/2c66ec8511b60ef90f4db3a6a902d907/tumblr_n57d1pF8Od1st6sz0o2_r1_75sq.jpg</photo-url></photo></photoset><tag>wallpaper</tag></post><post id="85013584965" url="https://dummdida.tumblr.com/post/85013584965" url-with-slug="https://dummdida.tumblr.com/post/85013584965/canonical-url-for-downloadfedorprojectorg-mirror" type="regular" date-gmt="2014-05-07 11:30:00 GMT" date="Wed, 07 May 2014 13:30:00" unix-timestamp="1399462200" format="html" reblog-key="81iJ6mR0" slug="canonical-url-for-downloadfedorprojectorg-mirror" state="private" is_reblog="false" tumblelog="dummdida" private="true"><regular-title>Canonical URL for download.fedorproject.org mirror redirection</regular-title><regular-body>&lt;p&gt;Lately I wondered my url based kickstart failed to run. It turned out that the problem was an incorrect url.&lt;/p&gt;
&lt;pre&gt;&lt;a href="http://download.fedoraproject.org/fedora/linux/releases/%24relver/Fedora/%24arch/os/"&gt;http://download.fedoraproject.org/fedora/linux/releases/$relver/Fedora/$arch/os/&lt;/a&gt;&lt;/pre&gt;
&lt;p&gt;does not redirect you to a close mirror, because … of the missing &lt;code&gt;pub/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using this incorrect URL will just brin up a blank page, sadly no 404 - Consumers like anaconda are silently hanging in mid-air and can&amp;rsquo;t continue.&lt;/p&gt;
&lt;p&gt;The correct URL is:&lt;/p&gt;
&lt;pre&gt;&lt;a href="http://download.fedoraproject.org/pub/fedora/linux/releases/%24relver/Fedora/%24arch/os/"&gt;http://download.fedoraproject.org/pub/fedora/linux/releases/$relver/Fedora/$arch/os/&lt;/a&gt;&lt;/pre&gt;</regular-body><tag>fedora</tag><tag>reminder</tag><tag>kickstart</tag><tag>url</tag></post><post id="84805531665" url="https://dummdida.tumblr.com/post/84805531665" url-with-slug="https://dummdida.tumblr.com/post/84805531665/programming-sucks" type="link" date-gmt="2014-05-05 06:50:56 GMT" date="Mon, 05 May 2014 08:50:56" unix-timestamp="1399272656" format="html" reblog-key="kB6v022U" slug="programming-sucks" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Programming Sucks</link-text><link-url>http://stilldrinking.org/programming-sucks</link-url><tag>programming</tag></post><post id="84345258680" url="https://dummdida.tumblr.com/post/84345258680" url-with-slug="https://dummdida.tumblr.com/post/84345258680/fedora-on-samsung-ativ-book-9-lite-905s3g-k01" type="regular" date-gmt="2014-04-30 19:40:00 GMT" date="Wed, 30 Apr 2014 21:40:00" unix-timestamp="1398886800" format="html" reblog-key="MeoScFAA" slug="fedora-on-samsung-ativ-book-9-lite-905s3g-k01" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Fedora on Samsung ATIV Book 9 Lite 905S3G K01</regular-title><regular-body>&lt;p&gt;My current netbook is a Lenovo x121e. It served me well for the last years, but it felt like the time has come to retire it.&lt;/p&gt;
&lt;p&gt;The main decision points for a new netbook are the CPU (must be AMD), low power usage, the form factor (14&amp;quot; or below). All of this is showing, that I am not looking for a power horse, but a nice a silent machine for idling, travels and occasional idea drafting.&lt;/p&gt;
&lt;p&gt;The current netbook I used was a Lenovo x121e, a AMD E-350 (or 450?) based netbook. It performed well in the scenarios where I used it.&lt;/p&gt;
&lt;p&gt;After a good amount of research - where I found out that there don&amp;rsquo;t seem to be many netbooks which meet my requirements - I finally settled with a &lt;a href="http://www.samsung.com/de/consumer/notebooks-displays/notebooks-pcs/ativ-book/NP905S3G-K01DE?subsubtype=ativ-book-9"&gt;Samsung ATIV Book 9 Lite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.samsung.com/de/consumer/notebooks-displays/notebooks-pcs/ativ-book/NP905S3G-K01DE?subsubtype=ativ-book-9"&gt;&lt;img alt="image" src="https://66.media.tumblr.com/f42f07d66955101e048e784a67164e31/tumblr_inline_n4u356cbHd1s0jj7d.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It has a slightly modified quad-core AMD A-1450 APU (which is Jaguar based), an 128GB SSD and 4GB of RAM. The CPU might be a bit underpowered with 1GHz and the RAM could also have been a bit larger. But the first impressions are that the specs are enough to run Fedora 20 with GNOME 3 without (m)any hassles.&lt;/p&gt;
&lt;p&gt;Some hints:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;BIOS: You can reach it by pressing F2 when the Samsung splash appears&lt;/li&gt;
&lt;li&gt;SecureBoot: Initially worked, now doesn&amp;rsquo;t. Needs to be investigated.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The important stuff works out of the box: Wifi, suspend to RAM, and all the other hardware.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how it behaves in the daily life.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Fedora 20 runs fine&lt;/li&gt;
&lt;li&gt;AMD A-1450 (Jaguar microarchitecture based APU)&lt;/li&gt;
&lt;li&gt;Low-Power usage&lt;/li&gt;
&lt;li&gt;Nice case and keyboard&lt;/li&gt;
&lt;li&gt;Good hardware support (suspend, audio, wifi)&lt;/li&gt;
&lt;li&gt;Very silent (nearly fanless)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Power connector is badly designed&lt;/li&gt;
&lt;li&gt;Built-in battery&lt;/li&gt;
&lt;li&gt;Suboptimal display&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;P.s.: In general it seems to compare well to a &amp;ldquo;Chromebook&amp;rdquo;.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>samsung</tag><tag>ativ</tag><tag>netbook</tag><tag>opencl</tag><tag>gnome</tag></post><post id="84224528035" url="https://dummdida.tumblr.com/post/84224528035" url-with-slug="https://dummdida.tumblr.com/post/84224528035/yum-dnf-their-common-frontend-pkcon" type="regular" date-gmt="2014-04-29 14:13:00 GMT" date="Tue, 29 Apr 2014 16:13:00" unix-timestamp="1398780780" format="html" reblog-key="a1KRmozt" slug="yum-dnf-their-common-frontend-pkcon" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>yum, dnf - their common frontend: pkcon</regular-title><regular-body>&lt;p&gt;pkcon - the commandline client for packagekit is actually quite nice.&lt;/p&gt;
&lt;pre&gt;# To search for a keyword
$ pkcon search details opencl

# To enable updates-testing
$ pkcon repo-enable updates-testing

# To install a package
$ pkcon install -y clpeak

# To see available commands:
$ pkcon
&lt;/pre&gt;
&lt;p&gt;What I like about it is, that it is fast. But maybe this is because of &lt;code&gt;yum-cron&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once PackageKit (and &lt;code&gt;PackageKit-browser-plugin&lt;/code&gt;) is installed it also allows fancy things like this (you should see an in-browser field to install a package locally):&lt;/p&gt;
&lt;p&gt;&lt;object height="100" type="application/x-packagekit-plugin" width="100%"&gt;&lt;param name="displayname" value="yum-cron"&gt;&lt;param name="packagenames" value="yum-cron"&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;Read more about this feature &lt;a href="https://gitorious.org/packagekit/packagekit/source/aaead7297632c16e88e465862289ac736ac20cc7:contrib/browser-plugin/README"&gt;here&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>yum</tag><tag>dnf</tag><tag>pkcon</tag><tag>packagekit</tag></post><post id="84218150680" url="https://dummdida.tumblr.com/post/84218150680" url-with-slug="https://dummdida.tumblr.com/post/84218150680/having-a-mac-laptop-is-like-going-on-a-journey" type="quote" date-gmt="2014-04-29 12:15:19 GMT" date="Tue, 29 Apr 2014 14:15:19" unix-timestamp="1398773719" format="html" reblog-key="ie0u6tuf" slug="having-a-mac-laptop-is-like-going-on-a-journey" state="published" is_reblog="false" tumblelog="dummdida"><quote-text>Having a Mac laptop is like going on a journey every single day… My latest issue happened today […]</quote-text><quote-source>&lt;a href="http://bruteforce.gr/bypassing-clang-error-unknown-argument.html"&gt;Source&lt;/a&gt;</quote-source><tag>mac</tag></post><post id="84207931585" url="https://dummdida.tumblr.com/post/84207931585" url-with-slug="https://dummdida.tumblr.com/post/84207931585/featherweight-musings-rust-for-c" type="link" date-gmt="2014-04-29 07:35:16 GMT" date="Tue, 29 Apr 2014 09:35:16" unix-timestamp="1398756916" format="html" reblog-key="VzRLSRMX" slug="featherweight-musings-rust-for-c" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Featherweight Musings: rust-for-c</link-text><link-url>http://featherweightmusings.blogspot.de/search/label/rust-for-c</link-url><link-description>&lt;p&gt;&lt;a href="http://featherweightmusings.blogspot.de/"&gt;Nick Cameron&lt;/a&gt; has put together a nice series of posts titled &amp;ldquo;Rust for C++ programmers&amp;rdquo;. A nice read.&lt;br/&gt;&lt;/p&gt;</link-description><tag>rust</tag></post><post id="84104470222" url="https://dummdida.tumblr.com/post/84104470222" url-with-slug="https://dummdida.tumblr.com/post/84104470222/what-is-the-peak-of-your-opencl-device" type="regular" date-gmt="2014-04-28 06:03:00 GMT" date="Mon, 28 Apr 2014 08:03:00" unix-timestamp="1398664980" format="html" reblog-key="9nfXAYmY" slug="what-is-the-peak-of-your-opencl-device" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>What is the peak of your OpenCL device?</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/pacomexico/3307710325/" title="Pico de Orizaba von pacomexico bei Flickr"&gt;&lt;img alt="Pico de Orizaba" height="240" src="https://farm4.staticflickr.com/3439/3307710325_651c05abda_n.jpg" width="320"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/krrishnarraj/clpeak"&gt;clpeak&lt;/a&gt; is a new tool in Fedora to measure the peak values of several OpenCL related aspects, i.e. IOPS, FLOPS, memory bandwidth and kernel latency.&lt;/p&gt;
&lt;p&gt;It works &lt;a href="https://github.com/pocl/pocl/issues/72"&gt;quiet&lt;/a&gt; nicely with pocl and Mesa&amp;rsquo;s Clover (for AMD R600+) - all on Fedora.&lt;/p&gt;
&lt;p&gt;The builds have landed in Fedora 20+ and can be installed using the common ways i.e.:&lt;/p&gt;
&lt;pre&gt;$ sudo dnf install --enablerepo=updates-testing clpeak&lt;/pre&gt;
&lt;p&gt;clpeak and clinfo are now two wonderful tools to get basic informations about the OpenCL capabilities of your host.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>opencl</tag><tag>pocl</tag><tag>clpeak</tag></post><post id="83701431934" url="https://dummdida.tumblr.com/post/83701431934" url-with-slug="https://dummdida.tumblr.com/post/83701431934/i915-and-radeon-both-enabled-on-vgaswitcheroo-at" type="regular" date-gmt="2014-04-24 07:44:00 GMT" date="Thu, 24 Apr 2014 09:44:00" unix-timestamp="1398325440" format="html" reblog-key="kOmmCBp8" slug="i915-and-radeon-both-enabled-on-vgaswitcheroo-at" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>i915 and radeon both enabled on vgaswitcheroo at boot</regular-title><regular-body>&lt;p&gt;That is the title of &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=896400"&gt;bug 896400&lt;/a&gt;. The problem described there is that after some kernel changes all cards in a &amp;ldquo;switcheroo&amp;rdquo; setup are activated at boot. because of this some laptops - including mine - boot into a black screen.&lt;/p&gt;
&lt;p&gt;A comment notes that some involved developers favor a userspace solution, instead of a kernel space based one, I haven&amp;rsquo;t checked that, but at least &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=896400#c9"&gt;one of the comments&lt;/a&gt; gave me a hint how to make the laptop usable again - for non-linux-users.&lt;/p&gt;
&lt;p&gt;I was able to let my laptop boot with the integrated i915 graphics card again by appending&lt;/p&gt;
&lt;pre&gt;radeon.modeset=0 radeon.dpm=1 radeon.aspm=1 radeon.runpm=1
&lt;/pre&gt;
&lt;p&gt;To the &lt;code&gt;GRUB_CMDLINE_LINUX&lt;/code&gt; in &lt;code&gt;/etc/default/grub&lt;/code&gt; and re-run &lt;code&gt;grub2-mkconfig&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;$ vi /etc/default/grub
$ grub2-mkconfig -o /etc/default/grub&lt;/pre&gt;
&lt;p&gt;That way the radeon card is in a state where vgaswitcheroo is not initialized at boot time, and the i915 wins. If you want to boot with the radeon card instead, just append&lt;/p&gt;
&lt;pre&gt;i915.modeset=0
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Rephrased a sentence to not put all kernel developers into one bucket.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>vgaswitcheroo</tag><tag>radeon</tag><tag>i915</tag></post><post id="83641808884" url="https://dummdida.tumblr.com/post/83641808884" url-with-slug="https://dummdida.tumblr.com/post/83641808884/the-day-the-net-neutrality-died" type="regular" date-gmt="2014-04-23 19:33:00 GMT" date="Wed, 23 Apr 2014 21:33:00" unix-timestamp="1398281580" format="html" reblog-key="3vOO4KoX" slug="the-day-the-net-neutrality-died" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>The day the net neutrality died?</regular-title><regular-body>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/freepress/7362006206/" title="Net Neutrality is Under Attack! von Free Press Pics bei Flickr"&gt;&lt;img alt="Net Neutrality is Under Attack!" height="320" src="https://farm8.staticflickr.com/7211/7362006206_ea7fa6b6f8_n.jpg" width="279"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: I am not sure if this is really a net neutrality issue. But it smells like one.&lt;/p&gt;
&lt;p&gt;One of the internet providers around is providing a dual-stack IPv6 connectivity for some of their offerings. Some of these IPv6 offerings are connected to an &amp;ldquo;up to 16 Mbit/s downlink&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;One of these offerings is a plain &amp;ldquo;internet and phone&amp;rdquo; offering, another one is a classic triple-play &amp;ldquo;internet, phone and tv&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Today I learned that those 16 Mbit/s are &amp;ldquo;reserved&amp;rdquo; for the triple-play offerings, and (in some areas) not available to the plain offerings.&lt;/p&gt;
&lt;p&gt;Woot!? Do I really need to sign the triple-play offering to get a 16 Mbit/s downlink? Let&amp;rsquo;s see what the customer service says.&lt;/p&gt;</regular-body><tag>netneutrality</tag><tag>fedora</tag></post><post id="82392428141" url="https://dummdida.tumblr.com/post/82392428141" url-with-slug="https://dummdida.tumblr.com/post/82392428141/imgbased-or-keeping-the-nature-of-node" type="regular" date-gmt="2014-04-11 16:07:09 GMT" date="Fri, 11 Apr 2014 18:07:09" unix-timestamp="1397232429" format="html" reblog-key="tHSlePAL" slug="imgbased-or-keeping-the-nature-of-node" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>imgbased - or keeping the nature of Node</regular-title><regular-body>&lt;div&gt;&lt;a href="https://www.flickr.com/photos/ferranp/2143446673/sizes/m/in/photolist-4gskqN-4gpJ28-9YD1xM-dQWzzz-4gpHqP/"&gt;&lt;img src="https://farm3.staticflickr.com/2245/2143446673_58cafe5bc1_d.jpg"/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;The special thing about Node is that it is image based. And we would like to keep it this way.&lt;/p&gt;
&lt;p&gt;An image - or the rootfs in the image - is a set of packages which can be tested as a whole and delivered as a whole. So we can be sure that the package combination on the host where Node is running is the same combination of packages we tested.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/fabiand/imgbased/"&gt;imgbased&lt;/a&gt; is now an idea where we get a similar functionality to Node&amp;rsquo;s read-only rootfs but one layer down, using LVM.&lt;/p&gt;
&lt;p&gt;Previously we operated on files, allowing change sby using bind-mounts to a writable partition.&lt;/p&gt;
&lt;p&gt;By using LVM we just provide a write-able volume atop the read-only volume carrying the rootfs. At boot time you then decide into which (write-able) volume you would like to boot. In ascii art:&lt;/p&gt;
&lt;pre&gt;+ VG
|
+--+ Config (LV)
|
+--+ Base-0 (LV, ro)
   |\
   | \
   |  + Base-0.1 (LV, rw)
   |  |
   |  + Base-0.2 (LV, rw)
   |
   |
   + Base-1 (LV, ro)
   |\
   | \
   |  + Base-1.1 (LV, rw)
   :
&lt;/pre&gt;
&lt;p&gt;This makes much stuff easier. Yum can work. No need for bind mounts, selinux has no hassles, and the persistence idea also works between &amp;ldquo;bases&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Having the original rootfs around makes it easy to create a delta between the original rootfs and the write-able volume.&lt;/p&gt;
&lt;p&gt;Upgrades work by adding a new volume with the contents of a new rootfs, which then get&amp;rsquo;s a new &amp;ldquo;layer&amp;rdquo; by adding the write-able volume atop. Partially changes can be persisted by copying files (in a whitelist fashion) between the current and new write-able layer.&lt;/p&gt;
&lt;p&gt;With Node we also keep the last image around, to provide a fallback in case that the new image has some kind of regression.&lt;/p&gt;
&lt;p&gt;This is also possible with imgbased. You can basically keep as many bases (and their write-able layers) around and discard them at some point later on.&lt;/p&gt;
&lt;p&gt;The drawback so far is, that you&amp;rsquo;ve got a slightly higher space requirement at runtime, because we don&amp;rsquo;t store the &amp;ldquo;squashed&amp;rdquo; rootfs (~250MB), but the sparse rootfs (~800MB). But maybe we can mitigate this a bit my optimizing our minimizer, or maybe it&amp;rsquo;s even a viable way to go, as the deployment size (the size of the ISO) does not change.&lt;/p&gt;
&lt;p&gt;There are still unsolved issues&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Getting anaconda to really do the installation&lt;/li&gt;
&lt;li&gt;Verify that all parts work as imagined&lt;/li&gt;
&lt;li&gt;Make the user aware that not all changes are persisted between upgrades&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;What I like most about this solution is, is that it is so - upstream. It only use mature available technologies.&lt;/p&gt;
&lt;p&gt;LVM thin volumes, ext4 with the discard option (this will free space again as soon as you delete a file) and the BootLoaderSpec.&lt;/p&gt;
&lt;p&gt;Well, we will need to go with real grub later on, because the BLS has no way to define the default boot entry, which is needed to always boot into the latest layer.&lt;/p&gt;
&lt;p&gt;In general this approach also works for regular hosts. And if you are brave you can even look at the sources and setup your host in a similar fashion :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For the interested reader - some more background.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our current implementation is using bind mounts to make the roots partially write-able - well, we are actually bind mounting write-able places to targets in the rootfs - which is technically more correct. But this approach has limitations:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It doesn&amp;rsquo;t work in the early boot process e.g. with /etc/fstab or with systemd&lt;/li&gt;
&lt;li&gt;We maintain our own installer to handle the image based installation&lt;/li&gt;
&lt;li&gt;We need to maintain custom SELinux rules because we bind-mount many files on tmpfs or somewhere else&lt;/li&gt;
&lt;li&gt;It works well for individual files, but is becoming messy for many files.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The first three items are actually causing the most pain. Lately I started to look at the second point. The initial idea was to use python-livet for storage handling. I continued to surf and thought that we could reuse even larger parts of anaconda … I surfed on the waves of trying to find ways were we could build our Node on the shoulders of others, so we can concentrate on other part sof Node - making it solid.&lt;/p&gt;
&lt;p&gt;Once I landed there I tried to rethink the whoel Node, but based on available concepts which are already there in the Fedora land, which we can reuse - and don&amp;rsquo;t have to reinvent.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>imgbased</tag><tag>node</tag></post><post id="82368744933" url="https://dummdida.tumblr.com/post/82368744933" url-with-slug="https://dummdida.tumblr.com/post/82368744933/automatically-testing-vms-using-pexpect-and-qemu" type="regular" date-gmt="2014-04-11 08:05:00 GMT" date="Fri, 11 Apr 2014 10:05:00" unix-timestamp="1397203500" format="html" reblog-key="Efjtyl10" slug="automatically-testing-vms-using-pexpect-and-qemu" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Automatically testing VMs using pexpect and qemu</regular-title><regular-body>&lt;p&gt;&lt;a href="http://dummdida.tumblr.com/tagged/igor"&gt;Igor&lt;/a&gt; does his job, testing &lt;a href="http://www.ovirt.org/Node"&gt;Node&lt;/a&gt; images on virtual machines and real hardware. But one drawback is that it&amp;rsquo;s &amp;ldquo;big&amp;rdquo;. It is not huge, but it is not directly usable out of the box.&lt;/p&gt;
&lt;p&gt;Out of the blue - while playing with &lt;a href="https://github.com/fabiand/imgbased/"&gt;some ideas&lt;/a&gt; - I coupled &lt;a href="https://github.com/pexpect/pexpect"&gt;pexpect&lt;/a&gt; (now updated to 3.1 in Fedora) with qemu (and a stdio serial).&lt;/p&gt;
&lt;p&gt;What I got is a simple mechanism to control a VM. With much less assumptions then Igor has.&lt;/p&gt;
&lt;p&gt;The drawback is obviously that only VMs can be tested, but the benefit is that it is very simple, and there no high requirements. And this is also limited to the console - which is optimal for Node.&lt;/p&gt;
&lt;p&gt;Long story short, the snippet below takes an image, boot&amp;rsquo;s it and tries to login via the serial console.&lt;/p&gt;
&lt;script src="https://gist.github.com/fabiand/10448153.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;This can further be extended by using 9pfs to exchange data between the host and guest.&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://github.com/fabiand/imgbased/blob/master/tests/functional/sanity.py"&gt;minimal functional test&lt;/a&gt; is now also in imgbased to test some basic functionality at runtime.&lt;/p&gt;
&lt;p&gt;This doesn&amp;rsquo;t seem to be a new &lt;a href="http://mail-index.netbsd.org/tech-install/2006/08/29/0000.html"&gt;idea&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>igor</tag><tag>imgbased</tag><tag>qemu</tag><tag>pexpect</tag></post><post id="80058737817" url="https://dummdida.tumblr.com/post/80058737817" url-with-slug="https://dummdida.tumblr.com/post/80058737817/drop-down-terminal-for-gnome-and-taskwarrior" type="regular" date-gmt="2014-03-19 11:18:00 GMT" date="Wed, 19 Mar 2014 12:18:00" unix-timestamp="1395227880" format="html" reblog-key="sRJ8NLR9" slug="drop-down-terminal-for-gnome-and-taskwarrior" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Drop down terminal for GNOME and taskwarrior</regular-title><regular-body>&lt;p&gt;There are a couple of terminals out there which slide down from the top of the screen.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://extensions.gnome.org/extension/442/drop-down-terminal/"&gt;&lt;img alt="image" border="0" src="https://extensions.gnome.org/static/extension-data/screenshots/screenshot_442_1.png" title="Taskwarrior in action" width="400"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But &lt;a href="https://extensions.gnome.org/extension/442/drop-down-terminal/"&gt;this one was amazingly easy to install&lt;/a&gt; and performs ver well on my Fedora 19 machine. It&amp;rsquo;s a GNOME Shell extension so will - obviously - not work with any other DE than GNOME.&lt;/p&gt;
&lt;p&gt;My usecase is mainly to have quick access to a shell and it&amp;rsquo;s very nice to have this in conjunction with &lt;a href="http://www.taskwarrior.org"&gt;taskwarrior&lt;/a&gt; (yum install -y task) which is a quite nice alternative to the GUI based todo lists.&lt;/p&gt;
&lt;p&gt;Amazing is the tab-completion on tags and arguments.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Taskwarrior"&gt;&lt;img alt="image" border="0" src="http://upload.wikimedia.org/wikipedia/commons/1/1b/Taskwarrior_screenshot.png" title="Taskwarrior in action" width="400"/&gt;&lt;/a&gt;&lt;/p&gt;</regular-body><tag>fedora</tag><tag>taskwarrior</tag><tag>todo</tag><tag>gnome</tag><tag>hud</tag><tag>terminal</tag><tag>extension</tag></post><post id="78536389751" url="https://dummdida.tumblr.com/post/78536389751" url-with-slug="https://dummdida.tumblr.com/post/78536389751/raising-the-append-line-char-limit-by-upgrading" type="regular" date-gmt="2014-03-04 10:46:16 GMT" date="Tue, 04 Mar 2014 11:46:16" unix-timestamp="1393929976" format="html" reblog-key="s8LalPTt" slug="raising-the-append-line-char-limit-by-upgrading" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Raising the append line char limit by upgrading pxelinux</regular-title><regular-body>&lt;p&gt;IIUIC the number of chars appended to the kernel during PXE boot is limited by two things: The kernel itself and the bootloader - pxelinux in my case.&lt;/p&gt;
&lt;p&gt;Ancient kernels had a limit of 256 chars, but this limit was raised and doesn&amp;rsquo;t exist with 2.6 anymore.&lt;/p&gt;
&lt;p&gt;What I did not know was that the pxelinux limitation was also raised. Now it is possible to pass up to &lt;a href="http://www.syslinux.org/archives/2010-July/015258.html"&gt;2048 chars&lt;/a&gt; - I also read 4096 chars somewhere else. At least many more then previously (1024 or so, at least lower).&lt;/p&gt;
&lt;p&gt;So updating &lt;a href="http://www.syslinux.org/wiki/index.php/PXELINUX"&gt;pxelinux&lt;/a&gt; to some recent version will allow you to pass more arguments to the booted kernel. This is especially relevant for &lt;a href="https://github.com/fabiand/igor/"&gt;igor&lt;/a&gt;, when testing &lt;a href="http://www.ovirt.org/Node"&gt;Node&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>pxe</tag><tag>node</tag><tag>igor</tag></post><post id="78111276816" url="https://dummdida.tumblr.com/post/78111276816" url-with-slug="https://dummdida.tumblr.com/post/78111276816/insight-in-how-the-early-boot-process-works" type="regular" date-gmt="2014-02-28 15:24:00 GMT" date="Fri, 28 Feb 2014 16:24:00" unix-timestamp="1393601040" format="html" reblog-key="jtWyND8c" slug="insight-in-how-the-early-boot-process-works" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Insight in how the early boot process works</regular-title><regular-body>&lt;p&gt;Beeing in the situation to write a new man page, I rememberd that dracut is using asciidoc. Looking at dracuts manpages I found &lt;a href="http://git.kernel.org/cgit/boot/dracut/dracut.git/tree/dracut.bootup.7.asc"&gt;this great diagram&lt;/a&gt; illustrating the early boot process in - at least - Fedora.&lt;/p&gt;
&lt;p&gt;It seems an artist did some work.&lt;/p&gt;
&lt;pre&gt;                                    systemd-journal.socket
                                               |
                                               v
                                    dracut-cmdline.service
                                               |
                                               v
                                    dracut-pre-udev.service
                                               |
                                               v
                                     systemd-udevd.service
                                               |
                                               v
local-fs-pre.target                dracut-pre-trigger.service
         |                                     |
         v                                     v
 (various mounts)  (various swap  systemd-udev-trigger.service
         |           devices...)               |             (various low-level   (various low-level
         |               |                     |             services: seed,       API VFS mounts:
         v               v                     v             tmpfiles, random     mqueue, configfs,
  local-fs.target   swap.target     dracut-initqueue.service    sysctl, ...)        debugfs, ...)
         |               |                     |                    |                    |
         \_______________|____________________ | ___________________|____________________/
                                              \|/
                                               v
                                        sysinit.target
                                               |
                             _________________/|\___________________
                            /                  |                    \
                            |                  |                    |
                            v                  |                    v
                        (various               |              rescue.service
                       sockets...)             |                    |
                            |                  |                    v
                            v                  |              rescue.target
                     sockets.target            |
                            |                  |
                            \_________________ |                                 emergency.service
                                              \|                                         |
                                               v                                         v
                                         basic.target                             emergency.target
                                               |
                        ______________________/|
                       /                       |
                       |                       v
                       |            dracut-pre-mount.service
                       |                       |
                       |                       v
                       |                  sysroot.mount
                       |                       |
                       |                       v
                       |             initrd-root-fs.target
           (custom initrd services)            |
                       |                       v
                       |             dracut-mount.service
                       |                       |
                       |                       v
                       |            initrd-parse-etc.service
                       |                       |
                       |                       v
                       |            (sysroot-usr.mount and
                       |             various mounts marked
                       |               with fstab option
                       |                x-initrd.mount)
                       |                       |
                       |                       v
                       |                initrd-fs.target
                       \______________________ |
                                              \|
                                               v
                                          initrd.target
                                               |
                                               v
                                    dracut-pre-pivot.service
                                               |
                                               v
                                     initrd-cleanup.service
                                          isolates to
                                    initrd-switch-root.target
                                               |
                                               v
                        ______________________/|
                       /                       |
                       |        initrd-udevadm-cleanup-db.service
                       |                       |
           (custom initrd services)            |
                       |                       |
                       \______________________ |
                                              \|
                                               v
                                   initrd-switch-root.target
                                               |
                                               v
                                   initrd-switch-root.service
                                               |
                                               v
                                          switch-root
----

AUTHOR
------
Harald Hoyer
&lt;/pre&gt;</regular-body><tag>fedora</tag><tag>dracut</tag><tag>systemd</tag></post><post id="74374523183" url="https://dummdida.tumblr.com/post/74374523183" url-with-slug="https://dummdida.tumblr.com/post/74374523183/clover-meas-opencl-for-amd-ati-r600-lands-in" type="regular" date-gmt="2014-01-24 11:15:00 GMT" date="Fri, 24 Jan 2014 12:15:00" unix-timestamp="1390562100" format="html" reblog-key="ALbr5bP0" slug="clover-meas-opencl-for-amd-ati-r600-lands-in" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Clover / Meas OpenCL for AMD / ATI r600 lands in rawhide</regular-title><regular-body>&lt;p&gt;&lt;a href="http://pkgs.fedoraproject.org/cgit/mesa.git/commit/?id=6aae606725bd6f7ba75c15011f0a0850a6d2acd8"&gt;This patch&lt;/a&gt; enables libOpenCL in mesa which means that libOpenCL from mesa will land inrawhide soon.&lt;/p&gt;
&lt;pre&gt;    # To test libOpenCL
    $ yum insall -y clinfo mesa-libOpenCL
    $ clinfo
&lt;/pre&gt;
&lt;p&gt;Time to really get the showcase applications into place to test the implementations.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>opencl</tag><tag>amd</tag><tag>ati</tag></post><post id="73231010247" url="https://dummdida.tumblr.com/post/73231010247" url-with-slug="https://dummdida.tumblr.com/post/73231010247/rust-09-as-in-mozillas-rust-lang-in-fedora" type="regular" date-gmt="2014-01-13 20:31:00 GMT" date="Mon, 13 Jan 2014 21:31:00" unix-timestamp="1389645060" format="html" reblog-key="VmqzT3zw" slug="rust-09-as-in-mozillas-rust-lang-in-fedora" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>rust-0.9 (as in Mozilla's rust-lang) in Fedora</regular-title><regular-body>&lt;p&gt;&lt;a href="http://www.rust-lang.org"&gt;rust-0.9&lt;/a&gt; has been released some time ago and now also an updated package is &lt;a href="http://copr-be.cloud.fedoraproject.org/results/fabiand/rust-unofficial/fedora-20-x86_64/"&gt;available for Fedora through Copr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Go and grab it.&lt;/p&gt;</regular-body><tag>rust</tag><tag>fedora</tag></post><post id="73011935640" url="https://dummdida.tumblr.com/post/73011935640" url-with-slug="https://dummdida.tumblr.com/post/73011935640/mesas-opencl-state-tracker-on-fedora-is-around" type="regular" date-gmt="2014-01-11 21:25:00 GMT" date="Sat, 11 Jan 2014 22:25:00" unix-timestamp="1389475500" format="html" reblog-key="ljU1vNWb" slug="mesas-opencl-state-tracker-on-fedora-is-around" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Mesa's OpenCL state tracker on Fedora is around the corner</regular-title><regular-body>&lt;p&gt;Thanks Igor. (Not the oVirt Node related one). &lt;a href="https://fedoraproject.org/wiki/User:Ignatenkobrain"&gt;ignatenkobrain&lt;/a&gt; form Fedora&amp;rsquo;s mesa fame.&lt;/p&gt;
&lt;p&gt;He invested some time and prepared a build with the correct build switches to build mesa-10 with OpenCL support. After a bit of fiddling (installing necessary deps [libclc-devel]) the result was this:&lt;/p&gt;
&lt;pre&gt;Number of platforms                               1
  Platform Name                                   Default
  Platform Vendor                                 Mesa
  Platform Version                                OpenCL 1.1 MESA 10.0.2
  Platform Profile                                FULL_PROFILE
  Platform Extensions                             cl_khr_icd

  Platform Name                                   Default
Number of devices                                 1
  Device Name                                     AMD PALM
  Device Vendor                                   X.Org
  Device Version                                  OpenCL 1.1 MESA 10.0.2
  Driver Version                                  10.0.2
  Device OpenCL C Version                         OpenCL C 1.1
  Device Type                                     GPU
  Device Profile                                  FULL_PROFILE
  Max compute units                               1
  Max clock frequency                             0MHz
  Device Partition                                (n/a)
  Max work item dimensions                        3
    Max work item size[0]                         256
    Max work item size[1]                         256
    Max work item size[2]                         256
  Max work group size                             256
  Preferred work group size multiple              1
  Preferred / native vector sizes                 
    char                                                16 / 16      
    short                                                8 / 8       
    int                                                  4 / 4       
    long                                                 2 / 2       
    half                                                 0 / 0        (n/a)
    float                                                4 / 4       
    double                                               2 / 2        (n/a)
  Half-precision   Floating-point support         (n/a)
  Single-precision Floating-point support        
    Denormals                                     Yes
    Infinity and NANs                             Yes
    Round to nearest                              Yes
    Round to zero                                 No
    Round to infinity                             No
    IEEE754-2008 fused multiply-add               No
    Correctly-rounded divide and sqrt operations  No
    Support is emulated in software               No
  Double-precision Floating-point support         (n/a)
  Address bits                                    32, Little-Endian
  Global memory size                              201326592 (   192MB)
  Error Correction support                        No
  Max memory allocation                           50331648 (    48MB)
  Unified memory for Host and Device              Yes
  Minimum alignment for any data type             128 bytes
  Alignment of base address                       128 bits (16 bytes)
  Global Memory cache type                        None
  Image support                                   Yes
    Max number of samplers per kernel             16
    Max 2D image size                             32768x32768 pixels
    Max 3D image size                             32768x32768x32768 pixels
    Max number of read image args                 32
    Max number of write image args                32
  Local memory type                               Local
  Local memory size                               32768 (    32KB)
  Max constant buffer size                        65536 (    64KB)
  Max number of constant args                     13
  Max size of kernel argument                     1024
  Queue properties                                
    Out-of-order execution                        No
    Profiling                                     Yes
  Profiling timer resolution                      0ns
  Execution capabilities                          
    Run OpenCL kernels                            Yes
    Run native kernels                            No
  Device Available                                Yes
  Compiler Available                              Yes
  Device Extensions                               
&lt;/pre&gt;
&lt;p&gt;This is amazing. The first run of clinfo on Fedora with Mesas OpenCL implementation.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Upstream - fix mesa.icd to contain absolute path to .so&lt;/li&gt;
&lt;li&gt;Add correct mesa-libOpenCL dependencies on libclc-devel, mesa-libgbm&lt;/li&gt;
&lt;li&gt;Discuss necessary global mesa changes&lt;/li&gt;
&lt;li&gt;Koji builds&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Spec changes are on &lt;a href="https://github.com/fabiand/mesa-spec/compare/master...opencl"&gt;github&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>opencl</tag><tag>fedora</tag><tag>mesa</tag><tag>clinfo</tag></post><post id="66963838683" url="https://dummdida.tumblr.com/post/66963838683" url-with-slug="https://dummdida.tumblr.com/post/66963838683/foreman-deep-dive-ovirt-node-plugin-for-discovery" type="link" date-gmt="2013-11-14 13:47:03 GMT" date="Thu, 14 Nov 2013 14:47:03" unix-timestamp="1384436823" format="html" reblog-key="1qQCrum7" slug="foreman-deep-dive-ovirt-node-plugin-for-discovery" state="published" is_reblog="false" tumblelog="dummdida"><link-text>Foreman deep dive: oVirt Node plugin for Discovery</link-text><link-url>http://www.youtube.com/watch?v=V8TugleqF64</link-url><tag>node</tag><tag>foreman</tag><tag>fedora</tag></post><post id="64695037737" url="https://dummdida.tumblr.com/post/64695037737" url-with-slug="https://dummdida.tumblr.com/post/64695037737/mesas-clover-has-now-icd-support" type="regular" date-gmt="2013-10-21 18:10:06 GMT" date="Mon, 21 Oct 2013 20:10:06" unix-timestamp="1382379006" format="html" reblog-key="DVtiwAi1" slug="mesas-clover-has-now-icd-support" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Mesa's clover has now ICD support</regular-title><regular-body>&lt;p&gt;Thrilled! After a long time - and much much work by curros and others&lt;a href="http://cgit.freedesktop.org/mesa/mesa/commit/?id=6230f77232a4703c9f98f569104ac03430a5fb95"&gt; ICD support has landed for Mesa&amp;rsquo;s clover&lt;/a&gt; OpenCL state tracker. This will allow us to install Mesa as an opencl provider in parallel to others (which support OpenCL ICD) - like pocl.&lt;/p&gt;</regular-body><tag>opencl</tag><tag>fedora</tag><tag>pocl</tag></post><post id="62649502242" url="https://dummdida.tumblr.com/post/62649502242" url-with-slug="https://dummdida.tumblr.com/post/62649502242/fn-main-rusts-entry-point-and-an-update-to" type="regular" date-gmt="2013-09-29 20:15:45 GMT" date="Sun, 29 Sep 2013 22:15:45" unix-timestamp="1380485745" format="html" reblog-key="EMNcpjiY" slug="fn-main-rusts-entry-point-and-an-update-to" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>fn main() // Rusts entry point - and an update to 0.8</regular-title><regular-body>&lt;p&gt;&lt;a href="http://www.rust-lang.org/"&gt;Rust 0.8 was released&lt;/a&gt; two some days ago. The &lt;a href="https://github.com/fabiand/rust-spec"&gt;spec&lt;/a&gt; is already updated and a build was triggered in &lt;a href="http://copr-fe.cloud.fedoraproject.org/coprs/detail/fabiand/rust/builds/"&gt;Copr&lt;/a&gt;. Sadly Copr currently fails to build rust on all arches. But I&amp;rsquo;ve got faith that there will be a complete build ready within the next days. Besides that there are builds for some arches which can be used.&lt;/p&gt;
&lt;p&gt;Anyhow, besides 0.8 being ready I&amp;rsquo;ve also &lt;a href="https://github.com/fabiand/example.rs"&gt;played with rustpkg - a high-level tool for rustc and friends&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you follow the intended filesystem layout you get benchmarks and tests for free - well, you&amp;rsquo;ll still have to write them, but they - benchmark and tests - are part of the regular build.&lt;/p&gt;
&lt;p&gt;And that is what the example.rs layout is about. To practice what rustpkg excepts.&lt;/p&gt;
&lt;p&gt;And never ever underestimate decent tests. Start with them right from the beginning - and you&amp;rsquo;ll have an easier life :) That&amp;rsquo;s actually a nice habbit Ive seen in software around all those popular languages in popular niches (aka mobile or nodejs) .. That quite some really take care about writing tests.&lt;/p&gt;</regular-body><tag>rust</tag><tag>copr</tag><tag>fedora</tag></post><post id="61393757319" url="https://dummdida.tumblr.com/post/61393757319" url-with-slug="https://dummdida.tumblr.com/post/61393757319/having-fun-with-exporting-automake-variables-or" type="regular" date-gmt="2013-09-16 08:45:00 GMT" date="Mon, 16 Sep 2013 10:45:00" unix-timestamp="1379321100" format="html" reblog-key="mecGFEsE" slug="having-fun-with-exporting-automake-variables-or" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Having fun with exporting automake variables - or how it was obviously a pyflakes bug (no, it wasn't) ... </regular-title><regular-body>&lt;p&gt;Each line of a Makefile target is executed in a sub-shell, this has pros and cons, but at least the following side-effect can be observed:&lt;/p&gt;
&lt;pre&gt;fun:
    export FOO="wunder bar"
    echo $$FOO
&lt;/pre&gt;
&lt;p&gt;This doesn&amp;rsquo;t echo &amp;ldquo;wunder bar&amp;rdquo; to the cmdline when you run make because the &lt;em&gt;export&lt;/em&gt; happens in a different shell then the &lt;em&gt;echo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You can anyhow set environment variables using the &lt;em&gt;export&lt;/em&gt; keyword:&lt;/p&gt;
&lt;pre&gt;export FOO="wunder bar"
fun:
    echo $FOO
&lt;/pre&gt;
&lt;p&gt;This now echos &lt;em&gt;&amp;ldquo;wunder bar&amp;rdquo;&lt;/em&gt; to the cmdline when you run make.&lt;/p&gt;
&lt;p&gt;So what is problematic with this? The quotes. The environment variable &lt;em&gt;FOO&lt;/em&gt; will contain the string &lt;em&gt;&amp;ldquo;wunder bar&amp;rdquo; &lt;/em&gt;- including the quotes! This happens because export is now the&lt;a href="http://www.gnu.org/software/make/manual/html_node/Variables_002fRecursion.html#Variables_002fRecursion"&gt; automake keyword&lt;/a&gt;, and that means the whole part on the right of the equals sign (=) is the value of the variable named on the left hand side (FOO). And in the example above this includes the quotes.&lt;/p&gt;
&lt;p&gt;What happened to me earlier on was that I tried to set an environment variable (PYFLAKES_BUILTINS) which got picked up by &lt;em&gt;pyflakes&lt;/em&gt;. I used:&lt;/p&gt;
&lt;pre&gt;export PYFLAKES_BUILTINS="_"
fun:
    pyflakes file.py
&lt;/pre&gt;
&lt;p&gt;Now, spot the problem.&lt;/p&gt;
&lt;p&gt;Solution: pyflakes (correctly) didn&amp;rsquo;t behave as expected (handle &lt;em&gt;_&lt;/em&gt; as a built-in), because the value of the variable was &amp;ldquo;_&amp;rdquo;, instead of _.&lt;/p&gt;
&lt;pre&gt;$ export PYFLAKES_BUILTINS="_"
$ pyflakes file.py
&lt;/pre&gt;
&lt;p&gt;The above snippet on the other hand works oin the shell, because the quotes (in the export line) are interpreted by the shell, and are nto part of the PYFLAKES_BUILTIN variable.&lt;/p&gt;</regular-body><tag>automake</tag><tag>fedora</tag><tag>pyflakes</tag><tag>python</tag><tag>node</tag></post><post id="60924060451" url="https://dummdida.tumblr.com/post/60924060451" url-with-slug="https://dummdida.tumblr.com/post/60924060451/binary-diff-between-libc-from-scientificlinux-and" type="regular" date-gmt="2013-09-11 10:52:00 GMT" date="Wed, 11 Sep 2013 12:52:00" unix-timestamp="1378896720" format="html" reblog-key="toLtzjo1" slug="binary-diff-between-libc-from-scientificlinux-and" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Binary diff between libc from ScientificLinux and CentOS</regular-title><regular-body>&lt;p&gt;In our IRC channel the question arose how we can see the difference between binaries build on different systems (SL and CentOS in this case).&lt;/p&gt;
&lt;p&gt;Our initial test binary was created using this snippet:&lt;/p&gt;
&lt;pre&gt;yum install vala glib2-devel
echo 'print("Hello");' &amp;gt; a.vala
valac a.vala &amp;amp;&amp;amp; objdump -D a
&lt;/pre&gt;
&lt;p&gt;We came then up with this small script to automate the diff creation:&lt;/p&gt;
&lt;pre&gt;dump() {
TMPFILE=$(mktemp)
objdump -D $1 &amp;gt; $TMPFILE
cat $TMPFILE | sed "s/^[[:space:]]\+[0-9a-f]\+//"
rm $TMPFILE
}
 
cmp_dump() {
dump $1 &amp;gt; dump_a
dump $2 &amp;gt; dump_b
diff -u dump_a dump_b
rm dump_a dump_b
}
 
# Usage: cmp_dump first-binary second-binary
$@
&lt;/pre&gt;
&lt;p&gt;So to compare two binaries and return the diff between their obj dump output (without addresses) you run:&lt;/p&gt;
&lt;pre&gt;bash cmp_dump.sh libc-sl libc-centos&lt;/pre&gt;
&lt;p&gt;This lead us to this result for libc from CentOS and ScientificLinux:&lt;/p&gt;
&lt;pre&gt;    --- dump_a      2013-09-11 12:39:30.799452944 +0200
    +++ dump_b      2013-09-11 12:39:32.061467634 +0200
    @@ -1,5 +1,5 @@
     
    -libc-2.12.so-centos6:     file format elf64-x86-64
    +libc-2.12.so-sl6:     file format elf64-x86-64
     
     
     Disassembly of section .note.gnu.build-id:
    @@ -13,13 +13,18 @@
     :      00 00                   add    %al,(%rax)
     :      47                      rex.RXB
     :      4e 55                   rex.WRX push %rbp
    -:      00 34 95 f7 bc a6 d9    add    %dh,-0x26594309(,%rdx,4)
    -:      9e                      sahf  
    -:      30 1d 7c 9f 95 9a       xor    %bl,-0x656a6084(%rip)        # ffffffff9a95a209 &amp;lt;_end+0xffffffff9a5c7961&amp;gt;
    -:      87 0f                   xchg   %ecx,(%rdi)
    -:      8e 77 c0                mov    -0x40(%rdi),%?
    -:      f0                      lock
    -:      b7                      .byte 0xb7
    +:      00 9a df 3d a2 9c       add    %bl,-0x635dc221(%rdx)
    +:      0c 20                   or     $0x20,%al
    +:      70 7f                   jo     308 &amp;lt;data.10540+0x2a8&amp;gt;
    +:      ed                      in     (%dx),%eax
    +:      6d                      insl   (%dx),%es:(%rdi)
    +:      49 9a                   rex.WB (bad)
    +:      2b 20                   sub    (%rax),%esp
    +:      0e                      (bad)  
    +:      67                      addr32
    +:      6b                      .byte 0x6b
    +:      68                      .byte 0x68
    +:      b1                      .byte 0xb1
     
     Disassembly of section .note.ABI-tag:
     
    @@ -486756,6 +486761,5 @@
     :      62                      (bad)  
     :      75 67                   jne    79 &amp;lt;data.10540+0x19&amp;gt;
     :      00 00                   add    %al,(%rax)
    -:      c7                      (bad)  
    -:      fc                      cld    
    -:      87 37                   xchg   %esi,(%rdi)
    +:      da 38                   fidivrl (%rax)
    +:      73 e0                   jae    fffffffffffffff8 &amp;lt;_end+0xffffffffffc6d750&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This ain&amp;rsquo;t a big difference for a 2M+ file, is it?&lt;/p&gt;
&lt;p&gt;So is this a valuable way to compare binaries?&lt;/p&gt;
&lt;p&gt;At the end there is the question: Can this be used to compare if binaries from an RPM were really created from the sources of it&amp;rsquo;s SRPM?&lt;/p&gt;</regular-body><tag>fedora</tag><tag>centos</tag><tag>sl</tag><tag>scientificlinux</tag><tag>binary</tag><tag>diff</tag></post><post id="59287612234" url="https://dummdida.tumblr.com/post/59287612234" url-with-slug="https://dummdida.tumblr.com/post/59287612234/froscon-st-augustin-2013" type="regular" date-gmt="2013-08-25 10:40:52 GMT" date="Sun, 25 Aug 2013 12:40:52" unix-timestamp="1377427252" format="html" reblog-key="qAvm2yxH" slug="froscon-st-augustin-2013" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>FrOSCon, St. Augustin, 2013</regular-title><regular-body>&lt;p&gt;It&amp;rsquo;s the first time that I&amp;rsquo;m attending &lt;a href="http://www.froscon.org"&gt;FrOSCon&lt;/a&gt; - a nice and small conference in St. Augustin, near Bonn in Germany.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://66.media.tumblr.com/0de540e3eb9504a1e87a2d25ae6856cb/tumblr_inline_ms316bw6Ju1qz4rgp.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Fedora booth with Felix and Aleksandra - right beside our friends from CentOS.&lt;/p&gt;
&lt;p&gt;In the front - and a closeup right below - you can see the RepRap which Miro used to create the nice Fedora key fobs.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://66.media.tumblr.com/0ea3f38813f0efe137e3248d80b693b9/tumblr_inline_ms3191hMnl1qz4rgp.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;On Sunday - right now - there is also a Fedora devroom, with some Fedora related talks. Sadly I missed Felix &amp;ldquo;The Cat Is Alive And Running Out Of The Box&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;PHP still seems to be very popular - at least it has a very prominent presence at the conference. In general a nice small conference.&lt;/p&gt;
&lt;p&gt;I also gave a talk about Igor - a tool to test a distribution, the corresponding slides can be found &lt;a href="http://fedorapeople.org/~fabiand/slides/2013-08-froscon-igor.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</regular-body><tag>fedora</tag><tag>froson</tag><tag>igor</tag></post><post id="58412561362" url="https://dummdida.tumblr.com/post/58412561362" url-with-slug="https://dummdida.tumblr.com/post/58412561362/secure-simple-pairing-with-ipsec-that-would-be" type="regular" date-gmt="2013-08-16 11:01:00 GMT" date="Fri, 16 Aug 2013 13:01:00" unix-timestamp="1376650860" format="html" reblog-key="gMRexkUQ" slug="secure-simple-pairing-with-ipsec-that-would-be" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Secure Simple Pairing with IPSec - that would be nice.</regular-title><regular-body>&lt;p&gt;Why can&amp;rsquo;t establishing a local (or global) IPSec connection be as easy as Bluetooths &lt;a href="http://en.wikipedia.org/wiki/Bluetooth#Pairing_mechanisms"&gt;Secure Simple Pairing&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;This would be ideal for quickly establishing a secure connection between two devices. After the pairing the last challenge in keeping the global conneciton is traversing the middle boxes. But at least the secure key exchange already happened, and with numeric comparison you even can prevent MITM attacks.&lt;/p&gt;
&lt;p&gt;This can happen at e.g. conferences or so. Anytime we meet face to face, or got another out-of-band channel.&lt;/p&gt;</regular-body><tag>bluetooth</tag><tag>pairing</tag><tag>ssp</tag><tag>ipsec</tag><tag>fedora</tag><tag>idea</tag></post><post id="57085987167" url="https://dummdida.tumblr.com/post/57085987167" url-with-slug="https://dummdida.tumblr.com/post/57085987167/fedup-to-fedora-19-and-trouble-with-encrypted" type="regular" date-gmt="2013-08-01 19:34:59 GMT" date="Thu, 01 Aug 2013 21:34:59" unix-timestamp="1375385699" format="html" reblog-key="IA0mmvRm" slug="fedup-to-fedora-19-and-trouble-with-encrypted" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>fedup to Fedora 19 and trouble with encrypted volumes</regular-title><regular-body>&lt;p&gt;Today I updated my Fedora 18 to Fedora 19 using fedup.&lt;/p&gt;
&lt;p&gt;The setup itself went smooth. But the initial boot failed with some message telling me that /home could be mounted (home resides on an encrypted volume).&lt;/p&gt;
&lt;p&gt;That didn&amp;rsquo;t sound nice &amp;hellip; After a couple of failed un-educated guesses I found &amp;ldquo;&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=980587"&gt;&lt;strong&gt;Bug 980587&lt;/strong&gt;&lt;/a&gt; - &lt;span id="short_desc_nonedit_display"&gt;Upgrade from F18 to F19 via FedUp on encrypted system (luks/dm-crypt, no LVM), can&amp;rsquo;t boot normally&amp;rdquo;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;That looked like my problem. But no. It didn&amp;rsquo;t solve for me.&lt;/p&gt;
&lt;p&gt;As it turned out I had to use the new lvm.conf (which resided in lvm.conf.rpmnew after the update). Renaming it to lvm.conf and running&lt;/p&gt;
&lt;pre&gt;dracut --force&lt;/pre&gt;
&lt;p&gt;Fixed the problem - The volume was picked up by systemd and mounted correctly.&lt;/p&gt;
&lt;p&gt;The system was now upgrade from Fedora 16 on &amp;hellip;&lt;/p&gt;</regular-body><tag>fedora</tag><tag>luks</tag><tag>lvm</tag><tag>dmsetup</tag><tag>systemd</tag><tag>fedup</tag><tag>update</tag><tag>cryptsetup</tag></post><post id="55968083195" url="https://dummdida.tumblr.com/post/55968083195" url-with-slug="https://dummdida.tumblr.com/post/55968083195/ovirt-node-30-or-fedora-read-only" type="regular" date-gmt="2013-07-20 16:29:00 GMT" date="Sat, 20 Jul 2013 18:29:00" unix-timestamp="1374337740" format="html" reblog-key="03QtZ6MA" slug="ovirt-node-30-or-fedora-read-only" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>oVirt Node 3.0 - or: Fedora read-only</regular-title><regular-body>&lt;p&gt;&lt;a href="http://www.flickr.com/photos/85898908@N05/7871902314/" title="AltesRathaus von EricPerego bei Flickr"&gt;&lt;img alt="AltesRathaus" src="http://farm8.staticflickr.com/7279/7871902314_419aba62ec_z.jpg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve heard a couple of times that stability is an issue with Fedora because of the never ending stream of updates and generally being a distribution containing bleeding edge software.&lt;/p&gt;
&lt;p&gt;In some cases this isn&amp;rsquo;t really wanted. For some use cases - servers? - you want something stable, something with a working set of packages. Maybe even something which limits the ways of how the system can be modified/configured, to even more reduce the risk of breaking something &amp;trade;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://66.media.tumblr.com/eb579b28ace7db10c0f3d65b4947f2cb/tumblr_inline_mq2zjvvt351qz4rgp.png"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ovirt.org/Home"&gt;oVirt&lt;/a&gt; &lt;a href="http://www.ovirt.org/Node"&gt;Node&lt;/a&gt; is something like this. Traditionally being a slimmed down (&amp;lt;256MB) Fedora (with a read-only rootfs, nothing can be modified) building the ground for VDSM, to act as an hypervisor [0] for oVirt Engine.&lt;/p&gt;
&lt;p&gt;Now &lt;a href="http://www.ovirt.org/Node_3.0_release-management"&gt;oVirt 3.0 is about to be released&lt;/a&gt;. This is a somewhat major release. One major point of this release is to make oVirt Node more general to decouple it from oVirt Engine remove specific bits (namely VDSM) - to make it more usable and attractive for other projects like Gluster and OpenStack.&lt;/p&gt;
&lt;p&gt;Why &lt;a href="http://www.gluster.org/"&gt;Gluster&lt;/a&gt; and &lt;a href="http://www.openstack.org/"&gt;OpenStack&lt;/a&gt; - well both projects architectures contain the idea of nodes forming on coherent platform. And as Nodes name says, that is what and that is what oVirt Node targets and what it is good at. Being solid and restricted. Somewhat firmware-like. Node is running of an ISO, residing on a logical volume, files which need to be modified are overlayed (using bind mounts, maybe &lt;a href="http://git.kernel.org/cgit/linux/kernel/git/dhowells/linux-fs.git/log/?id=refs/heads/unionmount"&gt;union-mounts&lt;/a&gt; in the distant future). Updates happen by updating that single ISO image. So you&amp;rsquo;ll always get a tested set of packages through in each new ISO.&lt;/p&gt;
&lt;p&gt;So if you might get in to the situation where you need something small, reliable, solid, modifyable (through &lt;a href="http://www.ovirt.org/Contributing_to_the_Node_project"&gt;patches&lt;/a&gt; and &lt;a href="http://www.ovirt.org/Node_plugins"&gt;plugins&lt;/a&gt;) and deployable (installable) - via PXE, USB and CD - take a look at oVirt Node.&lt;/p&gt;
&lt;p&gt;Besides being more unspecific&lt;a href="http://www.ovirt.org/Node_3.0_release-management"&gt; oVirt Node 3.0 also features&lt;/a&gt; a couple of other new and shiny things:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Support for puppet - You can now configure oVirt Node using puppet&lt;/li&gt;
&lt;li&gt;Support to boot from an iSCSI target&lt;/li&gt;
&lt;li&gt;Support for bonds - You can now create NIC bonds and configure them accordingly&lt;/li&gt;
&lt;li&gt;Better IPv6 support&lt;/li&gt;
&lt;li&gt;Better ways to retrieve diagnostic informations&lt;/li&gt;
&lt;li&gt;A new upgrade tool&lt;/li&gt;
&lt;li&gt;After a new setup UI now also a new installer UI - based on &lt;a href="http://excess.org/urwid/"&gt;urwid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Size of the LV holding the ISO was increased from 256MB to 512MB&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There will be builds based upon Fedora 18, Fedora 19 and CentOS. Just stay tuned for the official release - which should happen within the next days.&lt;/p&gt;
&lt;p&gt;[0] In the widest sense, because KVM is actually the hypervisor.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>fedora</tag><tag>kvm</tag><tag>centos</tag><tag>vdsm</tag><tag>gluster</tag><tag>openstack</tag></post><post id="55870422536" url="https://dummdida.tumblr.com/post/55870422536" url-with-slug="https://dummdida.tumblr.com/post/55870422536" type="video" date-gmt="2013-07-19 13:52:31 GMT" date="Fri, 19 Jul 2013 15:52:31" unix-timestamp="1374241951" format="html" reblog-key="Ha9Izz0p" slug="" state="published" is_reblog="false" tumblelog="dummdida"><video-source>http://www.youtube.com/watch?v=KaOC9danxNo</video-source><video-player>&lt;iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/KaOC9danxNo?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="500">&lt;iframe width="500" height="281"  id="youtube_iframe" src="https://www.youtube.com/embed/KaOC9danxNo?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player><video-player max-width="250">&lt;iframe width="250" height="141"  id="youtube_iframe" src="https://www.youtube.com/embed/KaOC9danxNo?feature=oembed&amp;amp;enablejsapi=1&amp;amp;origin=http://safe.txmblr.com&amp;amp;wmode=opaque" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</video-player></post><post id="55870194359" url="https://dummdida.tumblr.com/post/55870194359" url-with-slug="https://dummdida.tumblr.com/post/55870194359/igor-040-for-testing-ovirt-node-for-now" type="regular" date-gmt="2013-07-19 13:48:00 GMT" date="Fri, 19 Jul 2013 15:48:00" unix-timestamp="1374241680" format="html" reblog-key="uMhkLVid" slug="igor-040-for-testing-ovirt-node-for-now" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>igor-0.4.0 for testing oVirt Node - for now ...</regular-title><regular-body>&lt;p&gt;&lt;a href="http://www.flickr.com/photos/antontwang/8124665593/" title="0-4-0 von Twang Photography bei Flickr"&gt;&lt;img alt="0-4-0" src="http://farm9.staticflickr.com/8048/8124665593_82dfc1f22a_z.jpg" width="400px"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With the oVirt Node release around the corner I also gave igor some attention and prepared a new release.&lt;/p&gt;
&lt;p&gt;The new release (0.4.0) contains a couple of changes:&lt;/p&gt;
&lt;pre&gt;  igor-0.4.0
  - Event framework to signal job changes (using redis)
  - New client (igorc)
  - Use libvirt-only be default
  - Switch cfg file syntax to yaml
  - Reorganize files
  - Add igor-slave
&lt;/pre&gt;
&lt;p&gt;There is a new client tool in town to control igor, it&amp;rsquo;s igorc. It can do everything igorclient.sh could do. But it&amp;rsquo;s better to maintain and shares code with igord. Igorc has a feature to &lt;a href="http://dummdida.tumblr.com/post/51492048387/testing-ovirt-node-in-4min-video"&gt;monitor the progress of the current job in a shell&lt;/a&gt;. This required some kind of signaling mechanism. After trying a custom solution I choose &lt;a href="http://redis.io"&gt;redis&lt;/a&gt;. It has a nice and - in general but also in python - to use pubsub mechanism. This mechanism is now used by igord to signal when a job changes it state. This also gives me a reason to update the package once and again.&lt;/p&gt;
&lt;p&gt;The now more common igord hooks are used to implement this feature. You can even use a hook to, let&amp;rsquo;s say publish results or job states on a fedbus.&lt;/p&gt;
&lt;p&gt;igorc can be found in it&amp;rsquo;s own igor-client subpackage.&lt;/p&gt;
&lt;p&gt;One mayjor change - especially relevant for developers - is the libvirt-only change. Now you only need a working libvirt setup to test oVirt Node. If you plan to do the tests with real hardware, you&amp;rsquo;ll still have to setup cobbler and friends.&lt;/p&gt;
&lt;p&gt;In general yaml is now also used for configuration files. But while looking at rust I noted one very charming feature of their testsuite: They encode the expected outcome of a testcase in the path of the testcase, take a &lt;a href="https://github.com/mozilla/rust/tree/master/src/test"&gt;look here&lt;/a&gt; to get the idea. This brings me back to question of how igor can get better in defining testsuites. Might a fs-structure-only approach be enough to also keep metadata? Maybe.&lt;/p&gt;
&lt;p&gt;The slave part of igor, you could also say testrunner, is now also part of igor package (in the igor-slave subpackage). This package needs to be installed in a distribution under test. I&amp;rsquo;ve got it somewhere on a sheet of paper that I want to try running Fedora under igor. Now with this subpackage in place it should be easier to do.&lt;/p&gt;
&lt;p&gt;One major thing outstating is a decent tutorial and some excessive testing of the package. That might come to 0.4.1.&lt;/p&gt;
&lt;p&gt;Igor also has a new home now &amp;hellip; &lt;a href="https://github.com/fabiand/igor"&gt;github&lt;/a&gt;. I&amp;rsquo;m a bit sad - because gitorious was a reliable and old friend. But github evolved better and allows a much better collaboration. Thanks gitorious.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>node</tag><tag>igor</tag><tag>libvirt</tag><tag>fedora</tag><tag>github</tag><tag>gitorious</tag></post><post id="55443549550" url="https://dummdida.tumblr.com/post/55443549550" url-with-slug="https://dummdida.tumblr.com/post/55443549550/libclc-a-package-review-request" type="regular" date-gmt="2013-07-14 19:26:27 GMT" date="Sun, 14 Jul 2013 21:26:27" unix-timestamp="1373829987" format="html" reblog-key="K2v9bvnd" slug="libclc-a-package-review-request" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>libclc - a package review request</regular-title><regular-body>&lt;p&gt;libclc is a build dependency of mesa if you want to &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=887628"&gt;build mesa with OpenCL&lt;/a&gt; support.&lt;/p&gt;
&lt;p&gt;I really would like to see OpenCL support on Fedora. I&amp;rsquo;ve just submitted a &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=984312"&gt;package review request for libclc&lt;/a&gt; so we can meet that requirement (reviewers are welcome!). The goal to have some decent OpenCL support on Fedora - at least with AMD Radeon hardware isn&amp;rsquo;t so far away. It will be awesome!&lt;/p&gt;
&lt;p&gt;Rust already has an OpenCL binding &amp;hellip; And maybe it&amp;rsquo;s also time to also look at Vala&amp;rsquo;s OpenCL support &amp;hellip;&lt;/p&gt;</regular-body><tag>fedora</tag><tag>opencl</tag><tag>libclc</tag><tag>package</tag><tag>review</tag><tag>mesa</tag></post><post id="55189220665" url="https://dummdida.tumblr.com/post/55189220665" url-with-slug="https://dummdida.tumblr.com/post/55189220665/identica-is-now-on-pumpio" type="video" date-gmt="2013-07-11 18:34:25 GMT" date="Thu, 11 Jul 2013 20:34:25" unix-timestamp="1373567665" format="html" reblog-key="bgQ0LMu4" slug="identica-is-now-on-pumpio" state="published" is_reblog="false" tumblelog="dummdida"><video-source>https://www.youtube.com/watch?v=SN3zAYz9GLc</video-source><video-caption>&lt;p&gt;identi.ca is now on pump.io&lt;/p&gt;</video-caption><video-player/><video-player max-width="500"/><video-player max-width="250"/><tag>identi.ca</tag><tag>pump.io</tag></post><post id="55187940684" url="https://dummdida.tumblr.com/post/55187940684" url-with-slug="https://dummdida.tumblr.com/post/55187940684/pasting-from-dracut-or-just-with-curl" type="regular" date-gmt="2013-07-11 18:16:12 GMT" date="Thu, 11 Jul 2013 20:16:12" unix-timestamp="1373566572" format="html" reblog-key="sIRbXGV2" slug="pasting-from-dracut-or-just-with-curl" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>pasting from dracut - or just with curl</regular-title><regular-body>&lt;p&gt;For debugging purpose it&amp;rsquo;s quite useful to paste some output to &lt;a href="http://www.fpaste.org"&gt;fpaste.org&lt;/a&gt;. With the old fpaste that was a bit cumbersome. But the new fpaste.org site has a nice API which can be used in a restless fashion.&lt;/p&gt;
&lt;p&gt;To paste a file, just call:&lt;/p&gt;
&lt;pre&gt;$ curl \
    --data-urlencode paste_data@/tmp/log \
    -d paste_lang=text \
    -d api_submit=true \
    -d mode=xml \
    fpaste.org&lt;/pre&gt;
&lt;p&gt;The API documentation can be found &lt;a href="http://www.fpaste.org/doc/api/"&gt;here&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>paste</tag><tag>fpaste</tag><tag>curl</tag></post><post id="55167528998" url="https://dummdida.tumblr.com/post/55167528998" url-with-slug="https://dummdida.tumblr.com/post/55167528998/getting-used-to-rustpkg-or-rustpkgs-assumptions" type="regular" date-gmt="2013-07-11 12:04:26 GMT" date="Thu, 11 Jul 2013 14:04:26" unix-timestamp="1373544266" format="html" reblog-key="xiYr1y44" slug="getting-used-to-rustpkg-or-rustpkgs-assumptions" state="draft" is_reblog="false" tumblelog="dummdida"><regular-title>Getting used to rustpkg or rustpkgs assumptions</regular-title><regular-body>&lt;p&gt;rustpkg is part of rust and is a nice build&lt;/p&gt;</regular-body></post><post id="55088130574" url="https://dummdida.tumblr.com/post/55088130574" url-with-slug="https://dummdida.tumblr.com/post/55088130574/installing-fedora-using-ipxe-and-bfo" type="regular" date-gmt="2013-07-10 14:52:00 GMT" date="Wed, 10 Jul 2013 16:52:00" unix-timestamp="1373467920" format="html" reblog-key="SlmWRF5T" slug="installing-fedora-using-ipxe-and-bfo" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Installing Fedora using iPXE and BFO (boot.fedoraproject.org) via the world wide web</regular-title><regular-body>&lt;p&gt;I just got round to boot Fedora right out of the world wide web using nice service &lt;a href="http://boot.fedoraproject.org"&gt;http://boot.fedoraproject.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s that service? Well, you basically point gpxe (which is the PXE loader which is used e.g. by libvirt and friends) to the image offered by BFO, gpxe downloads it and you are dropped into a grub menu where you can install any recent Fedora release.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://66.media.tumblr.com/0c44c046b53261b7c9372824c301714c/tumblr_inline_mpq6j5LVN71qz4rgp.png"/&gt;&lt;/p&gt;
&lt;p&gt;All you need to do is, drop into the iPXE prompt using Ctrl+B and enter the following lines:&lt;/p&gt;
&lt;pre&gt;dhcp net0
imgfetch &lt;a href="http://dl.fedoraproject.org/pub/alt/bfo/bfo.lkrn"&gt;http://dl.fedoraproject.org/pub/alt/bfo/bfo.lkrn&lt;/a&gt;
imgload bfo.lkrn
boot bfo.lkrn
&lt;/pre&gt;
&lt;p&gt;The rest is done by iPXE and the initial small image. Very handy when your local setup is currently not up to date.&lt;/p&gt;
&lt;p&gt;Hint: Append &lt;code&gt;text&lt;/code&gt; to initiate a text or minimal install (select the grub entry, hit TAB to edit the entry, append &lt;code&gt;text&lt;/code&gt; and boot).&lt;/p&gt;
&lt;p&gt;Note: You can use this method to install Fedora in a oVirt Engine environment if you don&amp;rsquo;t have the most recent Fedora ISO in your ISO Domain.&lt;/p&gt;
&lt;p&gt;Changelog: Substituted gPXE with iPXE&lt;/p&gt;</regular-body><tag>fedora</tag><tag>pxe</tag><tag>gpxe</tag><tag>bfo</tag><tag>ovirt</tag></post><post id="54989299236" url="https://dummdida.tumblr.com/post/54989299236" url-with-slug="https://dummdida.tumblr.com/post/54989299236/sure-unit-tests-for-code-with-heavy-filesystem" type="regular" date-gmt="2013-07-09 09:04:00 GMT" date="Tue, 09 Jul 2013 11:04:00" unix-timestamp="1373360640" format="html" reblog-key="uEHFQmNO" slug="sure-unit-tests-for-code-with-heavy-filesystem" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Sure. Unit-tests for code with heavy filesystem usage</regular-title><regular-body>&lt;p&gt;&lt;a href="http://www.flickr.com/photos/wwarby/4782896202/" title="Nose von wwarby bei Flickr"&gt;&lt;img alt="Nose" height="240" src="http://farm5.staticflickr.com/4116/4782896202_c553733b81_n.jpg" width="320"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once upon a time &amp;hellip;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been reworking the network configuration part of &lt;a href="http://www.ovirt.org/Node"&gt;oVirt Node&lt;/a&gt;. Node is now capable of creating bonds and the use of bridge is now optionally.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;lt;history optional=&amp;ldquo;optional&amp;rdquo;&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Compared to the layout which was allowed before, these two changes allow a broader range of network layouts.&lt;/p&gt;
&lt;p&gt;We are still using soon-to-be-deprecated (?) ifcfg-files for network configuration to configure the individual network devices.&lt;br/&gt;A bridge consisting of one slave - which is the tagged part of a bond - this will result in at least five (5) ifcfg-files (depending how many bond slaves you are using):&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Bridge&lt;/li&gt;
&lt;li&gt;Bond (master)&lt;/li&gt;
&lt;li&gt;Bond (slave)&lt;/li&gt;
&lt;li&gt;Tagged (part of the bond slave)&lt;/li&gt;
&lt;li&gt;Loopback&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;And that&amp;rsquo;s were unit-tests come into play. I wanted to use unit-tests to cover all possible configurations.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;lt;/history&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One goal was to really check the on-disk files, to cover the whole code path. Without any mocking, the unit tests would involve filesystem modifications, so creating and happily deleting files everywhere. That&amp;rsquo;s - obviously - not so nice.&lt;/p&gt;
&lt;p&gt;This began rather cumbersome, I started &lt;a href="http://www.voidspace.org.uk/python/mock/"&gt;mock-ing&lt;/a&gt; up the access to individual files - and that is boring.&lt;/p&gt;
&lt;p&gt;Another try involved using a chroot - but that made to many assumptions about the runtime environment - IMO- and also required root privileges.&lt;/p&gt;
&lt;p&gt;The current solution arose quite quick, faking filesystem access by introducing a fake FS. For simplicity I also created a class for file access - this class could then be mocked to redirect all file system related calls to the fake filesystem.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;Many words, here is &lt;a href="https://gist.github.com/anonymous/5955820"&gt;how it looks&lt;/a&gt;:&lt;/p&gt;
&lt;script src="https://gist.github.com/anonymous/5955820.js" type="text/javascript"&gt;&lt;/script&gt;&lt;p&gt;The solution works well with mock, and time will tell if it can also cover our other usecases - and Node has a couple of places where we interact with files :)&lt;/p&gt;
&lt;p&gt;Finally I can only point you to our &lt;a href="http://gerrit.ovirt.org/gitweb?p=ovirt-node.git;a=blob;f=tests/nose/network_config.py;hb=HEAD"&gt;unit-test which cover the network setups&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>python</tag><tag>nose</tag><tag>unittest</tag><tag>ovirt</tag><tag>node</tag></post><post id="54599329756" url="https://dummdida.tumblr.com/post/54599329756" url-with-slug="https://dummdida.tumblr.com/post/54599329756/rust-07-for-fedora" type="regular" date-gmt="2013-07-04 15:16:00 GMT" date="Thu, 04 Jul 2013 17:16:00" unix-timestamp="1372950960" format="html" reblog-key="v9umJ1LG" slug="rust-07-for-fedora" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>rust-0.7 for Fedora</regular-title><regular-body>&lt;p&gt;&lt;a href="https://github.com/mozilla/rust/blob/release-0.7/RELEASES.txt"&gt;Rust 0.7 has been released&lt;/a&gt;. With a couple of changes - two things poked into my eyes: The changes around memory management and iterators.&lt;/p&gt;
&lt;p&gt;Grab the updated package from &lt;a href="http://copr-fe.cloud.fedoraproject.org/coprs/detail/fabiand/rust/"&gt;copr.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Copr doesn&amp;rsquo;t yet support Fedora 19, so don&amp;rsquo;t wonder about missing packages.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>rust</tag><tag>copr</tag></post><post id="52705415346" url="https://dummdida.tumblr.com/post/52705415346" url-with-slug="https://dummdida.tumblr.com/post/52705415346/finding-files-which-changed-between-git-revisions" type="regular" date-gmt="2013-06-11 13:14:00 GMT" date="Tue, 11 Jun 2013 15:14:00" unix-timestamp="1370956440" format="html" reblog-key="4sbh4fqH" slug="finding-files-which-changed-between-git-revisions" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Finding files which changed between git revisions</regular-title><regular-body>&lt;p&gt;We&amp;rsquo;ve - oVirt Node - now got a &lt;a href="http://jenkins.ovirt.org/view/ovirt_node/job/ovirt-node-devel-check/"&gt;jenkins job&lt;/a&gt; which does some &lt;a href="http://gerrit.ovirt.org/gitweb?p=ovirt-node.git;a=blob;f=src/Makefile.check;hb=HEAD"&gt;basic static checks&lt;/a&gt; on our python code.&lt;/p&gt;
&lt;p&gt;Checking the few tens of files takes roughly minute. But in a hassle to save even more energy, we want the checks to be only performed on the changed files. And not the whole source tree.&lt;/p&gt;
&lt;p&gt;The following git command will list all the files (relative to the git tree root) which changed between the two revisions (HEAD~1 and HEAD, so during the last commit):&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;$ git diff --name-only HEAD~1..HEAD&lt;/pre&gt;
&lt;/blockquote&gt;</regular-body><tag>fedora</tag><tag>git</tag><tag>node</tag></post><post id="52366983186" url="https://dummdida.tumblr.com/post/52366983186" url-with-slug="https://dummdida.tumblr.com/post/52366983186/redis-2613-2fc18-bugfix-update" type="regular" date-gmt="2013-06-07 07:58:23 GMT" date="Fri, 07 Jun 2013 09:58:23" unix-timestamp="1370591903" format="html" reblog-key="x9yBCkDp" slug="redis-2613-2fc18-bugfix-update" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>redis-2.6.13-2.fc18 bugfix update</regular-title><regular-body>&lt;p&gt;Redis wasn&amp;rsquo;t updated in some time. I pushed &lt;a href="https://admin.fedoraproject.org/updates/redis-2.6.13-2.fc18"&gt;two&lt;/a&gt; &lt;a href="https://admin.fedoraproject.org/updates/redis-2.6.13-2.fc19"&gt;updates&lt;/a&gt; which include the latest upstream version, additionally I made an attempt to unbundle jemalloc and build it using the PIE flag (hardened build).&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;This build will need some additional testing because of these bigger changes.&lt;br/&gt; Besides that redis is still bundling lua, linenoise and &amp;hellip; another lib.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>redis</tag></post><post id="52366862458" url="https://dummdida.tumblr.com/post/52366862458" url-with-slug="https://dummdida.tumblr.com/post/52366862458/palavatv" type="link" date-gmt="2013-06-07 07:54:36 GMT" date="Fri, 07 Jun 2013 09:54:36" unix-timestamp="1370591676" format="html" reblog-key="3l5Frb8c" slug="palavatv" state="published" is_reblog="false" tumblelog="dummdida"><link-text>palava.tv</link-text><link-url>https://palava.tv/</link-url><link-description>&lt;blockquote class="link_og_blockquote"&gt;palava enables video communication with your friends and colleagues from within your web browser! No registration is required and you don&amp;rsquo;t need to install any browser plugins!&lt;/blockquote&gt;
&lt;p&gt;palava is similar to conversat.io, just a bit different.&lt;/p&gt;
&lt;p&gt;Look &lt;a href="http://dummdida.tumblr.com/post/51492050426/woot-mozillas-firefox-mobile-nigtly-has-webrtc"&gt;here&lt;/a&gt; on how to enable peer connections in Firefox (the one in Fedora 18).&lt;/p&gt;</link-description><tag>fedora</tag><tag>presence</tag><tag>firefox</tag></post><post id="51494077833" url="https://dummdida.tumblr.com/post/51494077833" url-with-slug="https://dummdida.tumblr.com/post/51494077833/stumbled" type="regular" date-gmt="2013-05-27 19:17:51 GMT" date="Mon, 27 May 2013 21:17:51" unix-timestamp="1369682271" format="html" reblog-key="nuxbBhH3" slug="stumbled" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>stumbled</regular-title><regular-body>&lt;p&gt;Switched to tumblr +++ STOP +++ Monopoly isn&amp;rsquo;t a good thing &amp;trade; +++ STOP +++ Node Release on the door step +++ STOP +++ Fedora 19 also&lt;/p&gt;</regular-body><tag>fedora</tag><tag>node</tag><tag>tumblr</tag></post><post id="51493617184" url="http://www.tumblr.com/blog/dummdida/submissions?51493617184" url-with-slug="http://www.tumblr.com/blog/dummdida/submissions?51493617184" type="answer" date-gmt="2013-05-27 19:11:39 GMT" date="Mon, 27 May 2013 21:11:39" unix-timestamp="1369681899" format="html" reblog-key="OqGtHHdN" slug="was-ist-deine-früheste-erinnerung" state="submission" is_reblog="false" tumblelog="dummdida"><question>WAS IST DEINE FR&amp;Uuml;HESTE ERINNERUNG?</question></post><post id="51492057725" url="https://dummdida.tumblr.com/post/51492057725" url-with-slug="https://dummdida.tumblr.com/post/51492057725/simplehttpputserver-in-python" type="regular" date-gmt="2013-05-22 14:36:00 GMT" date="Wed, 22 May 2013 16:36:00" unix-timestamp="1369233360" format="html" reblog-key="fWoV1AzJ" slug="simplehttpputserver-in-python" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>SimpleHTTPPutServer in python</regular-title><regular-body>Sometimes a small HTTP server which can be used with&lt;br/&gt;&lt;pre&gt;$ curl -T dafile dahost.local&lt;br/&gt;&lt;/pre&gt;is handy. You can use it to upload small logfiles etc without any authentication, so something like tftp.&lt;br/&gt;&lt;br/&gt;Python&amp;rsquo;s own SimpleHTTPServer is a simple webserver, but it only supports GET and HEAD requests.&lt;br/&gt;By simply deriving from that class you can create a small server supporting PUT.&lt;br/&gt;&lt;script src="https://gist.github.com/fabiand/5628006.js"&gt;&lt;/script&gt;</regular-body><tag>python</tag><tag>fedora</tag></post><post id="51492055954" url="https://dummdida.tumblr.com/post/51492055954" url-with-slug="https://dummdida.tumblr.com/post/51492055954/mozillas-rust-in-fedoras-ppa-copr" type="regular" date-gmt="2013-05-05 11:37:00 GMT" date="Sun, 05 May 2013 13:37:00" unix-timestamp="1367753820" format="html" reblog-key="0GM7EYzr" slug="mozillas-rust-in-fedoras-ppa-copr" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Mozilla's rust in Fedora's PPA Copr</regular-title><regular-body>&lt;a href="http://fedoraproject.org/wiki/Category:Copr"&gt;Copr&lt;/a&gt; is Fedora&amp;rsquo;s answer to Ubuntu&amp;rsquo;s PPA - IIUIC, so don&amp;rsquo;t nail me on the definition.&lt;br/&gt;Slavek give&amp;rsquo;s a &lt;a href="http://bkabrda.wordpress.com/2013/02/08/introducing-copr-build-system/"&gt;nice introduction&lt;/a&gt; into how Copr works and what it does.&lt;br/&gt;&lt;br/&gt;Now - &lt;a href="http://copr-fe.cloud.fedoraproject.org/"&gt;Copr&lt;/a&gt; can be used to create public repositories for 3rd-party packages like rust - which can not (yet) land in the official Fedora repos (in rusts&amp;rsquo;s case because of the bundling other libs).&lt;br/&gt;I had to uploaded a source rpm of rust and point Copr to it, so Copr can pick it up and do a chroot build.&lt;br/&gt;Best is that Copr is also creating the appropriate repository and you only need the following repo file to install rust with dnf or yum.&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;# Add the following repo file&lt;br/&gt;$ cat rust.repo &lt;br/&gt;[fabiand-rust-unofficial]&lt;br/&gt;name=Rust packages (unofficial)&lt;br/&gt;baseurl=http://copr-be.cloud.fedoraproject.org/results/fabiand/rust/&lt;br/&gt;enabled=1&lt;br/&gt;metadata_expire=7d&lt;br/&gt;gpgcheck=0&lt;br/&gt;&lt;br/&gt;# And install it&lt;br/&gt;$ sudo dnf install rust&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;In general Copr seems to be nice - it&amp;rsquo;s still abit rough around the edges, but that&amp;rsquo;s expected. It can surely imagine that t&amp;rsquo;s going to fit well into our existing infrastructure.&lt;br/&gt;&lt;br/&gt;[Update] The copr &lt;a href="http://copr-fe.cloud.fedoraproject.org/coprs/detail/fabiand/rust/"&gt;landing page for rust&lt;/a&gt; and the package &lt;a href="http://copr-be.cloud.fedoraproject.org/results/fabiand/rust/fedora-18-x86_64/rust-0.6-2.fc18/rust-0.6-2.fc18.x86_64.rpm"&gt;rust-0.6-2.fc18.x86_64.rpm&lt;/a&gt; link.</regular-body><tag>rust</tag><tag>copr</tag><tag>fedora</tag><tag>package</tag></post><post id="51492053944" url="https://dummdida.tumblr.com/post/51492053944" url-with-slug="https://dummdida.tumblr.com/post/51492053944/orbxjs-is-no-open-codec" type="regular" date-gmt="2013-05-05 10:21:00 GMT" date="Sun, 05 May 2013 12:21:00" unix-timestamp="1367749260" format="html" reblog-key="q3UCrsya" slug="orbxjs-is-no-open-codec" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>ORBX.js - is no open codec</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/jimmyk49/5446495795/" title="Orb von jimmyk49 bei Flickr"&gt;&lt;img alt="Orb" height="212" src="http://farm6.staticflickr.com/5096/5446495795_13f4ee4b32_n.jpg" width="320"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;I&amp;rsquo;m by no way an expert, but until now &lt;a href="http://www.otoy.com/130501_OTOY_release_FINAL.pdf"&gt;ORBX.js&lt;/a&gt; is - to me - not much more than a tech demo and not &amp;ldquo;&lt;a href="https://brendaneich.com/2013/05/today-i-saw-the-future/"&gt;the future&lt;/a&gt;&amp;rdquo;.&lt;br/&gt;&lt;br/&gt;ORBX seems to be a propietary video codec, which operates highly parallel - that there is ORBX.js - a javascript decoder for this codec - doesn&amp;rsquo;t help the fact that it&amp;rsquo;s proprietary. So I wonder what the &lt;a href="http://tech.slashdot.org/story/13/05/04/2020235/orbxjs-1080p-drm-free-video-and-cloud-gaming-entirely-in-javascript"&gt;fuzz&lt;/a&gt; is all about. As said: To me ORBX.js is currently not much more than a tech demo to illustrate JavaScript&amp;rsquo;s (or more it&amp;rsquo;s interpreters) capabilities. And currently I couldn&amp;rsquo;t find any hint that ORBX - the codec - is going to be opened - which is also not as easy, as this would involve some sort of patent audit to sort out it&amp;rsquo;s patent status.&lt;br/&gt;&lt;br/&gt;At last I at least like the fact that it&amp;rsquo;s now shown that there can be highly parallel video codecs, which can utilize the GPU from a high level language.&lt;br/&gt;I wonder if this can be done with &lt;a href="http://diracvideo.org/"&gt;Dirac&lt;/a&gt;.</regular-body><tag>orbx.js</tag><tag>dirac</tag><tag>codec</tag><tag>fedora</tag><tag>orbx</tag></post><post id="51492052141" url="https://dummdida.tumblr.com/post/51492052141" url-with-slug="https://dummdida.tumblr.com/post/51492052141/parallel-static-python-checks-with-makefiles" type="regular" date-gmt="2013-05-02 18:33:00 GMT" date="Thu, 02 May 2013 20:33:00" unix-timestamp="1367519580" format="html" reblog-key="5SelgJmi" slug="parallel-static-python-checks-with-makefiles" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Parallel static python checks with Makefiles</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/treborinato/3204599860/" title="Parallel Ripples von Robert Otani bei Flickr"&gt;&lt;img alt="Parallel Ripples" height="240" src="http://farm4.staticflickr.com/3504/3204599860_190ecdfe34_m.jpg" width="240"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;To make testing fun I looked at improving the speed of static syntax checks.&lt;br/&gt;The latest incarnation is now using make targets to represent a specific checks. The nice thing about this is, that you can use Make&amp;rsquo;s &lt;code&gt;-j&lt;/code&gt; switch to run those tests in parallel.&lt;br/&gt;&lt;br/&gt;So basically it looks like this:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;check-static-pep8: $(PYTHONSOURCES:%=%.pep8)&lt;br/&gt; @echo Passed $@&lt;br/&gt;&lt;br/&gt;%.pep8:&lt;br/&gt; PYTHONPATH=. pep8 -r "$*"&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;The complete makefile is &lt;a href="https://gitorious.org/ovirt/igord/blobs/master/Makefile.check"&gt;here&lt;/a&gt; and the numbers: &lt;br/&gt;&lt;br/&gt;Simple: &lt;br/&gt;&lt;pre&gt;...&lt;br/&gt;---&lt;br/&gt; Passed check-local&lt;br/&gt;---&lt;br/&gt;&lt;br/&gt;real 0m22.875s&lt;br/&gt;user 0m20.466s&lt;br/&gt;sys 0m2.158s&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;And in parallel: &lt;br/&gt;&lt;pre&gt;---&lt;br/&gt; Passed check-local&lt;br/&gt;---&lt;br/&gt;&lt;br/&gt;real 0m11.459s&lt;br/&gt;user 0m34.780s&lt;br/&gt;sys 0m3.325s&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;There is so much that can be done.</regular-body><tag>make</tag><tag>testing</tag><tag>python</tag><tag>fedora</tag></post><post id="51492050426" url="https://dummdida.tumblr.com/post/51492050426" url-with-slug="https://dummdida.tumblr.com/post/51492050426/woot-mozillas-firefox-mobile-nigtly-has-webrtc" type="regular" date-gmt="2013-04-28 11:27:00 GMT" date="Sun, 28 Apr 2013 13:27:00" unix-timestamp="1367148420" format="html" reblog-key="hfOIOSSW" slug="woot-mozillas-firefox-mobile-nigtly-has-webrtc" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Woot - Mozilla's Firefox Mobile Nigtly has WebRTC support</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://www.webrtc.org/_/rsrc/1318870658554/config/customLogo.gif?revision=8" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://www.webrtc.org/_/rsrc/1318870658554/config/customLogo.gif?revision=8"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;Once and again I try the Nightly version of Mozilla Firefox.&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://nightly.mozilla.org/img/nightly-header-bg.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="162" src="http://nightly.mozilla.org/img/nightly-header-bg.png" width="400"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;Today I noticed that the Mobile version of Firefox has WebRTC support. Woot!?&lt;br/&gt;&lt;br/&gt;That means you can go into &lt;code&gt;about:config&lt;/code&gt; and set&lt;br/&gt;&lt;pre&gt;media.peerconnection.enabled&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;to true.&lt;br/&gt;If you&amp;rsquo;ve got a second mobile device or download the nightly desktop version (and enable peerconnection there too).&lt;br/&gt;Then you can visit the &lt;a href="http://apprtc.appspot.com/"&gt;webrtc reference application&lt;/a&gt; with the first device, and enter the given URL (at the bottom) on the second device to join the session.&lt;br/&gt;E voilà you&amp;rsquo;ve got a working WebRTC (with video and audio) connection between your two devices.&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://conversat.io/conversatio.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="46" src="http://conversat.io/conversatio.png" width="320"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;Or even &lt;a href="http://conversat.io/"&gt;conversat.io&lt;/a&gt; ! Yes - use conversat.io - looks promissing. Maybe even for team (ovirt) meetings?&lt;br/&gt;&lt;br/&gt;Enjoy and feed-back.</regular-body><tag>mozilla</tag><tag>ovirt</tag><tag>fedora</tag><tag>firefox</tag></post><post id="51492048387" url="https://dummdida.tumblr.com/post/51492048387" url-with-slug="https://dummdida.tumblr.com/post/51492048387/testing-ovirt-node-in-4min-video" type="regular" date-gmt="2013-04-25 14:47:00 GMT" date="Thu, 25 Apr 2013 16:47:00" unix-timestamp="1366901220" format="html" reblog-key="FvJI6qEe" slug="testing-ovirt-node-in-4min-video" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Testing oVirt Node in 4min (video)</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-GK2s1ogdEuI/UKJIFZmTE8I/AAAAAAAAAIo/DHpDSi9ZLGY/s1600/favicon.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-GK2s1ogdEuI/UKJIFZmTE8I/AAAAAAAAAIo/DHpDSi9ZLGY/s1600/favicon.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;My focus over the last year or so lay on bringing test automation to oVirt Node.&lt;br/&gt;It was challenging because &lt;a href="http://www.ovirt.org/Node"&gt;oVirt Node&lt;/a&gt; is based on a LiveCD - at boot and post-installtion. (The whole LiveCD is used as a r/o rootfs.)&lt;br/&gt;&lt;br/&gt;To allow an automated testing of oVirt Node, I&amp;rsquo;ve been working on &lt;a href="https://gitorious.org/ovirt/igord"&gt;igor&lt;/a&gt;. It allows us to test oVirt Node on real hardware an in VMs.&lt;br/&gt;&lt;br/&gt;When you throw all the new features (see below - libvirt-only, new igorc, new igor events service, junit-reports for jobs) together you can do a complete testsuite run on an oVirt Node ISO with one command.&lt;br/&gt;&lt;br/&gt;And this is how it looks (view it in fullscreen to see all the nifty details, but this will leave you without the &lt;a href="http://fabiand.fedorapeople.org/igor/Bildschirmaufzeichnung%20von%2025.04.2013%2013:28:28.webm.srt"&gt;subtitles&lt;/a&gt; explaining what&amp;rsquo;s happening):&lt;br/&gt;&lt;br/&gt;&lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"&gt;&lt;/script&gt;&lt;script src="http://v2v.cc/~j/jquery.srt/jquery.srt.js"&gt;&lt;/script&gt;&lt;style type="text/css"&gt;.srt { padding: .5em; font-family: sans-serif; background: gray; color: white; display: auto; } &lt;/style&gt;&lt;video controls="controls" id="video" preload="auto" style="width: 100%;"&gt;&lt;source src="http://fabiand.fedorapeople.org/igor/Bildschirmaufzeichnung%20von%2025.04.2013%2013:28:28.webm" type="video/ogg"&gt;&lt;/source&gt;&lt;track kind="subtitle" label="English" src="http://fabiand.fedorapeople.org/igor/Bildschirmaufzeichnung%20von%2025.04.2013%2013:28:28.webm.srt" srclang="en-US"&gt;&lt;/track&gt;    Your browser does not support HTML5 video. &lt;/video&gt;&lt;br/&gt;&lt;div class="srt" data-video="video"&gt;0 00:00:00,000 &amp;ndash;&amp;gt; 00:00:00,100  1 00:00:00,100 &amp;ndash;&amp;gt; 00:00:03,000 Launching igorc  2 00:00:03,000 &amp;ndash;&amp;gt; 00:00:12,000 igorc (left) extracts LiveCD, creates a profile and submits a new job  3 00:00:27,000 &amp;ndash;&amp;gt; 00:00:32,000 igord created a VM (right) and boots it up (from a CD derived from the igord profile)  4 00:00:40,000 &amp;ndash;&amp;gt; 00:01:00,000 VM (right) boots and the autoinstall is performed  5 00:01:36,000 &amp;ndash;&amp;gt; 00:01:45,000 Installation finished (Ctrl-Alt-Del is sent to the VM to reboot [that&amp;rsquo;s a known bug])  6 00:01:58,000 &amp;ndash;&amp;gt; 00:02:05,000 The VM now boots from HD  7 00:02:20,000 &amp;ndash;&amp;gt; 00:02:27,000 An igor-service is now started in the background (within the VM) to communicate with igord  8 00:02:34,000 &amp;ndash;&amp;gt; 00:02:39,000 The igor-service tells igord about the ocmpletion of the first testcase, which is then picked up by igorc (left).  9 00:02:39,000 &amp;ndash;&amp;gt; 00:02:45,000 A couple of more testcases were completed (left) and a reboot is initiated (by the igor-service within the VM)  10 00:02:48,000 &amp;ndash;&amp;gt; 00:03:10,000 The VM (right) reboots  11 00:03:46,000 &amp;ndash;&amp;gt; 00:03:59,000 All testcases passed and the VM is torn down by igord  &lt;/div&gt;&lt;br/&gt;This is a big step forward - even if there are still some issues outstanding to achieve the goal to make testcase development fun.&lt;br/&gt;&lt;br/&gt;Now that we&amp;rsquo;ve seen the fancy part some background and open issues.&lt;br/&gt;One pitfall - up to this week - was the hurdle to get igor up an  running. Igor used to require Cobbler - and cobbler is not easy to setup  on Fedora 18 (which I use to build an test oVirt Node - which itself is  based on Fedora 18 packages).&lt;br/&gt;&lt;br/&gt;Anyhow - long story  short - Igor has a &amp;ldquo;feature complete&amp;rdquo; &amp;ldquo;backend&amp;rdquo; for libvirt now, that  means, igor doesn&amp;rsquo;t need cobbler anymore. Furthermore I&amp;rsquo;ve added a brand  new igor client (called igorc) which communicates with igord (the  daemon doing all the coordination work).&lt;br/&gt;This client has some  &amp;ldquo;advanced&amp;rdquo; features  like pretty printing of junit results (Igor offers  the result of the testruns in junit&amp;rsquo;s XML format).&lt;br/&gt;&lt;br/&gt;Some open issues:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;ovirt-node needs a target to build a testable ISO&lt;/li&gt;&lt;li&gt;igor needs a feature to upload testsuites from the client side &lt;/li&gt;&lt;/ul&gt;All of this is up in the igor repository. ovirt-node related patches (e.g. merging of the igor plugin are pending). Just follow the &lt;a href="http://lists.ovirt.org/pipermail/node-devel/"&gt;node-devel ml&lt;/a&gt; to see when is is ready for daily usage.&lt;br/&gt;That&amp;rsquo;s it for now - thanks for watching.</regular-body><tag>virt-manager</tag><tag>ovirt</tag><tag>fedora</tag><tag>node</tag><tag>igor</tag><tag>libvirt</tag></post><post id="51492046662" url="https://dummdida.tumblr.com/post/51492046662" url-with-slug="https://dummdida.tumblr.com/post/51492046662/rust-06-for-fedora" type="regular" date-gmt="2013-04-19 14:07:00 GMT" date="Fri, 19 Apr 2013 16:07:00" unix-timestamp="1366380420" format="html" reblog-key="Wk3x5HiO" slug="rust-06-for-fedora" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Rust 0.6 for Fedora</regular-title><regular-body>&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://www.rust-lang.org/logos/rust-logo-128x128-blk.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://www.rust-lang.org/logos/rust-logo-128x128-blk.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;The &lt;a href="http://dummdida.blogspot.de/2013/03/a-package-for-rust-mozillas.html"&gt;previous&lt;/a&gt; draft spec wasn&amp;rsquo;t able to build rust with the official 0.6 sources. The spec file is now updated and you can build your own rust package using:&lt;br/&gt;&lt;pre&gt;$ curl -O &lt;a href="https://raw.github.com/fabiand/rust-spec/master/rust.spec"&gt;https://raw.github.com/fabiand/rust-spec/master/rust.spec&lt;/a&gt;&lt;br/&gt;$ nice ionice rpmbuild --noclean -ba -v rust.spec&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;It is assumed that you&amp;rsquo;ve got a working fedora-package setup and an internet connection.&lt;br/&gt;&lt;br/&gt;Changes are mainly that &lt;code&gt;chrpath&lt;/code&gt; is used to remove rpaths from files. Rust is still using it&amp;rsquo;s own libuv and llvm.</regular-body><tag>rust</tag><tag>llvm</tag><tag>fedora</tag><tag>libuv</tag></post><post id="51492044388" url="https://dummdida.tumblr.com/post/51492044388" url-with-slug="https://dummdida.tumblr.com/post/51492044388/getting-efi-ovmf-into-libvirt" type="regular" date-gmt="2013-04-04 13:58:00 GMT" date="Thu, 04 Apr 2013 15:58:00" unix-timestamp="1365083880" format="html" reblog-key="EKNCIiZ7" slug="getting-efi-ovmf-into-libvirt" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Getting EFI (OVMF) into libvirt</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/tamaleaver/6801803312/" title="OMG! von Tama Leaver bei Flickr"&gt;&lt;img alt="OMG!" height="215" src="http://farm8.staticflickr.com/7190/6801803312_31808b8f4d_n.jpg" width="320"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;Finally it&amp;rsquo;s working like a charm - booting a VM with EFI (instead of a BIOS).&lt;br/&gt;&lt;br/&gt;lersek pointed me to a page describing &lt;a href="https://fedoraproject.org/wiki/Testing_secureboot_with_KVM"&gt;how to test SecureBoot with Fedora&lt;/a&gt; this implies the usage of EFI. And that page contains a link to an rpm carrying the EFI payload. Awesome.&lt;br/&gt;&lt;br/&gt;After installing the RPM you only need to tell libvirt to use that bootloader instead of the default one.&lt;br/&gt;&lt;br/&gt;All you need to do:&lt;br/&gt;&lt;pre&gt;# Install a prerequirement&lt;br/&gt;$ sudo &lt;a href="http://dummdida.blogspot.de/2013/03/package-management-w-dnf-is-fast.html"&gt;dnf&lt;/a&gt; install seavgabios-bin ipxe-roms ipxe-roms-qemu&lt;br/&gt;&lt;br/&gt;# Install OVMF&lt;br/&gt;$ sudo rpm -ivh &lt;a href="http://fedorapeople.org/~crobinso/%5C"&gt;http://fedorapeople.org/~crobinso/\&lt;/a&gt;&lt;br/&gt;    secureboot/edk2.manual-0-0.20130221.944c84a6.x86_64.rpm&lt;br/&gt;&lt;br/&gt;# Create a VM pointing to OVMF&lt;br/&gt;$ sudo virt-install --name f18-uefi \&lt;br/&gt;                    --ram 2048 \&lt;br/&gt;                    --boot loader=/usr/share/edk2.manual/\&lt;br/&gt;                                  ovmf-x64/OVMF-pure-efi.fd \&lt;br/&gt;                    --disk f18-uefi.qcow,format=qcow2,size=10 \&lt;br/&gt;                    --os-variant fedora18 \&lt;br/&gt;                    --cdrom /path/to/Fedora-18-x86_64-DVD.iso&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;That&amp;rsquo;s it! I&amp;rsquo;m truly amazed.&lt;br/&gt;&lt;br/&gt;Btw.: oVirt Node can also be tested this way. Sadly it currently crashes under EFI.</regular-body><tag>kvm</tag><tag>fedora</tag><tag>efi</tag><tag>qemu</tag><tag>node</tag><tag>libvirt</tag></post><post id="51492042982" url="https://dummdida.tumblr.com/post/51492042982" url-with-slug="https://dummdida.tumblr.com/post/51492042982/package-management-w-dnf-is-fast" type="regular" date-gmt="2013-03-20 14:37:00 GMT" date="Wed, 20 Mar 2013 15:37:00" unix-timestamp="1363790220" format="html" reblog-key="Nc9f3dPZ" slug="package-management-w-dnf-is-fast" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Package management w/ dnf is fast</regular-title><regular-body>Yum feels slow sometimes. That&amp;rsquo;s not new. I was impressed by &lt;a href="http://dummdida.blogspot.de/2012/03/package-management-using-zif.html"&gt;zif&lt;/a&gt; and how much quicker it is. And now, once again I&amp;rsquo;m impressed how quick &lt;a href="https://fedoraproject.org/wiki/Features/DNF"&gt;dnf&lt;/a&gt; is.&lt;br/&gt;Besides beeing quick - dnf is also looking quite clean.&lt;br/&gt;So let&amp;rsquo;s see when it get&amp;rsquo;s into a prominent position, for now you can install it on Fedora 18 by using&lt;br/&gt;&lt;pre&gt;$ sudo yum install -y dnf&lt;br/&gt;&lt;/pre&gt;The commandset is not yet as comprehensive as yums, but the basics are working.</regular-body><tag>yum</tag><tag>fedora</tag><tag>dnf</tag></post><post id="51492040895" url="https://dummdida.tumblr.com/post/51492040895" url-with-slug="https://dummdida.tumblr.com/post/51492040895/debugging-systemd" type="regular" date-gmt="2013-03-18 09:08:00 GMT" date="Mon, 18 Mar 2013 10:08:00" unix-timestamp="1363597680" format="html" reblog-key="XMHQU95z" slug="debugging-systemd" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Debugging systemd</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/gwise90/6013198083/" title="Daemon Prince of Slaanesh (Front) von Gwise90 bei Flickr"&gt;&lt;img alt="Daemon Prince of Slaanesh (Front)" height="240" src="http://farm7.staticflickr.com/6030/6013198083_dc74eb11db_n.jpg" width="320"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;There was this issue where &lt;a href="http://ovirt.org/wiki/Node"&gt;oVirt Node&lt;/a&gt; wouldn&amp;rsquo;t &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=920208"&gt;restart&lt;/a&gt; after an auto-install. systemd got blocked by something. These &lt;a href="http://freedesktop.org/wiki/Software/systemd/Debugging#Debug_Logging_to_a_Serial_Console"&gt;two&lt;/a&gt; &lt;a href="https://fedoraproject.org/wiki/How_to_debug_Systemd_problems"&gt;links&lt;/a&gt; helped me debugging this issue.</regular-body><tag>reminder</tag><tag>ovirt</tag><tag>fedora</tag><tag>node</tag><tag>systemd</tag></post><post id="51492038691" url="https://dummdida.tumblr.com/post/51492038691" url-with-slug="https://dummdida.tumblr.com/post/51492038691/upgrading-from-f16-to-f18-no-need-for-a-rolling" type="regular" date-gmt="2013-03-18 08:23:00 GMT" date="Mon, 18 Mar 2013 09:23:00" unix-timestamp="1363594980" format="html" reblog-key="x8cFH5TW" slug="upgrading-from-f16-to-f18-no-need-for-a-rolling" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Upgrading from F16 to F18 - no need for a rolling release ...</regular-title><regular-body>&lt;div class="separator" style="text-align: center;"&gt;&lt;a href="https://fedoraproject.org/static/images/banners/f16release.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://fedoraproject.org/static/images/banners/f16release.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;It was last week when a couple of issues summed up and forced me to think about how to update my working machine from Fedora 16 to Fedora 18.&lt;br/&gt;Basically I had the choice between running a fresh (after a decent backup)  install or upgrading from Fedora 16, via 17, to 18.&lt;br/&gt;In general I really prefer doing fresh installs - as you get a clean  system and old cruft is removed, but this time I tried to avoid to  backup all the little pieces which somehow tangent my work environment.&lt;br/&gt;Those pieces ain&amp;rsquo;t mission critical, it&amp;rsquo;s just that re-creating them is boring.&lt;br/&gt;Long story short - I just went the upgrade path, with doing a fresh install being my fallback solution.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="text-align: center;"&gt;&lt;a href="https://fedoraproject.org/static/images/banners/f17release.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://fedoraproject.org/static/images/banners/f17release.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;I ran pre-upgrade on the Fedora 16, which initially failed (It got confused by the EFI setup), but this could be fixed by manually adding the grub entry for booting up pre-upgrade.&lt;br/&gt;It took a couple of hours until the upgrade was finished. But everything seemed to work. After trying a couple of applications, I installed fedup and - just waited. It felt a bit longer but also finally succeeded.&lt;br/&gt;I was a bit concerned right after the update, because I was confronted with a dracut rescue shell. But a reboot helped.&lt;br/&gt;It seems that there is a time out for lucks prompt, which drops you to the emergency shell in case you don&amp;rsquo;t enter the password in time.&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="text-align: center;"&gt;&lt;a href="https://fedoraproject.org/static/images/banners/f18release.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://fedoraproject.org/static/images/banners/f18release.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="clear: both;"&gt;&lt;/div&gt;&lt;br/&gt;Now, two days later, everything is still working. Only the kerberos client UI is missing and I had to install realmd.&lt;br/&gt;The thing about this is, that I actually didn&amp;rsquo;t expect this upgrade path to work. I expected more hassles.</regular-body><tag>updgrade</tag><tag>fedup</tag><tag>fedora</tag><tag>pre-uprade</tag></post><post id="51492036106" url="https://dummdida.tumblr.com/post/51492036106" url-with-slug="https://dummdida.tumblr.com/post/51492036106/a-package-for-rust-mozillas-experimental" type="regular" date-gmt="2013-03-05 19:47:00 GMT" date="Tue, 05 Mar 2013 20:47:00" unix-timestamp="1362512820" format="html" reblog-key="LkdtjN3K" slug="a-package-for-rust-mozillas-experimental" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>A package for rust - Mozilla's experimental language</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://www.rust-lang.org/logos/rust-logo-128x128-blk.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://www.rust-lang.org/logos/rust-logo-128x128-blk.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;a href="http://www.mozilla.org/"&gt;Mozilla&lt;/a&gt; has picked up a language to address a couple of common issues in coding. The language they picked is &lt;a href="http://www.rust-lang.org/"&gt;rust&lt;/a&gt;.&lt;br/&gt;It doesn&amp;rsquo;t fit into my current environment, but it has some nice features, like lightweight threads (green threads) and message passing support which make it interesting for me to play with. These are two features which I am missing in &lt;a href="http://www.vala-project.org/"&gt;vala&lt;/a&gt; - but they might just be a bit out of scope of vala&amp;rsquo;s focus.&lt;br/&gt;&lt;br/&gt;I&amp;rsquo;ve only played with rust a little, but to ease Fedora users access to this language I&amp;rsquo;ve created an initial &lt;a href="https://github.com/fabiand/rust-spec/blob/master/rust.spec"&gt;specfile&lt;/a&gt; which can be used to build the package.&lt;br/&gt;&lt;strike&gt;For convenience I&amp;rsquo;m also providing an rpm.&lt;/strike&gt;&lt;br/&gt;&lt;br/&gt;Rust is currently not suitable for an official inclusion into Fedora&amp;rsquo;s repositories as it builds it&amp;rsquo;s own &lt;a href="https://github.com/mozilla/rust/issues/4259"&gt;patched version of llvm&lt;/a&gt;, does some stuff with &lt;a href="https://github.com/mozilla/rust/issues/5219"&gt;rpaths&lt;/a&gt;, …. There is work to upstream the patches, but that&amp;rsquo;s still far in the future.&lt;br/&gt;&lt;br/&gt;So - &lt;a href="https://github.com/fabiand/rust-spec"&gt;pick it up&lt;/a&gt; and install it, look at the quite nice &lt;a href="http://doc.rust-lang.org/doc/tutorial.html"&gt;tutorial&lt;/a&gt; and get your hands dirty.&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;# Clone&lt;br/&gt;git clone git://github.com/fabiand/rust-spec.git&lt;br/&gt;&lt;br/&gt;# Build requirements&lt;br/&gt;sudo yum install gcc gcc-c++ python perl curl fedora-packager&lt;br/&gt;&lt;br/&gt;# Build it&lt;br/&gt;cd rust-spec&lt;br/&gt;rpmbuild -ba rust.spec&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Edit: It is assumed that your &lt;a href="https://fedoraproject.org/wiki/How_to_create_an_RPM_package"&gt;env is set up for building packages&lt;/a&gt;</regular-body><tag>mozilla</tag><tag>rust</tag><tag>fedora</tag><tag>rpm</tag></post><post id="51492034231" url="https://dummdida.tumblr.com/post/51492034231" url-with-slug="https://dummdida.tumblr.com/post/51492034231/ovirt-node-261" type="regular" date-gmt="2013-03-01 13:25:00 GMT" date="Fri, 01 Mar 2013 14:25:00" unix-timestamp="1362144300" format="html" reblog-key="gw5gXdJQ" slug="ovirt-node-261" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>oVirt Node 2.6.1</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/catholicism/8517171998/" title="Pope Benedict XVI  in Castel Gandolfo von Catholic Church (England and Wales) bei Flickr"&gt;&lt;img alt="Pope Benedict XVI  in Castel Gandolfo" height="211" src="http://farm9.staticflickr.com/8242/8517171998_dd0614e34f_n.jpg" width="320"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;Node 2.6.1- a very slim firmware-like Fedora for oVirt Node - has been released.&lt;br/&gt;This minor release was necessary because our major TUI rework introduced a security hole. &lt;a href="http://www.ovirt.org/Node#Current_Release"&gt;Get it here&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;So whats new about Node 2.6.x?&lt;br/&gt;Well, we&amp;rsquo;ve got plugins and a new TUI (a new installer TUI will follow shortly).&lt;br/&gt;More can be found in the &lt;a href="http://www.ovirt.org/Node_Release_Notes"&gt;release notes&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;And whats coming up?&lt;br/&gt;It obvious that a &amp;ldquo;solid core&amp;rdquo; or this &amp;ldquo;firmware like&amp;quot;  properties of Node are well suited for other projects as well (think of OpenStack, Gluster, &amp;hellip;)&lt;br/&gt;So a near term goal is to dro the oVirt specific bits (like vdsm) to make Node more general and easier to use for other projects.&lt;br/&gt;And the new installer shall also land.</regular-body><tag>urwid</tag><tag>pope</tag><tag>ovirt</tag><tag>fedora</tag><tag>node</tag></post><post id="51492031884" url="https://dummdida.tumblr.com/post/51492031884" url-with-slug="https://dummdida.tumblr.com/post/51492031884/nothing-new-just-gnome-3" type="regular" date-gmt="2013-01-25 10:34:00 GMT" date="Fri, 25 Jan 2013 11:34:00" unix-timestamp="1359110040" format="html" reblog-key="N3waj4Pa" slug="nothing-new-just-gnome-3" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Nothing new, just GNOME 3</regular-title><regular-body>&lt;p&gt;GNOME 3 is my favorite DE. &lt;br/&gt;I really appreciate how much works has gone into GNOME. Into the UI and below the surface. Seen from my perspective GNOME - as on Fedora - turns into the best system-integrated DE. The control-center can actually be used to control system stuff - thanks to all the changes that happened below, within cups, systemd, pulseaudio, colord, &amp;hellip; To me Fedora feels more like one system, and not several layered components.&lt;br/&gt;Sure, the changes were disruptive and not every one is happy with the results - but that&amp;rsquo;s just normal. And I wonder about all this ranting and bashing on changes.&lt;br/&gt;In the case of GNOME it&amp;rsquo;s also nice and somewhat refreshing to see that there is a plan - a vision - of where to go and what to form.&lt;/p&gt;</regular-body><tag>gnome</tag><tag>fedora</tag></post><post id="51492030206" url="https://dummdida.tumblr.com/post/51492030206" url-with-slug="https://dummdida.tumblr.com/post/51492030206/igor-testing-an-os-on-real-and-virtual-hardware" type="regular" date-gmt="2012-11-22 12:01:00 GMT" date="Thu, 22 Nov 2012 13:01:00" unix-timestamp="1353585660" format="html" reblog-key="8GRWoktK" slug="igor-testing-an-os-on-real-and-virtual-hardware" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Igor - Testing an OS on real and virtual hardware</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/francescagallina/6511198217/" title="Igor Mitoraj nella Valle dei templi von Francesca Gallina bei Flickr"&gt;&lt;img src="http://farm8.staticflickr.com/7152/6511198217_7708fd6ce2_m.jpg" width="240" height="160" alt="Igor Mitoraj nella Valle dei templi"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;Working on &lt;a href="http://www.ovirt.org/"&gt;oVirt Node&lt;/a&gt; is nice, this minimal, firmware like, rock-solid, (non-official) Fedora &amp;ldquo;spin&amp;rdquo;, is oVirts &amp;ldquo;hypervisor&amp;rdquo;.&lt;br/&gt;&lt;br/&gt;One challenge is to keep Node rock-solid. &lt;br/&gt;Typically you can add unit tests to your software to shield yourself from regressions (or at least discover them early) but adding tests to Node wasn&amp;rsquo;t that easy as Node is a complete &amp;ldquo;operating system&amp;rdquo; and not just one component. It is currently composed of approximately 450 packages - all of these change independetly.&lt;br/&gt;&lt;br/&gt;We were looking for a way to automate &lt;a href="http://wiki.ovirt.org/wiki/Node_Testing"&gt;some basic tests on development or released images&lt;/a&gt;. But a requirement to run the tests is a running Node. This means testing requires an installation (and subsequent a removal or &amp;ldquo;freeing&amp;rdquo; of th eused host) on different hardware, including virtual machines.&lt;br/&gt;So we needed a tool that could control the whole life-cycle (provision, run tests, and freeing) of a machine (either real or virtual) and which is also monitoring the progress of a testsuite, to act accordingly (e.g. killing it if it times out).&lt;br/&gt;We did not find such a tool and came up with igor.&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-GK2s1ogdEuI/UKJIFZmTE8I/AAAAAAAAAIo/DHpDSi9ZLGY/s1600/favicon.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-GK2s1ogdEuI/UKJIFZmTE8I/AAAAAAAAAIo/DHpDSi9ZLGY/s1600/favicon.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;Igor expects a working PXE environment (so a lan with some DHCP and PXE server like Cobbler) and some hosts or a libvirtd instance. It is expected that all hosts (real and virtual) boot via PXE from the PXE server.&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-5Mqw9fr3y3k/UK4Pn6cG-PI/AAAAAAAAAI4/uEWL64ywE9Y/s1600/topology.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-5Mqw9fr3y3k/UK4Pn6cG-PI/AAAAAAAAAI4/uEWL64ywE9Y/s1600/topology.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;In such an environemtn Igor can control the PXE server to modify the configuration for existing hosts (or add configuration for short-living hosts like a VM) to install an oVirt Node image.&lt;br/&gt;After changing the PXE configuration and booting up the host Igor steps back and either waits for a controlled ending of the testsuite (signaled via a RESTlike API) or a timeout. When it receives such a signal it shuts down the host and restores the original PXE configuration.&lt;br/&gt;&lt;br/&gt;So that&amp;rsquo;s a first build-block of how we automated the testing of oVirt Node. I haven&amp;rsquo;t gone into detail how the testcases look like and how we are actually testing our TUI. Also I didn&amp;rsquo;t mention the client which is running on (an edited) oVirt Node image tu actually run the tests.&lt;br/&gt;&lt;br/&gt;Igor can be found &lt;a href="https://gitorious.org/ovirt/igord"&gt;here&lt;/a&gt; and is intended to be used on a developers machine (or in conjuction with &lt;a href="http://www.jenkins-ci.org/"&gt;jenkins&lt;/a&gt;).&lt;br/&gt;&lt;br/&gt;p.s.: It is getting interesting when Igor is paired with a client using &lt;a href="https://github.com/tuomasjjrasanen/python-uinput"&gt;python-uinput&lt;/a&gt; to inject mouse and keyboard events.</regular-body><tag>testing</tag><tag>ovirt</tag><tag>fedora</tag><tag>jenkins</tag><tag>cobbler</tag><tag>node</tag><tag>igor</tag></post><post id="51492028382" url="https://dummdida.tumblr.com/post/51492028382" url-with-slug="https://dummdida.tumblr.com/post/51492028382/bobthegnome-gcalctool-and-vala" type="regular" date-gmt="2012-10-18 11:58:00 GMT" date="Thu, 18 Oct 2012 13:58:00" unix-timestamp="1350561480" format="html" reblog-key="6dTqyKHB" slug="bobthegnome-gcalctool-and-vala" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>bobthegnome, gcalctool and vala</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://git.gnome.org/browse/gnome-icon-theme/plain/src/accessories-calculator.svg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://git.gnome.org/browse/gnome-icon-theme/plain/src/accessories-calculator.svg" width="320"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;a href="http://git.gnome.org/browse/gcalctool"&gt;gcalctool&lt;/a&gt; is the friendly calculater in &lt;a href="http://www.gnome.org/"&gt;GNOME&lt;/a&gt;. And now - after several others (at least cheese, zeitgeist, gnome-games)- it is ported to &lt;a href="http://live.gnome.org/Vala"&gt;vala&lt;/a&gt;! Wow.&lt;br/&gt;&lt;br/&gt;This didn&amp;rsquo;t happen out of the blue, it was someone actually doing it - &lt;a href="http://bobthegnome.blogspot.de/"&gt;bobthegnome&lt;/a&gt; and PioneerAxon made this happen.&lt;br/&gt;What does this mean? gcalctool should be easier to maintain and maybe attract even more contributors, as you don&amp;rsquo;t have to deal with the whole &lt;a href="http://www.gtk.org/"&gt;boilerplate&lt;/a&gt;. And - Vala is gaining momentum. Nice. Cheers.&lt;br/&gt;&lt;br/&gt;</regular-body><tag>gnome</tag><tag>vala</tag><tag>fedora</tag></post><post id="51492025268" url="https://dummdida.tumblr.com/post/51492025268" url-with-slug="https://dummdida.tumblr.com/post/51492025268/opus-nowsoon-in-gstreamer-plugins-bad-free" type="regular" date-gmt="2012-09-13 09:49:00 GMT" date="Thu, 13 Sep 2012 11:49:00" unix-timestamp="1347529740" format="html" reblog-key="IYOqVm01" slug="opus-nowsoon-in-gstreamer-plugins-bad-free" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Opus now/soon in gstreamer-plugins-bad-free</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Opus_logo2.svg/320px-Opus_logo2.svg.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="113" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Opus_logo2.svg/320px-Opus_logo2.svg.png" width="200"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;Opus is a new audio codec covering a wide range of use cases. You can read more about the codec (at least) &lt;a href="http://en.wikipedia.org/wiki/Opus_%28audio_format%29"&gt;here&lt;/a&gt; and &lt;a href="http://www.xiph.org/press/2012/rfc-6716/"&gt;here&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;If you want to get started with it, just try a &lt;a href="https://admin.fedoraproject.org/updates/gstreamer-plugins-bad-free-0.10.23-8.fc17"&gt;freshly rebuild gstreamer-plugins-bad-free package&lt;/a&gt; which packages the opus plugin. &lt;br/&gt;You will be able to use the en- and decoders in your normal gst pipeline.&lt;br/&gt;&lt;br/&gt;It should soon land as an update on Fedora near you.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;[Update]&lt;/b&gt;&lt;br/&gt;The update has landed in updates testing:&lt;br/&gt;&lt;pre class="bz_comment_text" id="comment_text_6"&gt;su -c 'yum update --enablerepo=updates-testing gstreamer-plugins-bad-free-0.10.23-11.fc18'&lt;/pre&gt;</regular-body><tag>fedora</tag><tag>gstreamer</tag><tag>opus</tag><tag>presence</tag></post><post id="51492024621" url="https://dummdida.tumblr.com/post/51492024621" url-with-slug="https://dummdida.tumblr.com/post/51492024621/easier-streaming-with-presence-048" type="regular" date-gmt="2012-09-08 07:34:00 GMT" date="Sat, 08 Sep 2012 09:34:00" unix-timestamp="1347089640" format="html" reblog-key="3mFNExdF" slug="easier-streaming-with-presence-048" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Easier streaming with presence-0.4.8</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-5OqZ5QdKSJ4/UEZM3DlS2jI/AAAAAAAAAIY/uSM2Du5jVTc/s1600/Bildschirmfoto+am+2012-09-04+20:45:06.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="191" src="http://2.bp.blogspot.com/-5OqZ5QdKSJ4/UEZM3DlS2jI/AAAAAAAAAIY/uSM2Du5jVTc/s320/Bildschirmfoto+am+2012-09-04+20:45:06.png" width="320"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;a href="http://dummdida.blogspot.de/p/presence.html"&gt;Presence&lt;/a&gt; is a small - but yet flexible - tool to do simple and high-quality streaming (using dirac+vorbis over RTP) in a local broadcast domain.&lt;br/&gt;When not using the MDNS feature this can also be endpoints on any routable network.&lt;br/&gt;Not shown on in the screen shot, but a feature, is picture-in-picture mode for secondary streams.&lt;br/&gt;&lt;br/&gt;Anyhow, this new release (0.4.8) contains an improvement related to publishing a stream. It&amp;rsquo;s now done in two clicks with reasonable defaults, even for low-end machines.&lt;br/&gt;&lt;br/&gt;Install or update it now on Fedora 16/17/18: &lt;br/&gt;&lt;pre&gt;$ sudo yum clean metadata&lt;br/&gt;$ sudo yum install --enablerepo=updates-testing presence&lt;br/&gt;# or&lt;br/&gt;$ sudo yum update --enablerepo=updates-testing presence&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Or - hero-like -using &lt;a href="https://admin.fedoraproject.org/pkgdb/applications/Presence"&gt;this one-click technology&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;The release was motivated by my new &lt;a href="http://www.logitech.com/de-de/webcam-communications/webcams/hd-pro-webcam-c920"&gt;Logitech HD Pro Webcam C920&lt;/a&gt; which is working out of the box on Fedora - so YUV and MJPEG besides the (unsupported) h.264 support.&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://www.logitech.com/assets/41864/2/hd-pro-webcam-c920-feature-image.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://www.logitech.com/assets/41864/2/hd-pro-webcam-c920-feature-image.png" width="291"/&gt; &lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;When looking at the video quality of this camera and two built-in cameras of laptops, this is clearly a big step forward in image quality - So a decent camera is always a good way to improve a video conference.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;As said, the video quality is great - and using MJPEG it can deliver a 720p video with up to 24fps, so ideal for telepresence. &lt;/div&gt;</regular-body><tag>c920</tag><tag>dirac</tag><tag>fedora</tag><tag>logitech</tag><tag>presence</tag><tag>schroedinger</tag><tag>webcam</tag></post><post id="51492023698" url="https://dummdida.tumblr.com/post/51492023698" url-with-slug="https://dummdida.tumblr.com/post/51492023698/screenshotting-devvcs" type="regular" date-gmt="2012-09-03 14:12:00 GMT" date="Mon, 03 Sep 2012 16:12:00" unix-timestamp="1346681520" format="html" reblog-key="EBqwOesa" slug="screenshotting-devvcs" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Screenshotting /dev/vcs</regular-title><regular-body>If you ever wanted to know how to take a &amp;ldquo;screenshot&amp;rdquo; of a VCS (where your login prompt is displayed) you can use the following snippet:  &lt;pre&gt;&lt;br/&gt;cat ../tests/igor/libs/common/vcs.py &lt;br/&gt;#!/bin/env python&lt;br/&gt;#&lt;br/&gt;# bash only:&lt;br/&gt;# su -c 'cat /dev/vcs3 | fold -w $(stty size | cut -d " " -f 2) &amp;gt; /tmp/term'&lt;br/&gt;#&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;import Image, ImageDraw&lt;br/&gt;import subprocess&lt;br/&gt;import argparse&lt;br/&gt;import sys&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;def execute(cmd):&lt;br/&gt;    proc = subprocess.Popen(cmd, shell=True, \&lt;br/&gt;                            stdout=subprocess.PIPE, \&lt;br/&gt;                            stderr=subprocess.STDOUT)&lt;br/&gt;    (stdout, stderr) = proc.communicate()&lt;br/&gt;    proc.wait()&lt;br/&gt;    return str(stdout)&lt;br/&gt;&lt;br/&gt;def get_size_of_tty(n):&lt;br/&gt;    """Return the number of rows and cols of tty n&lt;br/&gt;    """&lt;br/&gt;    cmd = "stty -F /dev/tty%d size" % n&lt;br/&gt;    rows, cols = execute(cmd).split(" ")&lt;br/&gt;    return (int(rows), int(cols))&lt;br/&gt;&lt;br/&gt;def capture_vcs(n, fold_at):&lt;br/&gt;    """Return the contents of vcs n&lt;br/&gt;    Thsi can also be used with (bash) fold -w&lt;br/&gt;    """&lt;br/&gt;    tty = "/dev/vcs%d" % n&lt;br/&gt;    cmd = "cat %s | fold -w %d" % (tty, fold_at)&lt;br/&gt;    return execute(cmd)&lt;br/&gt;&lt;br/&gt;def image_from_vcs(n, stridex=6, stridey=12):&lt;br/&gt;    """Create an image from vcs n&lt;br/&gt;    """&lt;br/&gt;    height, width = get_size_of_tty(n)&lt;br/&gt;    im = Image.new(Image.MODES[6], (width * stridex, height * stridey))&lt;br/&gt;    draw = ImageDraw.Draw(im)&lt;br/&gt;    nl = 0&lt;br/&gt;    screen = capture_vcs(n, fold_at=width)&lt;br/&gt;    for line in screen.split("\n"):&lt;br/&gt;        draw.text((0, stridey * nl), line)&lt;br/&gt;        nl += 1&lt;br/&gt;    return im&lt;br/&gt;&lt;br/&gt;def screenshot_from_vcs(n, filename, format="png"):&lt;br/&gt;    """Create a screenshot of a vcs and write it to a file&lt;br/&gt;    """&lt;br/&gt;    im = image_from_vcs(args.vcs)&lt;br/&gt;    im.save(open(filename, "wb"), format.upper())&lt;br/&gt;&lt;br/&gt;if __name__ == '__main__':&lt;br/&gt;    parser = argparse.ArgumentParser(description='Create a screenshot from ' +&lt;br/&gt;                                                 'a console.')&lt;br/&gt;    parser.add_argument('vcs', type=int,&lt;br/&gt;                        help='The VCS/TTY to be captured')&lt;br/&gt;    parser.add_argument('--format', metavar='t', type=str,&lt;br/&gt;                        choices=['png'], default="png",&lt;br/&gt;                        help='The image format')&lt;br/&gt;    parser.add_argument('file', metavar='dst', type=str,&lt;br/&gt;                        help='The destination file')&lt;br/&gt;    args = parser.parse_args()&lt;br/&gt;    screenshot_from_vcs(args.file, args.format.upper())&lt;br/&gt;&lt;/pre&gt; The images can be used to create a screen capture of your console.</regular-body><tag>screenshot</tag><tag>vcs</tag><tag>ovirt</tag><tag>python</tag><tag>bash</tag></post><post id="51492023079" url="https://dummdida.tumblr.com/post/51492023079" url-with-slug="https://dummdida.tumblr.com/post/51492023079/auto-bash-wrapper-creation-for-python-functions" type="regular" date-gmt="2012-07-05 11:28:00 GMT" date="Thu, 05 Jul 2012 13:28:00" unix-timestamp="1341487680" format="html" reblog-key="LV6OL3ow" slug="auto-bash-wrapper-creation-for-python-functions" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Auto bash wrapper creation for python functions and oVirt Node CI testing</regular-title><regular-body>&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center&gt;&lt;a href="http://www.flickr.com/photos/dippy_duck/3799193224/" title="Well Wrapped von Mr. Ducke bei Flickr"&gt;&lt;img alt="Well Wrapped" height="240" src="http://farm3.staticflickr.com/2467/3799193224_93493f8eaa_n.jpg" width="320"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;There is currently working going on on bringing &lt;a href="http://ovirt.org/wiki/Node_Testing"&gt;CI testing to oVirt Node&lt;/a&gt; - our smallish Fedora based &amp;ldquo;hypervisor&amp;rdquo;.&lt;br/&gt;Enabling automated testing is quite a challenge, because &lt;a href="http://ovirt.org/wiki/Node"&gt;Node&lt;/a&gt; is not using anaconda/kickstart for installation, works with a read-only rootfs and uses a snack/newt based TUI. Many existing automated testing solutions have problems with some these aspects - because they rely on kickstart or on ATK.&lt;br/&gt;&lt;br/&gt;Anyhow, the &lt;a href="http://gerrit.ovirt.org/gitweb?p=ovirt-node-tests.git;a=tree;f=tcs;hb=HEAD"&gt;testcases&lt;/a&gt; which are run on Node are typically written in bash or python. There are a couple of common functions that are needed in both languages (e.g. to communicate with the testing server or providing a common logging function).&lt;br/&gt;It&amp;rsquo;s quite error prone to have functions in both languages providing the same functionality, and that was the point where I looked for a method to automatically or &amp;ldquo;natively&amp;rdquo; call python functions from bash (not &lt;a href="https://github.com/amoffat/pbs/"&gt;calling bash from python&lt;/a&gt;).&lt;br/&gt;Searching didn&amp;rsquo;t lead to any good alternative, therefor I&amp;rsquo;ve come up with the &lt;a href="http://gerrit.ovirt.org/gitweb?p=ovirt-node-tests.git;a=blob;f=libs/common/common.sh;hb=HEAD"&gt;this bash snippet&lt;/a&gt; which creates bash functions for all callables of a given python module.&lt;br/&gt;This might not be perfet, but it does the job in our case.&lt;br/&gt;&lt;br/&gt;The TUI testing - while we are at it - is now done using uinput.</regular-body><tag>ovirt</tag><tag>python</tag><tag>fedora</tag><tag>bash</tag></post><post id="51492021492" url="https://dummdida.tumblr.com/post/51492021492" url-with-slug="https://dummdida.tumblr.com/post/51492021492/doing-pxe-with-libvirt-virt-manager" type="regular" date-gmt="2012-06-14 13:27:00 GMT" date="Thu, 14 Jun 2012 15:27:00" unix-timestamp="1339680420" format="markdown" reblog-key="c6MDyoCw" slug="doing-pxe-with-libvirt-virt-manager" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Doing PXE with libvirt / virt-manager</regular-title><regular-body>&lt;center&gt;&lt;/center&gt;&lt;center&gt;&lt;/center&gt;&lt;center&gt;&lt;a href="http://www.flickr.com/photos/elijahporter/5308482163/" title="pxe_01 by Elijah Porter von _ElijahPorter bei Flickr"&gt;&lt;img alt="pxe_01 by Elijah Porter" height="240" src="http://farm6.staticflickr.com/5203/5308482163_bd02197ee6_m.jpg" width="189"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt;Installing hosts using PXE is a well known thing.&lt;br/&gt;Why not do it within libvirt? Or: How do I do this in libvirt?&lt;br/&gt;Do I need to setup my own dhcp server to pass the bootp option? Nope.&lt;br/&gt;Just use libvirts default dnsmasq and add the bootp dhcp option.&lt;br/&gt;&lt;br/&gt;All you need to do is editing the default network configuration using virsh (no way o do it from virt-manager).&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;# virsh net-destroy default&lt;br/&gt;# virsh net-edit&lt;br/&gt;  Now add "&amp;lt;bootp file='/pxelinux.0' server='$PXESERVERIP' /&amp;gt;" under /network/ip/dhcp&lt;br/&gt;# virsh net-start default&lt;br/&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;All done.&lt;br/&gt;Just have a look at the definition &lt;a href="http://libvirt.org/formatnetwork.html#elementsAddress"&gt;here&lt;/a&gt; to read about more features.&lt;/p&gt;</regular-body><tag>ovirt</tag><tag>fedora</tag><tag>pxe</tag><tag>libvirt</tag></post><post id="51492021050" url="https://dummdida.tumblr.com/post/51492021050" url-with-slug="https://dummdida.tumblr.com/post/51492021050/using-ovirt-node-with-virt-manager" type="regular" date-gmt="2012-05-30 14:29:00 GMT" date="Wed, 30 May 2012 16:29:00" unix-timestamp="1338388140" format="html" reblog-key="WqPLaowB" slug="using-ovirt-node-with-virt-manager" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Using oVirt Node with virt-manager</regular-title><regular-body>&lt;br/&gt;&lt;center&gt;&lt;a href="http://www.flickr.com/photos/sommerferientag/6412811223/" title="Untitled von Northern Quarter bei Flickr"&gt;&lt;img alt="Untitled" height="212" src="http://farm8.staticflickr.com/7151/6412811223_f7c8698e69_n.jpg" width="320"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;&lt;br/&gt;Virtualization is already an ubiquitous technique.&lt;br/&gt;Fedora provides packages for many of the Linux virtualization components through the yum virtualization group.&lt;br/&gt;&lt;pre&gt;$ sudo yum groupinstall virtualization&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Well, anyway - When doing virtualization you need a &lt;i&gt;host&lt;/i&gt;, hosting your virtualized guests. If you don&amp;rsquo;t want to do this on your local machine - because it hasn&amp;rsquo;t got the capabilities, isn&amp;rsquo;t beefy enough, &amp;hellip; - you can use &lt;a href="http://www.ovirt.org/"&gt;oVirt&lt;/a&gt; Node as a hypervisor on a second machine which you can easily manage from Fedora using virt-manager.&lt;br/&gt;This can be useful for a small working group or developers.&lt;br/&gt;&lt;br/&gt;oVirt Node is based on Fedora and optimized to quickly get a hypervisor up an running. You actually do not need to care about all the constraints - networking, services, storage, &amp;hellip; - you need to consider if you setup a hypervisor yourself (which can also be done with  Fedora). It is also stripped down (~150MB) to preserve most of the RAM and storage space to the virtualized guests.&lt;br/&gt;&lt;br/&gt;Anyhow:&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://ovirt.org/releases/stable/binary/"&gt;Download&lt;/a&gt; oVirt Node &lt;/li&gt;&lt;li&gt;Install it on a machine with a recent Intel or AMD processor&lt;/li&gt;&lt;li&gt;Log into the installed Node using admin and&lt;/li&gt;&lt;ol&gt;&lt;li&gt;Configure a network interface &lt;/li&gt;&lt;li&gt;Press F2 to drop to the console and run&lt;/li&gt;&lt;li&gt;&lt;code&gt;/usr/libexec/ovirt-config-password&lt;/code&gt; &lt;/li&gt;&lt;ol&gt;&lt;li&gt;set a root password&lt;/li&gt;&lt;li&gt;enable SSH access&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;li&gt;Optional: &lt;code&gt;ssh-copy-id&lt;/code&gt; your ssh key to node to allow a password-less login &lt;/li&gt;&lt;li&gt;User virt-manager to create a new connection (File -&amp;gt; New Connection) to the installed Node (IP can be found on the Node&amp;rsquo;s Status page)&lt;br/&gt;URI: &lt;code&gt;qemu+ssh://$OVIRTNODE/system&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;($OVIRTNODE needs to replaced accordingly) &lt;br/&gt;Actually oVirt Node is intended to be used with oVirt Engine, which can manage from one up to a couple of hundreds (?) of Nodes.&lt;br/&gt;But the Engine setup itself is not as easy as just using virt-manager :)&lt;br/&gt;At least - Engine would be the next step to get used to the oVirt components.&lt;br/&gt;&lt;br/&gt;P.s.: You can use &lt;code&gt;virsh vol-upload&lt;/code&gt; to get some data onto the node.</regular-body><tag>virt-manager</tag><tag>kvm</tag><tag>ovirt</tag><tag>engine</tag><tag>fedora</tag><tag>qemu</tag><tag>node</tag><tag>libvirt</tag></post><post id="51492019812" url="https://dummdida.tumblr.com/post/51492019812" url-with-slug="https://dummdida.tumblr.com/post/51492019812/booting-fedora-using-qemu-and-efi" type="regular" date-gmt="2012-05-29 08:51:00 GMT" date="Tue, 29 May 2012 10:51:00" unix-timestamp="1338281460" format="html" reblog-key="rmCJjKU4" slug="booting-fedora-using-qemu-and-efi" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Booting Fedora using Qemu and EFI</regular-title><regular-body>&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center&gt;&lt;a href="http://www.flickr.com/photos/il_tommy/3320152510/" title="La Locura! von il_tommy bei Flickr"&gt;&lt;img alt="La Locura!" height="160" src="http://farm4.staticflickr.com/3599/3320152510_5e57d34239_m.jpg" width="240"/&gt;&lt;/a&gt;&lt;/center&gt; Thanks &lt;a href="http://www.harald-hoyer.de/personal/blog/debugging-dracut-on-your-live-system-with-qemu"&gt;Harald&lt;/a&gt;.&lt;br/&gt;After reading accross Harald&amp;rsquo;s blog post mentioned above, I tried to boot one of the recent Fedora 17 composes. Sadly Qemu refused to find the attached (emulated) CD drive, but passing my primary hda (as a snapshot) worked like a charm: Fedora 16 ran in qemu with an EFI bios (OVMF).</regular-body><tag>fedora</tag><tag>efi</tag><tag>qemu</tag><tag>ovmf</tag></post><post id="51492018962" url="https://dummdida.tumblr.com/post/51492018962" url-with-slug="https://dummdida.tumblr.com/post/51492018962/auto-installing-ovirt-node" type="regular" date-gmt="2012-05-15 09:19:00 GMT" date="Tue, 15 May 2012 11:19:00" unix-timestamp="1337073540" format="html" reblog-key="MKX3k294" slug="auto-installing-ovirt-node" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Auto-Installing oVirt Node</regular-title><regular-body>&lt;br/&gt;&lt;center&gt;&lt;a href="http://www.flickr.com/photos/davemorris/35690071/" title="technical support von Daveybot bei Flickr"&gt;&lt;img alt="technical support" height="226" src="http://farm1.staticflickr.com/32/35690071_d108779e3d_n.jpg" width="320"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;a href="http://www.ovirt.org/"&gt;oVirt&lt;/a&gt; - maybe you&amp;rsquo;ve heard about it. It&amp;rsquo;s a project to create an open IaaS &amp;ldquo;virtualization management system&amp;rdquo; - So a bit like OpenStack, but different. &lt;br/&gt;Fedora is the base for oVirt&amp;rsquo;s hypervisor: &amp;ldquo;Node&amp;rdquo;. Basicaly this is a stripped down Fedora, enriched with a couple of packages to prvide just enough to host some virtual guests and do some basic configuration.&lt;br/&gt;&lt;br/&gt;Personally I&amp;rsquo;d like to use Node in conjunction with Gnome Boxes or virt-manager. But this is currently not possible - but we might get closer to it when solving &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=810272"&gt;this bug&lt;/a&gt;.&lt;br/&gt;Anyhow, to quickly &lt;a href="http://www.ovirt.org/get-ovirt/"&gt;install oVirt&lt;/a&gt; Node you just need to add two (or three) additional kernel arguments:&lt;br/&gt;&lt;pre&gt;BOOTIF=ethX storage_init&lt;br/&gt;&lt;/pre&gt;You should/could also add  &lt;br/&gt;&lt;pre&gt;adminpw=$ADMINPW&lt;/pre&gt;&lt;br/&gt;&lt;code&gt;ADMINPW=$(openssl passwd -salt SALT)&lt;/code&gt; is a salted password, so you can log in (as &lt;code&gt;admin&lt;/code&gt;) after the installation. Alternatively you can boot into single mode to reset the password.&lt;br/&gt;&lt;br/&gt;The parameters above install oVirt node without user intervention,  setup networking on ethX and &lt;i&gt;erase all data on the disk&lt;/i&gt; and create a defautl (lvm based) partitioning scheme.&lt;br/&gt;The next step would be adding Node to oVirt Engine - or wait until it can be managed by virt-manager, which is much quicker to set-up :)</regular-body><tag>ovirt</tag><tag>fedora</tag><tag>node</tag><tag>boxes</tag><tag>libvirt</tag></post><post id="51492018102" url="https://dummdida.tumblr.com/post/51492018102" url-with-slug="https://dummdida.tumblr.com/post/51492018102/gstreamer-as-a-multimedia-backend-in-firefox" type="regular" date-gmt="2012-04-19 19:44:00 GMT" date="Thu, 19 Apr 2012 21:44:00" unix-timestamp="1334864640" format="html" reblog-key="VZbPxY2D" slug="gstreamer-as-a-multimedia-backend-in-firefox" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>gstreamer as a multimedia backend in Firefox</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://upload.wikimedia.org/wikipedia/commons/6/6e/HTML5-logo.svg"&gt;&lt;img border="0" height="320" src="http://upload.wikimedia.org/wikipedia/commons/6/6e/HTML5-logo.svg" width="320"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;Wow. After such a long time it happened. Gstreamer can be used as a &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=422540"&gt;multimedia backend in Firefox&lt;/a&gt;!&lt;br/&gt;&lt;br/&gt;So what does this mean? I believe not much yet for the enduser, at least this is a very nice infrastructure change to enable stuff like hardware acceleration e.g. on mobile devices. And from my point of view also a good separation: Do one thing and do it well. Let gstream do the multimedia stuff and Mozilla all that compositing. &lt;br/&gt;&lt;br/&gt;Maybe this can be enabled in Fedora - at compile time - to get an maybe accelerated experience. or better codec support e.g. h264 for those who need it (e.g. by using Fluendos codec pack) or even my always favored &lt;a href="http://diracvideo.org/"&gt;Dirac&lt;/a&gt;!</regular-body><tag>mozilla</tag><tag>dirac</tag><tag>fedora</tag><tag>h264</tag><tag>gstreamer</tag><tag>fluendo</tag><tag>firefox</tag><tag>schroedinger</tag></post><post id="51492017052" url="https://dummdida.tumblr.com/post/51492017052" url-with-slug="https://dummdida.tumblr.com/post/51492017052/icd-and-pocl" type="regular" date-gmt="2012-04-14 20:43:00 GMT" date="Sat, 14 Apr 2012 22:43:00" unix-timestamp="1334436180" format="html" reblog-key="79k7K9aK" slug="icd-and-pocl" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>ICD and pocl</regular-title><regular-body>&lt;p&gt;There is no official release from pocl yet, but I noticed that there is now some work going on to bring &lt;a href="https://code.launchpad.net/%7Ekraiskil/pocl/icd"&gt;ICD to pocl&lt;/a&gt;. Very nice.&lt;br/&gt;This will allow us to have more than one open CL implementation on our systems - as long as all of them honor ICD.&lt;/p&gt;</regular-body><tag>pocl</tag><tag>fedora</tag><tag>icd</tag><tag>opencl</tag></post><post id="51492016108" url="https://dummdida.tumblr.com/post/51492016108" url-with-slug="https://dummdida.tumblr.com/post/51492016108/migrate-your-fav-packages-to-a-new-workstation" type="regular" date-gmt="2012-03-29 09:03:00 GMT" date="Thu, 29 Mar 2012 11:03:00" unix-timestamp="1333011780" format="html" reblog-key="durtuVCI" slug="migrate-your-fav-packages-to-a-new-workstation" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Migrate your fav. packages to a new workstation.</regular-title><regular-body>&lt;br/&gt;&lt;br/&gt;&lt;center&gt;&lt;a href="http://www.flickr.com/photos/kittybabylove/3851607604/" title="Lovely Package Exchange #1 von kittybabylove bei Flickr"&gt;&lt;img alt="Lovely Package Exchange #1" height="185" src="http://farm3.staticflickr.com/2432/3851607604_274cdbd915_m.jpg" width="240"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;Once in a while we are setting up our workstations - yet again.&lt;br/&gt;I often faced the problem to migrate my finest selection of packages from my former system, to the new one.&lt;br/&gt;Groups are surely one way to install roughly those packages you need on the new system, but in very rare cases your package selection is unique.&lt;br/&gt;&lt;br/&gt;The following snippet might help you, to install the packages of &lt;code&gt;DA_OLD_HOST&lt;/code&gt; on your new system. &lt;br/&gt;On your new host: &lt;br/&gt;&lt;pre&gt;$ ssh $DA_OLD_HOST 'rpm -qa --qf "%{NAME}\n"' \&lt;br/&gt;  | xargs yum install -y --skip-broken&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;small&gt;Hint: It seems as if something is broken with the fedora mirros, you can work around problems by commenting the mirrorlist and uncommenting the baseurl option in the appropriate yum repo .conf.&lt;/small&gt;</regular-body><tag>yum</tag><tag>fedora</tag></post><post id="51492015232" url="https://dummdida.tumblr.com/post/51492015232" url-with-slug="https://dummdida.tumblr.com/post/51492015232/package-management-using-zif" type="regular" date-gmt="2012-03-15 12:52:00 GMT" date="Thu, 15 Mar 2012 13:52:00" unix-timestamp="1331815920" format="html" reblog-key="qCOqc3Vl" slug="package-management-using-zif" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Package management using zif.</regular-title><regular-body>As yum was introduced I was happy about it&amp;rsquo;s features. Also some of the later features like history and the rollback are nice and handy.&lt;br/&gt;But yum can be slow.&lt;br/&gt;&lt;br/&gt;If you want to use a different rpm high-level management system with a comparable featureset to yum give zif a try:&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;$ sudo yum install -y zif-tools PackageKit-zif&lt;br/&gt;&lt;/pre&gt;This also installs the zif backend for PackageKit - which appears to the user as the package update dialog.&lt;br/&gt;Many known commands will work: &lt;pre&gt;&lt;br/&gt;$ zif search yum&lt;br/&gt;$ sudo zif install -y livecd-tools&lt;br/&gt;$ zif # will print help&lt;br/&gt;&lt;/pre&gt;</regular-body><tag>yum</tag><tag>fedora</tag><tag>zif</tag><tag>packagekit</tag><tag>rpm</tag></post><post id="51492014344" url="https://dummdida.tumblr.com/post/51492014344" url-with-slug="https://dummdida.tumblr.com/post/51492014344/they-did-it-a-smallish-opencl-example-running-on" type="regular" date-gmt="2012-03-05 16:43:00 GMT" date="Mon, 05 Mar 2012 17:43:00" unix-timestamp="1330965780" format="html" reblog-key="2Idgvqo2" slug="they-did-it-a-smallish-opencl-example-running-on" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>They did it. A smallish OpenCL example running on Mesa's r600.</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://sites.amd.com/PublishingImages/Public/Logo_PlatformLogos/PNG/44292.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://sites.amd.com/PublishingImages/Public/Logo_PlatformLogos/PNG/44292.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;This happened somewhat unexpected while looking again at the state of open OpenCL implementations (so pocl and clover).&lt;br/&gt;&lt;br/&gt;Suddenly some hero told me that there is a smallish OpenCL example which actually works with Mesa&amp;rsquo;s OpenCL implementation (actually this is bound to r600 based devices). So what is awesome if this ain&amp;rsquo;t?&lt;br/&gt;&lt;br/&gt;What you need:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;tstellar&amp;rsquo;s &lt;a href="http://cgit.freedesktop.org/%7Etstellar/mesa/?h=clover-r600-master"&gt;&lt;i&gt;clover-r600-master&lt;/i&gt;&lt;/a&gt; branch&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fedora 16&lt;/i&gt; (okay, it might also work somewhere else), with rawhide clang and llvm&lt;/li&gt;&lt;li&gt;and the &lt;a href="http://cgit.freedesktop.org/%7Etstellar/opencl-example/"&gt;example code&lt;/a&gt;&lt;/li&gt;&lt;li&gt;oh - and - important -  an appropriate card e.g. HD6310 (AMD E-350/E-450) or some other evergreen GPU&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;What actually has to be done is - this time - left to the user.&lt;br/&gt;A few hints:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;Look at the comment in line 96 of src/gallium/state_trackers/clover/llvm/invocation.cpp and swap comments (there are r600 &lt;a href="http://people.freedesktop.org/%7Etstellar/"&gt;patches&lt;/a&gt; for LLVM which can be applied to get around this).&lt;/li&gt;&lt;li&gt;The implementation expects the opencl libs to reside in /usr/local/lib/opencl - so install or softlink&lt;/li&gt;&lt;li&gt;Set LD_LIBRARY_PATH to mesa/lib when building the example&lt;/li&gt;&lt;li&gt;You need to provide the OpenCL headers &lt;/li&gt;&lt;/ul&gt;The present support is currently just basic, but it&amp;rsquo;s awesome to see this progress.&lt;br/&gt;&lt;br/&gt;What you get:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;There are 1 platforms.&lt;br/&gt;There are 1 GPU devices.&lt;br/&gt;clCreateContext() succeeded.&lt;br/&gt;notkernel&lt;br/&gt;main&lt;br/&gt;clCreateCommandQueue() succeeded.&lt;br/&gt;clCreateProgramWithSource() suceeded.&lt;br/&gt;build log:&lt;br/&gt;clBuildProgram() suceeded.&lt;br/&gt;clCreateKernel() suceeded.&lt;br/&gt;clCreateBuffer() succeeded.&lt;br/&gt;clSetKernelArg() succeeded.&lt;br/&gt;--------------------------------------------------&lt;br/&gt;[...]&lt;br/&gt;clEnqueueReadBuffer() suceeded.&lt;br/&gt;pi = 3.141590&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Let&amp;rsquo;s see when I can build &lt;a href="http://dummdida.blogspot.com/2012/02/gst-plugins-cl-opencl-plugins-for.html"&gt;gst-plugins-opencl&lt;/a&gt; against mesa. And &amp;ldquo;they&amp;rdquo; include zack, steckdenis, and tstellar.&lt;br/&gt;&lt;br/&gt;Some more informations using &lt;a href="http://graphics.stanford.edu/%7Eyoel/notes/clInfo.c"&gt;this&lt;/a&gt; tool: &lt;br/&gt;&lt;pre&gt;$ make clInfo CFLAGS="-I$PATH_TO_CL_HEADERS" LDFLAGS="-lOpenCL -L$MESAPATH/lib"&lt;br/&gt;$ sudo LD_LIBRARY_PATH="$MESAPATH/lib" ./clInfo&lt;br/&gt;Found 1 platform(s).&lt;br/&gt;platform[(nil)]: profile: FULL_PROFILE&lt;br/&gt;platform[(nil)]: version: OpenCL 1.1 MESA 8.0.0&lt;br/&gt;platform[(nil)]: name: Default&lt;br/&gt;platform[(nil)]: vendor: Mesa&lt;br/&gt;platform[(nil)]: extensions: &lt;br/&gt;platform[(nil)]: Found 1 device(s).&lt;br/&gt;[...]&lt;br/&gt;&lt;/pre&gt;</regular-body><tag>clover</tag><tag>mesa</tag><tag>fedora</tag><tag>opencl</tag></post><post id="51492013955" url="https://dummdida.tumblr.com/post/51492013955" url-with-slug="https://dummdida.tumblr.com/post/51492013955/fedora-17-alpha-declared-gold-try-the-shell-in" type="regular" date-gmt="2012-02-23 12:14:00 GMT" date="Thu, 23 Feb 2012 13:14:00" unix-timestamp="1329999240" format="html" reblog-key="FUndV9Jz" slug="fedora-17-alpha-declared-gold-try-the-shell-in" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Fedora 17 Alpha declared GOLD - Try the shell in qemu.</regular-title><regular-body>Robyn Bergeron announced:  &lt;quote&gt;Fedora 17 Alpha release (RC4) was declared GOLD&lt;/quote&gt;[&lt;a href="http://fedora.markmail.org/thread/4afrgcprbxi4ebvf"&gt;Source&lt;/a&gt;].&lt;br/&gt;This release &lt;a href="http://fedoraproject.org/wiki/Features/Gnome_shell_software_rendering"&gt;ships Mesa with llvmpipe (and several other enhancements to allow software rendering)&lt;/a&gt;, this way gnome-shell can actually be run in a non-accelerated graphics environment - like qemu is.&lt;br/&gt;&lt;br/&gt;Just fetch - today or the 28th - an ISO of your flavor (live CDs come in GNOME, KDE, LXDE and XFCE) and run it with qemu: &lt;br/&gt;&lt;pre&gt;$ sudo qemu-kvm -smp 2 -m 1024 -net user -net nic \&lt;br/&gt;  -cdrom Fedora-17-Alpha-x86_64-Live-Desktop.iso&lt;br/&gt;&lt;/pre&gt;Sadly qemu&amp;rsquo;s curl support is &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=785594"&gt;still broken&lt;/a&gt;, otherwise we could just run: &lt;br/&gt;&lt;pre&gt;$ sudo qemu-kvm -smp 2 -m 1024 -net user -net nic \ &lt;br/&gt;  -cdrom "http://dl.fedoraproject.org/pub/alt/stage/\&lt;br/&gt;17-Alpha.RC4/Live/x86_64/\&lt;br/&gt;Fedora-17-Alpha-x86_64-Live-Desktop.iso"&lt;br/&gt;&lt;/pre&gt;</regular-body><tag>gnome</tag><tag>shell</tag><tag>test</tag><tag>fedora</tag><tag>qemu</tag></post><post id="51492013187" url="https://dummdida.tumblr.com/post/51492013187" url-with-slug="https://dummdida.tumblr.com/post/51492013187/give-spice-a-try-or-smooth-vnc" type="regular" date-gmt="2012-02-21 17:41:00 GMT" date="Tue, 21 Feb 2012 18:41:00" unix-timestamp="1329846060" format="html" reblog-key="QHuVM6ID" slug="give-spice-a-try-or-smooth-vnc" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Give spice a try - or: Smooth VNC.</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/tammybogestrand/4372089775/" title="Spices - 50mm with macro converter f/3.2 von Tammy Bogestrand bei Flickr"&gt;&lt;img src="http://farm5.staticflickr.com/4066/4372089775_d41522fb49_m.jpg" width="240" height="160" alt="Spices - 50mm with macro converter f/3.2"/&gt;&lt;/a&gt;&lt;/center&gt;Who doesn&amp;rsquo;t know it: You are controlling your laptop via VNC, but all &lt;strike&gt;youtube videos&lt;/strike&gt; scrolling through windows seems to be sluggish and parts of the window don&amp;rsquo;t get updated - you see black patches everywhere.&lt;br/&gt;Being in such a situation I wanted to try &lt;a href="http://spice-space.org/"&gt;spice&lt;/a&gt;.&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://spice-space.org/images/logo.png" imageanchor="1" style="margin-left:1em; margin-right:1em;"&gt;&lt;img border="0" height="72" width="209" src="http://spice-space.org/images/logo.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;On Fedora 16 there is a spice Xserver where you can launch any program like you are used to do. So how does this help to improve the situation? Well, spice has an highly optimized protocol to deliver data from a server to a client e.g. it detectes &lt;strike&gt;videos played&lt;/strike&gt; fast moving content on the server side, which are transmitted using mjpeg (AFAIK). &lt;br/&gt;Anyhow, here we go (on the server side): &lt;pre&gt;&lt;br/&gt;$ export CLIENT_ADDR=cut-n-paste&lt;br/&gt;$ sudo yum install --enablerepo=updates-testing \&lt;br/&gt;    xorg-x11-server-Xspice&lt;br/&gt;$ sudo iptables -I INPUT -s $CLIENT_ADDR -j ACCEPT&lt;br/&gt;$ Xspice --port 59007 --disable-ticketing :1.0 &amp;amp; &lt;br/&gt;$ { sleep 2 ; \&lt;br/&gt;    export DISPLAY=:1.0 ; \&lt;br/&gt;    metacity &amp;amp; \&lt;br/&gt;    gnome-terminal ; }&lt;br/&gt;&lt;/pre&gt;This launches an Xspice server, listening on port 59007 and starts a metacity and gnome-terminal instance after 2 seconds within that server. The first line opens the appropriate ports. &lt;br/&gt;Afterwards fetch spicec, the spice client (something like remmina, oh, has remmina already a spice plugin?) and connect it to the server: &lt;pre&gt;&lt;br/&gt;$ export SERVER_ADDR=cut-n-paste&lt;br/&gt;$ sudo yum install --enablerepo=updates-testing \&lt;br/&gt;    spice-client&lt;br/&gt;$ spicec -h $SERVER_ADDR -p 59007&lt;br/&gt;&lt;/pre&gt;A nice thing about spice is, that it&amp;rsquo;s an xserver, so you can use xrandr to change the resolution at runtime. Nice. &lt;pre&gt;&lt;br/&gt;$ xrand -s 1680x1050&lt;br/&gt;$ firefox&lt;br/&gt;# or, to connect to your original desktop via &lt;br/&gt;# VNC, but to transmit the desktop via spice &lt;br/&gt;# to your client. yey.&lt;br/&gt;$ vncviewer localhost&lt;br/&gt;&lt;/pre&gt; Maybe this helps some lost soul to get a saner my-remote-desktop-over-a-network experience. &lt;br/&gt;A last thing: Does someone know how to tell Fedora what X server to start on boot?</regular-body><tag>iptables</tag><tag>fedora</tag><tag>spice</tag><tag>vnc</tag></post><post id="51492011777" url="https://dummdida.tumblr.com/post/51492011777" url-with-slug="https://dummdida.tumblr.com/post/51492011777/linking-opencl-oh-wait" type="regular" date-gmt="2012-02-21 13:21:00 GMT" date="Tue, 21 Feb 2012 14:21:00" unix-timestamp="1329830460" format="html" reblog-key="pHZJfWZ1" slug="linking-opencl-oh-wait" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Linking OpenCL - Oh, wait ...</regular-title><regular-body>&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center&gt;&lt;a href="http://www.flickr.com/photos/origomi/144682460/" title="Latest work from Danilo, my Chilean tessellation friend! von EricGjerde bei Flickr"&gt;&lt;img alt="Latest work from Danilo, my Chilean tessellation friend!" height="180" src="http://farm1.staticflickr.com/53/144682460_76f45cc1ee_m.jpg" width="240"/&gt;&lt;/a&gt;&lt;/center&gt; OpenCL is a nice way to utilize vector processors or multi cores.&lt;br/&gt;But when it comes to writing and linking our software against a OpenCL it doesn&amp;rsquo;t seem to open anymore. Because currently you need to link to one specific OpenCL implementatio, like AMD&amp;rsquo;s or Intel&amp;rsquo;s.&lt;br/&gt;Okay, that might in the normal case not be to problematic, but as Fedora Packager I don&amp;rsquo;t want to link some software to one specific implementation, if there are several.&lt;br/&gt;This problem &lt;a href="http://mailman.archlinux.org/pipermail/arch-general/2011-July/020796.html"&gt;already appeared&lt;/a&gt; to the arch people and they just &lt;a href="https://wiki.archlinux.org/index.php/GPGPU"&gt;pulled&lt;/a&gt; the - so called - ICD loader out of one of the available implementations into the libCL package, to solve this problem.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;ICD loader &lt;/b&gt;&lt;br/&gt;So how does this help? ICD is a &lt;a href="http://www.khronos.org/registry/cl/extensions/khr/cl_khr_icd.txt"&gt;mechanism&lt;/a&gt; specified by Khronos to allow several OpenCL implementations to be installed side-by-side without disturbing each other. And the ICD loader allows to freely choose between one of the available ones (if it supports ICD), as the loader redirects the API calls to the choosen implementation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;What we need&lt;/b&gt; is some kind of just-an-ICD-loader which provides /lib64/libOpenCL.so which is the in turn using the actual implementation (e.g. pocl or the upcoming nouveau / clover [hopefully AMD to] thing).&lt;br/&gt;&lt;br/&gt;There are already &lt;a href="http://www.zuzuf.net/FreeOCL/index.php"&gt;some&lt;/a&gt; &lt;a href="https://github.com/nbigaouette/oclutils/"&gt;open&lt;/a&gt; &lt;a href="http://www.nvnews.net/vbulletin/showthread.php?t=159051"&gt;ICD&lt;/a&gt; implementations available, maybe those can be reused.</regular-body><tag>fedora</tag><tag>icd</tag><tag>opencl</tag></post><post id="51492011033" url="https://dummdida.tumblr.com/post/51492011033" url-with-slug="https://dummdida.tumblr.com/post/51492011033/gst-plugins-cl-opencl-plugins-for-gstreamer" type="regular" date-gmt="2012-02-01 19:41:00 GMT" date="Wed, 01 Feb 2012 20:41:00" unix-timestamp="1328125260" format="html" reblog-key="Hd1wBFsJ" slug="gst-plugins-cl-opencl-plugins-for-gstreamer" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>gst-plugins-cl - OpenCL plugins for gstreamer, written in Vala.</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://upload.wikimedia.org/wikipedia/en/5/57/OpenCL_Logo.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://upload.wikimedia.org/wikipedia/en/5/57/OpenCL_Logo.png" width="125"/&gt;&lt;/a&gt;&lt;a href="http://4.bp.blogspot.com/-ngeSCe2Ks4s/Tx-_iFu8tRI/AAAAAAAAAIE/SiM1rK8oAd0/s1600/Bildschirmfoto+am+2012-01-25+09%253A37%253A32.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" height="125" src="http://4.bp.blogspot.com/-ngeSCe2Ks4s/Tx-_iFu8tRI/AAAAAAAAAIE/SiM1rK8oAd0/s200/Bildschirmfoto+am+2012-01-25+09%253A37%253A32.png" width="200"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear:both;"&gt;&lt;/div&gt;&lt;br/&gt;Some of you may know &lt;a href="http://en.wikipedia.org/wiki/OpenCL"&gt;OpenCL&lt;/a&gt; - the open computing language. This language allows us to write kernels in a C99 dialect, which can be run on data - in parallel.&lt;br/&gt;A common use case for such a language - and processing concept - is the classical convolution - which was my motivation. Sure, this can also be realized using the frequency domain, but - hey - I feel fine in the spatial one.&lt;br/&gt;&lt;br/&gt;Anyhow, there are bindings for OpenCL - which is vendor (NVidia, AMD, Intel, F/LOSS, &amp;hellip;) and hardware (GPU vs. CPU - AMD, Intel, IBM Cell, &amp;hellip;) independent for many languages, including MatLab, python, C, C++  and so on &amp;hellip;&lt;br/&gt;In my case I needed a way to apply some filter function (or [OpenCL] kernel) to a video stream from some FireWire camera.&lt;br/&gt;The experienced reader might directly associate FireWire with gstreamer our multimedia framework of choice under linux.&lt;br/&gt;I had the option to Gather the data from a gstreamer pipeline reading the FireWire camera or create a gstreamer element providing, as of wrapping, the OpenCL functionality. The mentioned &lt;a href="https://gitorious.org/valastuff/gst-plugins-cl"&gt;plugin&lt;/a&gt; does the latter, it provides a couple of elements to apply some OpenCL kernel to the data of a gstreamer pipeline.&lt;br/&gt;&lt;br/&gt;You need vala and some gstreamer sources to build this project:&lt;br/&gt;&lt;pre&gt;$ sudo yum install gstreamer-devel vala&lt;/pre&gt;.. might be a good start.&lt;br/&gt;You also need some OpenCL implementation, as of today pocl can be used, but it&amp;rsquo;s just intensively tested with the Nvidia implementation of it&amp;rsquo;s GPU SDK and with Intel OCL SDK.&lt;br/&gt;Building the plugin is quite simple&lt;br/&gt;&lt;pre&gt;$ ./autogen.sh&lt;br/&gt;$ ./configure&lt;br/&gt;$ make&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Testing should also be quite easy: &lt;br/&gt;&lt;pre&gt;$ export GST_PLUGIN_PATH=src/.libs/&lt;br/&gt;$ gst-launch audiotestsrc ! clkernel ! autoaudiosink&lt;/pre&gt;This doesn&amp;rsquo;t do much, as the default kernel just passes the data - but at least you can test if the OpenCL is available. There are currently three plugins:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;clkernel - An element to manipulate any buffer&lt;/li&gt;&lt;li&gt;clkernel2d - An element to manipulate a 2D buffer, like an gray image/video&lt;/li&gt;&lt;li&gt;clvideofilter - An element to manipulate an RGBA image/video&lt;/li&gt;&lt;/ul&gt;The OpenCL kernel can reside in an external file. You can pass the filename of that file and the kernel to use to the element:&lt;br/&gt;&lt;pre&gt;$ gst-launch audiotestsrc \&lt;br/&gt;  ! clkernel kernel-file=mykernellib.cl kernel-name=somekernel \&lt;br/&gt;  ! autoaudiosink&lt;br/&gt;&lt;/pre&gt;Have a look at the sources or kernel.cl and kernel2.cl files (they are plaintext files, the kernel are build on the fly - heard of JIT?) in the src directory to see what kind of signature the kernel has to provide. (This should be documented more thoroughly).&lt;br/&gt;If you&amp;rsquo;ve got more than one platform which is OpenCL capable you can use the platform-idx property to specify a specific platform. &lt;br/&gt;&lt;br/&gt;This plugins should help to offload some functionality to one or more devices (like GPU, CPU and accelerator, like the CELL) and you don&amp;rsquo;t need to care about the details.&lt;br/&gt;This can now be used to do things like color conversion, all sorts of filtering, mixing and what else can be done in parallel.&lt;br/&gt;Thos plugins are just a start, it would be nice to be able to provide more sinks which then can be used as an input to the kernels.&lt;br/&gt;&lt;br/&gt;~ &lt;a href="https://gitorious.org/valastuff/gst-plugins-cl"&gt;https://gitorious.org/valastuff/gst-plugins-cl&lt;/a&gt;</regular-body><tag>vala</tag><tag>fedora</tag><tag>opencl</tag><tag>gstreamer</tag></post><post id="51492009753" url="https://dummdida.tumblr.com/post/51492009753" url-with-slug="https://dummdida.tumblr.com/post/51492009753/notes-about-writing-a-gstreamer-plugin-in-vala" type="regular" date-gmt="2012-01-25 08:46:00 GMT" date="Wed, 25 Jan 2012 09:46:00" unix-timestamp="1327481160" format="html" reblog-key="xDPnOZoE" slug="notes-about-writing-a-gstreamer-plugin-in-vala" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Notes about writing a gstreamer plugin in vala.</regular-title><regular-body>&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-ngeSCe2Ks4s/Tx-_iFu8tRI/AAAAAAAAAIE/SiM1rK8oAd0/s1600/Bildschirmfoto+am+2012-01-25+09%253A37%253A32.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="200" src="http://4.bp.blogspot.com/-ngeSCe2Ks4s/Tx-_iFu8tRI/AAAAAAAAAIE/SiM1rK8oAd0/s320/Bildschirmfoto+am+2012-01-25+09%253A37%253A32.png" width="320"/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr align="center" style="color: #666666;"&gt;&lt;td class="tr-caption"&gt;Median/max/sobel filters/OpenCL kernels applied to &lt;br/&gt;&lt;div&gt;Sintel using Intels OCL SDK and a gstreamer plugin.&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br/&gt;&lt;br/&gt;&lt;a href="https://live.gnome.org/Vala"&gt;Vala&lt;/a&gt;, as some of you may know, is a &amp;ldquo;compiler for the GObject type system&amp;rdquo;. This means, vala is providing a high-level language with e.g. literals for (nearly) all features of gobject and glib. Because vala get&amp;rsquo;s translated to C, it easily integrates with existing C code. Vala code can also be used from C (and other languages, most easily using gobject intropsection) too.&lt;br/&gt;&lt;br/&gt;&lt;a href="http://gstreamer.freedesktop.org/"&gt;Gstreamer&lt;/a&gt; is a nice multimedia framework - and component of the GNOME ecosystem, now more related to &lt;a href="http://freedesktop.org/"&gt;freedesktop.org&lt;/a&gt; - and is also based on gobject/glib. So it is quite obvious to use vala to build gstreamer plugins and elements.&lt;br/&gt;&lt;br/&gt;A gstreamer plugin is organized as a plugin, which wraps one or more elements, which provide the actual functionality. Detailed informations on how to write plugins can be found in the &lt;a href="http://gstreamer.freedesktop.org/documentation/"&gt;plugin writers guide&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;But what is needed to write a plugin and elements in vala? And if it&amp;rsquo;s good to do so. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;gst_plugin_desc and plugin_init ()&lt;/b&gt;&lt;br/&gt;There are two special structures that need to appear in a Gstreamer plugin: A plugin description (namely the &lt;code&gt;Gst.PluginDesc&lt;/code&gt; [vala class]) and the &lt;code&gt;plugin_init ()&lt;/code&gt; function. &lt;br/&gt;The identifiers of these structures (struct and function) need to match those expected by gstreamer. The plugin description identifier needs to be called &lt;code&gt;gst_plugin_desc&lt;/code&gt; and the &lt;code&gt;plugin_init()&lt;/code&gt; function also needs to have this name.&lt;br/&gt;In vala it is important to place these methods on the toplevel of your file, and not within a namespace, otherwise vala will prefix the resulting C functions with prefix dervied from the namespace. An alternative is to use a CCode attribute for those structures, but why do this if it can be done easier (as described before).&lt;br/&gt;An working example with correctly named plugin description and init function can be found &lt;a href="https://gitorious.org/valastuff/gst-plugins-cl/blobs/master/src/gstopencl.vala"&gt;here&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Namespace&lt;/b&gt;&lt;br/&gt;Because of the naming you should also put your elements of the plugin within a Gst namespace e.g. namespace Gst.Myplugin. Because this translates to C structures (generated by vala) prefixed by gst_myplugin_… and the gst (or Gst or GST) prefix is needed, because the buildsystem is looking for those symbols and exports them.&lt;br/&gt;Look in the example above or below to see where to put the element and what kind of namespace to use. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Elements: Gst.BaseTransform&lt;/b&gt;&lt;br/&gt;It&amp;rsquo;s quite easy to implement a simple filter. This can be done by subclassing Gst.BaseTransform and overriding (so providing an implementation for) a couple of functions. Have a look &lt;a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer-libs/html/GstBaseTransform.html"&gt;here&lt;/a&gt; to find out what you need to implement. Or &lt;a href="https://gitorious.org/valastuff/gst-plugins-cl/blobs/master/src/clkernel.vala"&gt;here&lt;/a&gt; to see an actual working implementation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;gst-template and buildsystem &lt;/b&gt;&lt;br/&gt;You can use the &lt;a href="http://cgit.freedesktop.org/gstreamer/gst-template/"&gt;plugin template&lt;/a&gt; provided by gstreamer but you obviously need to modify the buildsystem to generate c code from the vala files.&lt;br/&gt;Have a look at this &lt;a href="https://gitorious.org/valastuff/gst-plugins-cl/blobs/master/src/Makefile.am"&gt;Makefile.am&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Packages &amp;amp; Testing&lt;/b&gt;&lt;br/&gt;The basic requirements can be met with the following packages:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;$ sudo yum install gstreamer-devel \&lt;br/&gt;gstreamer-plugins-base-devel gstreamer-plugins-base-devel-docs \&lt;br/&gt;vala devhelp&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Have you finally compiled your sources try the plugin with gst-launch, remember to add the hidden .libs dir to your path:&lt;br/&gt;&lt;pre&gt;&lt;br/&gt;$GST_PLUGIN_PATH=src/.libs/ gst-launch  videotestsrc ! myelem ! autovideosink&lt;br/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;So yes - you can write gstreamer plugins in vala - so what element are you going to write today?</regular-body><tag>vala</tag><tag>fedora</tag><tag>opencl</tag><tag>gstreamer</tag></post><post id="51492009283" url="https://dummdida.tumblr.com/post/51492009283" url-with-slug="https://dummdida.tumblr.com/post/51492009283/fontkodo-searching-through-a-selection-of-floss" type="regular" date-gmt="2012-01-19 12:17:00 GMT" date="Thu, 19 Jan 2012 13:17:00" unix-timestamp="1326975420" format="html" reblog-key="A98neISI" slug="fontkodo-searching-through-a-selection-of-floss" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>fontkodo - Searching through a selection of f/loss repositories.</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://static1.robohash.com/fontkodo" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://static1.robohash.com/fontkodo"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;a href="http://www.fontkodo.org/search/"&gt;Fontkodo&lt;/a&gt; - best experienced with Firefox, but it also works with others - indexes the repositories hosted at&lt;br/&gt;&lt;ul&gt;&lt;li&gt;git.gnome.org&lt;/li&gt;&lt;li&gt;git.kernel.org&lt;/li&gt;&lt;li&gt;git.freedesktop.org&lt;/li&gt;&lt;li&gt;git.freesmartphone.org&lt;/li&gt;&lt;li&gt;code.entropywave.com&lt;/li&gt;&lt;li&gt;git.fedorahosted.org&lt;/li&gt;&lt;li&gt;pkgs.fedoraproject.org &lt;/li&gt;&lt;/ul&gt;so covering spec files, python, vala, c, and java code, and images.The focus is therefor on Fedora, GNOME, and vala related code: To aid finding spec files, vala examples and digging through vapis.&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-U2pmLBtaox0/Txfyn566brI/AAAAAAAAAH8/1SHlIfu-52I/s1600/Bildschirmfoto+am+2012-01-19+11%253A23%253A03.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="216" src="http://2.bp.blogspot.com/-U2pmLBtaox0/Txfyn566brI/AAAAAAAAAH8/1SHlIfu-52I/s400/Bildschirmfoto+am+2012-01-19+11%253A23%253A03.png" width="400"/&gt;&lt;/a&gt;&lt;/div&gt;Maybe this is useful for some starters which want to look at real world example code. &lt;br/&gt;Search for vala files using &amp;ldquo;&lt;a href="http://www.fontkodo.org/search/?q=lang:vala"&gt;lang:vala&lt;/a&gt;&amp;rdquo; or pngs with a miracle using &amp;ldquo;&lt;a href="http://www.fontkodo.org/search/?q=lang:png+beefy"&gt;lang:png beefy&lt;/a&gt;&amp;rdquo;.&lt;br/&gt;To find specfiles requiring orc and hosted at pkgs.fedoraproject.org try &amp;ldquo;&lt;a href="http://www.fontkodo.org/search/?q=origin:pfo+lang:spec+orc"&gt;origin:pfo lang:spec orc&lt;/a&gt;&amp;rdquo;.&lt;br/&gt;&lt;br/&gt;</regular-body><tag>fontkodo</tag><tag>gnome</tag><tag>search</tag><tag>vala</tag><tag>fedora</tag><tag>index</tag></post><post id="51492007827" url="https://dummdida.tumblr.com/post/51492007827" url-with-slug="https://dummdida.tumblr.com/post/51492007827/redis-246-lands-in-updates-testing" type="regular" date-gmt="2012-01-16 06:00:00 GMT" date="Mon, 16 Jan 2012 07:00:00" unix-timestamp="1326693600" format="html" reblog-key="fIS3vuLn" slug="redis-246-lands-in-updates-testing" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>redis-2.4.6 lands in updates-testing</regular-title><regular-body>&lt;a href="http://www.redis.io/"&gt;Redis&lt;/a&gt; -a very nice persistent key-value store with knowledge about lists and sets - 2.4 brings some syntax change / new features.&lt;br/&gt;If you are using redis on Fedora 16 you can test 2.4.6 using the updates-testing repo: &lt;br/&gt;&lt;pre&gt;&lt;br/&gt;# su -c 'yum update --enablerepo=updates-testing redis-2.4.6-1.fc16'&lt;br/&gt;&lt;/pre&gt;This update also introduces a systemd unit file, which could also get some attention to see if it works like expected.&lt;br/&gt;&lt;br/&gt;This is the second sunny day with temperatures just above 0°c.</regular-body><tag>redis</tag><tag>fedora</tag><tag>updates-testing</tag></post><post id="51492007170" url="https://dummdida.tumblr.com/post/51492007170" url-with-slug="https://dummdida.tumblr.com/post/51492007170/spieglein-sharing-public-keys-via-display-and" type="regular" date-gmt="2012-01-06 20:27:00 GMT" date="Fri, 06 Jan 2012 21:27:00" unix-timestamp="1325881620" format="html" reblog-key="SqrkYsHq" slug="spieglein-sharing-public-keys-via-display-and" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Spieglein - Sharing public keys via display and webcam (or so)</regular-title><regular-body>Sharing (cryptographic) keys is still mandatory in or cryptography landscape.&lt;br/&gt;A nice exmaple is our &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; file which contains a list of public ssh keys which are allowed to login.&lt;br/&gt;One way to exchange those keys is using &lt;code&gt;ssh-copy-id&lt;/code&gt;. &lt;br/&gt;&lt;br/&gt;Another one is using a webcam and some display - like the ones found in laptops or mobile phones (but even white paper works ;)&lt;br/&gt;The principle is quite simple, just &lt;a href="http://en.wikipedia.org/wiki/QR_code"&gt;QR encode&lt;/a&gt; your public key and point the webcam at the screen to get a picture of the QR encoded public key and decode it. &lt;br/&gt;Voila you&amp;rsquo;ve got your own copy of the public key. And it&amp;rsquo;s quite hard to intersect photons on their way from the display to the webcam, so your copy can be trusted.&lt;br/&gt;&lt;br/&gt;It is as easy as encoding the image&lt;br/&gt;&lt;pre&gt;$ bash create_pubkey_qr.sh &lt;/pre&gt;&lt;br/&gt;This results in a image like this: &lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-lR1epEWxBU8/TwdYL0clygI/AAAAAAAAAHs/R9dDX1p16u4/s1600/qr2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://4.bp.blogspot.com/-lR1epEWxBU8/TwdYL0clygI/AAAAAAAAAHs/R9dDX1p16u4/s1600/qr2.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;Now, on the receiving computer, run &lt;br/&gt;&lt;pre&gt;$ ./look_for_qr.vala&lt;/pre&gt;And point the webcam at the surface displaying the QR code in question &amp;hellip;&lt;br/&gt;&lt;br/&gt;You might need to install some dependencies using&lt;br/&gt;&lt;pre&gt;$ sudo yum install -y vala glib2-devel qrencode \&lt;br/&gt;gstreamer-plugins-bad-free-extras&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;Just look &lt;a href="https://gitorious.org/valastuff/stuff/trees/master/q2r"&gt;here&lt;/a&gt; for a working example.</regular-body><tag>stuff</tag><tag>ssh</tag><tag>vala</tag><tag>fedora</tag><tag>qr</tag></post><post id="51492005580" url="https://dummdida.tumblr.com/post/51492005580" url-with-slug="https://dummdida.tumblr.com/post/51492005580/kontinuität-and-transforming-xml-into-a-ui" type="regular" date-gmt="2012-01-04 18:49:00 GMT" date="Wed, 04 Jan 2012 19:49:00" unix-timestamp="1325702940" format="html" reblog-key="uZVgjdqe" slug="kontinuität-and-transforming-xml-into-a-ui" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Kontinuität - And transforming XML into a UI.</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://service6.tagesschau.de/wetter.tagesschau.de/import/sat/images/2/METE_IR108-STC_wwwEuropa8km-ano_1201031200.png.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="300" src="http://service6.tagesschau.de/wetter.tagesschau.de/import/sat/images/2/METE_IR108-STC_wwwEuropa8km-ano_1201031200.png.jpg" width="400"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;Das frohe neue Jahr hat fahrt aufgenommen - es beginnt fröhlich stürmisch mit frischem Wind.&lt;br/&gt;&lt;br/&gt;During the holidays I had some time and looked into xsl transforms again.&lt;br/&gt;This time I needed a nice way to build a simple UI for a specific XML document.&lt;br/&gt;My initial intention was to use a visitor pattern to transform the XML document into a corresponding Gtk UI, but then my eyes catched GtkBuilder.&lt;br/&gt;GtkBuilder builds a UI from an XML definition.&lt;br/&gt;And there it is, an ideal case for xslt: XSL ransform allow you to transform an XML document into some other plain-text document, this includes into other XML or - quite common - XHTML documents.&lt;br/&gt;&lt;br/&gt;The simple document looked something like this:&lt;br/&gt;&lt;pre&gt;&lt;document id="document" title="About something" author="Jane Doe"&gt;&lt;br/&gt;&lt;text id="intro"&gt;Hello World.&lt;/text&gt;&lt;br/&gt;&lt;text id="more"&gt;This is something like &lt;i&gt;xml-to-gtk&lt;/i&gt;&lt;/text&gt;&lt;br/&gt;&lt;/document&gt;&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Using &lt;a href="https://gitorious.org/valastuff/stuff/blobs/master/gaug/builder.xsl"&gt;this&lt;/a&gt; xsl stylesheet and &lt;a href="https://gitorious.org/valastuff/stuff/blobs/master/gaug/transform.vala"&gt;a bit of glue&lt;/a&gt;, resulted in a UI looking like this:&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-YXgOSoGG6U4/TwSe2xH_IXI/AAAAAAAAAHk/OHWzjGWNynE/s1600/Bildschirmfoto+am+2012-01-04+19%253A46%253A23-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-YXgOSoGG6U4/TwSe2xH_IXI/AAAAAAAAAHk/OHWzjGWNynE/s1600/Bildschirmfoto+am+2012-01-04+19%253A46%253A23-2.png"/&gt; &lt;/a&gt; &lt;/div&gt;&lt;br/&gt;Not pretty - but - hey - there are also other techniques that take some markup to built UIs, just think of clutter &amp;hellip;&lt;br/&gt;&lt;br/&gt;</regular-body><tag>clutter</tag><tag>xslt</tag><tag>new year</tag><tag>xsl</tag><tag>xml</tag><tag>vala</tag><tag>fedora</tag><tag>gtk</tag><tag>markup</tag></post><post id="51492004320" url="https://dummdida.tumblr.com/post/51492004320" url-with-slug="https://dummdida.tumblr.com/post/51492004320/added-augeasvapi-and-augeasdep" type="regular" date-gmt="2011-12-22 08:26:00 GMT" date="Thu, 22 Dec 2011 09:26:00" unix-timestamp="1324542360" format="html" reblog-key="1Oe37uKE" slug="added-augeasvapi-and-augeasdep" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Added augeas.vapi and augeas.dep.</regular-title><regular-body>&lt;p&gt;If you have ever dreamed of using augeas from vala, your dreams have been &lt;a href="https://gitorious.org/valastuff/vapis/trees/master/vapis"&gt;heard&lt;/a&gt; - just before christmas.&lt;br/&gt;The binding is nearly complete, just aug_span is missing. So dive into xml using augeas, &lt;a href="https://fedorahosted.org/augeas/ticket/238"&gt;even&lt;/a&gt; in relative paths.&lt;/p&gt;</regular-body><tag>augeas</tag><tag>vapi</tag><tag>vala</tag></post><post id="51492003674" url="https://dummdida.tumblr.com/post/51492003674" url-with-slug="https://dummdida.tumblr.com/post/51492003674/da-presence-lands-in-fedora" type="regular" date-gmt="2011-12-21 20:19:00 GMT" date="Wed, 21 Dec 2011 21:19:00" unix-timestamp="1324498740" format="html" reblog-key="u7vq8EzE" slug="da-presence-lands-in-fedora" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Da - Presence lands in fedora</regular-title><regular-body>Finally, &lt;a href="http://dummdida.blogspot.com/p/presence.html"&gt;presence&lt;/a&gt; - that small video tool - has landed in the fedora-updates repo.&lt;br/&gt;&lt;br/&gt;You can install it using:&lt;br/&gt;&lt;pre&gt;$ sudo yum install presence&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;That&amp;rsquo;s all there is to do.</regular-body><tag>fedora</tag><tag>presence</tag></post><post id="51492002891" url="https://dummdida.tumblr.com/post/51492002891" url-with-slug="https://dummdida.tumblr.com/post/51492002891/de-duping-files-on-btrfs" type="regular" date-gmt="2011-12-15 19:54:00 GMT" date="Thu, 15 Dec 2011 20:54:00" unix-timestamp="1323978840" format="html" reblog-key="wW5GafuC" slug="de-duping-files-on-btrfs" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>De-Duping files on BTRFS.</regular-title><regular-body>Brave souls can test &lt;a href="http://btrfs.ipv5.de/index.php?title=Main_Page"&gt;BTRFS&lt;/a&gt; for a couple of Fedora releases.&lt;br/&gt;&lt;br/&gt;Removing duplicate/redundant files on filesystems is a common thing, e.g. when creating regular backups or so. On ext4 this can be realized using traditional hardlinks.&lt;br/&gt;Hardlinks all point to the same blocks on the logical drive below. So if a write happens to one of the hardlinks, this also &amp;ldquo;appears&amp;rdquo; in all other hardlinks (which point to he same - modified - block).&lt;br/&gt;This is no problem in a backup scenario, as you normally don&amp;rsquo;t modify backuped files.&lt;br/&gt;&lt;br/&gt;In my case I wanted to remove redundant files that might get modified and the changes shouldn&amp;rsquo;t be reflected in all other copies. So what I want to achieve is to let several links (files) point to the same block for reading, but if a write happens to one block this should be just happen to the one file (link). So, copy the file on write. Wait, don&amp;rsquo;t we know that as CoW? Yep.&lt;br/&gt;&lt;br/&gt;Luckily BTRFS allows cow files using the &lt;code&gt;cp --reflink&lt;/code&gt; command.&lt;br/&gt;The following snippet replaces all copies of a file with &amp;ldquo;light weight&amp;rdquo; aka cow copies. &lt;br/&gt;&lt;br/&gt;&lt;pre&gt;#!/bin/bash&lt;br/&gt;# Usage: dedup.sh PATH_TO_HIER_WITH_MANY_EXPECTED_DUPES&lt;br/&gt;mkdir sums&lt;br/&gt;find $@ -type f -print0 | while read -d $'\0' -r F&lt;br/&gt;do&lt;br/&gt;  echo -n "$F : "&lt;br/&gt;  FHASH=$(sha256sum "$F" | cut -d" " -f1);&lt;br/&gt;  # If hashed, it's probably a dupe, compare bytewise &lt;br/&gt;  # and create a reflink (so cow)&lt;br/&gt;  if [[ -f "sums/$FHASH" ]] &amp;amp;&amp;amp; cmp -s "sums/$FHASH" "$F";&lt;br/&gt;  then&lt;br/&gt;    echo "Dup." ;&lt;br/&gt;    rm "$F" ;&lt;br/&gt;    cp --reflink "sums/$FHASH" "$F" ;&lt;br/&gt;&lt;br/&gt;  # It's a new file, create a hash entry.&lt;br/&gt;  else&lt;br/&gt;    echo "New." ;&lt;br/&gt;    cp --reflink "$F" "sums/$FHASH" ;&lt;br/&gt;  fi&lt;br/&gt;done&lt;br/&gt;rm sums/*&lt;br/&gt;rmdir sums&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;And in general, btrfs didn&amp;rsquo;t yet eat my data, it even survived two power losses &amp;hellip; &lt;br/&gt;&lt;b&gt;Update:&lt;/b&gt; Updated to handle files with special characters. This script also makes some assumptions, e.g. the files should not be modified while running this script.</regular-body><tag>fs</tag><tag>fedora</tag><tag>file</tag><tag>duplicate</tag><tag>btrfs</tag></post><post id="51492001928" url="https://dummdida.tumblr.com/post/51492001928" url-with-slug="https://dummdida.tumblr.com/post/51492001928/opencl-on-fedora-a-quick-look-at-building-pocl" type="regular" date-gmt="2011-12-09 16:58:00 GMT" date="Fri, 09 Dec 2011 17:58:00" unix-timestamp="1323449880" format="html" reblog-key="bKHS1P1D" slug="opencl-on-fedora-a-quick-look-at-building-pocl" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>OpenCL on Fedora: A quick look at building pocl.</regular-title><regular-body>Finally a 3.0 release candidate of llvm is packaged for Fedora and available via rawhide.  Many of the current OpenCL implementations like pocl and clover depend on llvm-3.0 and with this release it is finally an easy thing to build pocl on Fedora.&lt;br/&gt;pocl has some other pre-requirements besides clang/llvm, after installing them you can just build the software as usual:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;$ sudo yum install --enablerepo=rawhide llvm-devel llvm clang \&lt;br/&gt;libtool-ltdl&lt;br/&gt;&lt;br/&gt;&lt;strike&gt;$ git clone&lt;/strike&gt; &lt;br/&gt;$ bzr branch lp:pocl&lt;br/&gt;$ bash autogen.sh&lt;br/&gt;$ ./configure&lt;br/&gt;$ make&lt;br/&gt;$ make check&lt;br/&gt;&lt;/pre&gt;</regular-body><tag>clover</tag><tag>llvm</tag><tag>pocl</tag><tag>clang</tag><tag>fedora</tag><tag>opencl</tag></post><post id="51492000997" url="https://dummdida.tumblr.com/post/51492000997" url-with-slug="https://dummdida.tumblr.com/post/51492000997/another-approach-to-modfiy-structured-files-like" type="regular" date-gmt="2011-11-30 17:03:00 GMT" date="Wed, 30 Nov 2011 18:03:00" unix-timestamp="1322672580" format="html" reblog-key="wOJf1N7Z" slug="another-approach-to-modfiy-structured-files-like" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Another approach to modfiy structured files (like config or XML files)</regular-title><regular-body>&lt;br/&gt;&lt;center&gt;&lt;a href="http://www.flickr.com/photos/9549670@N05/2387552164/" title="Vienna (Wien) - Hofburg - Labors of Hercules (Encounter with Antaeus - Garden of the Hesperides and Killing Augeas - Augean Stables) von jrozwado bei Flickr"&gt;&lt;img alt="Vienna (Wien) - Hofburg - Labors of Hercules (Encounter with Antaeus - Garden of the Hesperides and Killing Augeas - Augean Stables)" height="160" src="http://farm3.staticflickr.com/2096/2387552164_aef784c1ac_m.jpg" width="240"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;Have you ever wondered if there is a more convenient way to modify xml documents, beside libxml2? Sure, there is the nice dom within Firefox, but outside of that?&lt;br/&gt;Well, there is &lt;a href="http://augeas.net/"&gt;augeas&lt;/a&gt;. AFAIK &lt;a href="http://augeas.net/tour.html"&gt;initially&lt;/a&gt; a project to standardize the interface to modify configuration files, in other words a common syntax for different formats.&lt;br/&gt;Files are parsed trough so called &lt;a href="http://augeas.net/docs/lenses.html"&gt;lenses&lt;/a&gt;. Those lenses &lt;a href="http://augeas.net/docs/builtins.html"&gt;transform&lt;/a&gt; the actual file (e.g. &lt;i&gt;httpd.conf&lt;/i&gt; or &lt;i&gt;passwd&lt;/i&gt;) into a &lt;a href="http://augeas.net/docs/tree.html"&gt;tree&lt;/a&gt;, which than can be modified by a set of augeas commands.&lt;br/&gt;As lenses are bi-directional the same lense can be used to read a file, and to dump the &lt;a href="http://augeas.net/docs/tree.html"&gt;(internal augeas) tree&lt;/a&gt; back into a valid configuration file. A nice concept, ey?&lt;br/&gt;&lt;br/&gt;A back to the topic, one of the lenses - Xml.lns - can be used to modify XML files.&lt;br/&gt;The following example creates a dummy xml file and modifies it using augtool. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;$ sudo yum install augeas tidyp&lt;br/&gt;&lt;br/&gt;$ cat &amp;gt; abc.xml &lt;world poo="bar"&gt;&lt;br/&gt;&lt;child&gt;Hi there.&lt;/child&gt;&lt;br/&gt;&lt;/world&gt;&lt;br/&gt;EOF&lt;br/&gt;&lt;br/&gt;$ augtool -LA -e # Load XML lense&lt;br/&gt;set /augeas/load/xml/lens "Xml.lns"&lt;br/&gt;set /augeas/load/xml/incl "$PWD/abc.xml"&lt;br/&gt;load&lt;br/&gt;&lt;br/&gt;# Dump internal tree&lt;br/&gt;print /files&lt;br/&gt;&lt;br/&gt;# Add a note&lt;br/&gt;set /files/$PWD/abc.xml/world/note/#attribute/timestamp "now"&lt;br/&gt;set /files/$PWD/abc.xml/world/note/#text "Wtf"&lt;br/&gt;&lt;br/&gt;# Change the text of a node.&lt;br/&gt;set /files/$PWD/abc.xml/world/child/#text "Hello World."&lt;br/&gt;&lt;br/&gt;# Insert a new child after the present child&lt;br/&gt;ins child after /files/$PWD/abc.xml/world/child&lt;br/&gt;set /files/$PWD/abc.xml/world/child[2]/#text "Hello Mars."&lt;br/&gt;&lt;br/&gt;# Insert a new child - anywhere ..&lt;br/&gt;set /files/$PWD/abc.xml/world/child[3]/#text "Hello Jupiter Jones."&lt;br/&gt;&lt;br/&gt;# More children&lt;br/&gt;set /files/$PWD/abc.xml/world/child[4]/child/child/#text "Hello Mars."&lt;br/&gt;&lt;br/&gt;print /files/$PWD/abc.xml&lt;br/&gt;&lt;br/&gt;save&lt;br/&gt;print /augeas//error&lt;br/&gt;EOF&lt;br/&gt;&lt;br/&gt;$ tidyp -xml -i -q &lt;br/&gt;$ unlink abc.xml&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;With the help from the people at #augeas on freenode, I found out that (a) there is a small bug preventing the usage of relative paths and (b) You need a little knowledge about the format you are writin to. In the (xml) example above, you need to specify attributes before specifying a #text node, because they are written first. If they were specified the other way round, augeas would fail while saving.</regular-body><tag>augeas</tag><tag>xml</tag><tag>fedora</tag></post><post id="51492000359" url="https://dummdida.tumblr.com/post/51492000359" url-with-slug="https://dummdida.tumblr.com/post/51492000359/using-lokkit-to-handle-your-firewall" type="regular" date-gmt="2011-11-29 09:21:00 GMT" date="Tue, 29 Nov 2011 10:21:00" unix-timestamp="1322558460" format="html" reblog-key="H8CrHFWM" slug="using-lokkit-to-handle-your-firewall" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Using lokkit to handle your firewall.</regular-title><regular-body>Some common thing is to turn of the firewall if a freshly installed machine isn&amp;rsquo;t reachable from the outside, as fidling with iptables is not everyones passion.&lt;br/&gt;&lt;br/&gt;&lt;i&gt;lokkit&lt;/i&gt; is another way to open some ports to the public.&lt;br/&gt;&lt;br/&gt;Just use&lt;br/&gt;&lt;pre&gt;$ sudo lokkit --list-services&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;to see what services/ports can be managed/opened using lokkit. For me it&amp;rsquo;s quite common to open ports for ssh, ipsec and mdns afer a fresh installation&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;$ sudo lokkit -s ssh&lt;br/&gt;$ sudo lokkit -s mdns&lt;br/&gt;$ sudo lokkit -s ipsec&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Let&amp;rsquo;s see if there will be something &lt;a href="http://fedoraproject.org/wiki/FirewallD/"&gt;new&lt;/a&gt; in the near future to &lt;a href="http://fedoraproject.org/wiki/Features/firewalld"&gt;handle&lt;/a&gt; - somtimes quite complex (see virtualization) - iptable setups.</regular-body><tag>lokkit</tag><tag>iptables</tag><tag>ipsec</tag><tag>ssh</tag><tag>fedora</tag><tag>firewall</tag><tag>firewalld</tag><tag>mdns</tag></post><post id="51491999186" url="https://dummdida.tumblr.com/post/51491999186" url-with-slug="https://dummdida.tumblr.com/post/51491999186/how-to-get-a-link-to-your-public-hardware-data" type="regular" date-gmt="2011-11-27 17:07:00 GMT" date="Sun, 27 Nov 2011 18:07:00" unix-timestamp="1322413620" format="html" reblog-key="MOX5MfzV" slug="how-to-get-a-link-to-your-public-hardware-data" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>How to get a link to your public hardware data (smolt profile).</regular-title><regular-body>&lt;a href="http://smolts.org/"&gt;Smolt&lt;/a&gt; is a &lt;a href="https://fedorahosted.org/smolt/wiki"&gt;tool&lt;/a&gt; to gather data about your hardware in a distribution independent way. Hardware data can be interesting for a couple of reasons, e.g. developers get detailed informations about hardware involved in bugs.&lt;br/&gt;When opted-in, a smolt profile is created for your hardware after the installation, on the first boot (via firstboot).  There is &lt;code&gt;smoltSendProfile&lt;/code&gt; (part of the smolt package), which can be used to re-send your hw data. &lt;br/&gt;But there is no easy way to get a link to your public profile - this should be &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=757515"&gt;changed&lt;/a&gt;, but until then .. &lt;br/&gt;- if you are interested - you can use the following lines, to determine the URL to your public profile: &lt;br/&gt;&lt;pre&gt;$ python import sys&lt;br/&gt;sys.path.append ("/usr/share/smolt/client")&lt;br/&gt;import smolt &lt;br/&gt;print (smolt.get_profile_link(smolt.smoonURL, smolt.getPubUUID ()))&lt;br/&gt;EOF&lt;br/&gt;&lt;/pre&gt;</regular-body><tag>bug</tag><tag>python</tag><tag>fedora</tag><tag>smolt</tag></post><post id="51491998280" url="https://dummdida.tumblr.com/post/51491998280" url-with-slug="https://dummdida.tumblr.com/post/51491998280/securing-peer-connections-using-ipsec" type="regular" date-gmt="2011-11-24 21:24:00 GMT" date="Thu, 24 Nov 2011 22:24:00" unix-timestamp="1322169840" format="html" reblog-key="IQbyjMeW" slug="securing-peer-connections-using-ipsec" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Securing peer connections using IPSec</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/trevorblake/3697135072/" title="Racoons von Trevor Blake bei Flickr"&gt;&lt;img alt="Racoons" height="180" src="http://farm3.staticflickr.com/2545/3697135072_fe88007ab6_m.jpg" width="240"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;If some application or transport protocol doesn&amp;rsquo;t specify a way to encrypt it&amp;rsquo;s contents, it might be still enough to encrypt a lower layer.&lt;br/&gt;&lt;br/&gt;IPSec is a way to encrypt IP packets (actually it is an alternative to IP).&lt;br/&gt;&lt;br/&gt;The script after the break can be used to secure a connection - like an RTSP stream - between two peers using a pre shared key (psk).&lt;br/&gt;&lt;a name="more"&gt;&lt;/a&gt;I updated the script to fix the permissions of psk.txt and a comment on how to remove the SPDs afterwards. &lt;br/&gt;There we go:&lt;br/&gt;&lt;pre&gt;#!/bin/bash&lt;br/&gt;&lt;br/&gt;# Use IPs - if names are used the psk.txt generation needs to be fixed.&lt;br/&gt;LOCAL=$1&lt;br/&gt;REMOTE=$2&lt;br/&gt;PSK=$3&lt;br/&gt;&lt;br/&gt;echo "Securing connection from $LOCAL to $REMOTE."&lt;br/&gt;echo "Ensure to run this script on the remote side too."&lt;br/&gt;echo "Present SAD and SPD entries will be flushed."&lt;br/&gt;&lt;br/&gt;# Flush&lt;br/&gt;/sbin/setkey -FP&lt;br/&gt;&lt;br/&gt;# Add new entries&lt;br/&gt;/sbin/setkey -c flush;&lt;br/&gt;spdflush;&lt;br/&gt;spdadd -4 $LOCAL $REMOTE any -P out ipsec esp/transport//require;&lt;br/&gt;spdadd -4 $REMOTE $LOCAL any -P in ipsec esp/transport//require;&lt;br/&gt;EOF&lt;br/&gt;&lt;br/&gt;# Open ports&lt;br/&gt;for POR in 500 4500; do&lt;br/&gt;for PRO in tcp udp; do&lt;br/&gt;  iptables -I INPUT -p $PRO --dport $POR -j ACCEPT&lt;br/&gt;  iptables -I INPUT -p $PRO --dport $POR -j ACCEPT&lt;br/&gt;done; done&lt;br/&gt;&lt;br/&gt;# Create psk.txt&lt;br/&gt;echo "$REMOTE $PSK" &amp;gt; psk.txt &lt;br/&gt;&lt;br/&gt;# Create racoon.conf&lt;br/&gt;cat  racoon.conf&lt;br/&gt;log info;&lt;br/&gt;path pre_shared_key "psk.txt";&lt;br/&gt;remote anonymous&lt;br/&gt;{&lt;br/&gt;  exchange_mode main;&lt;br/&gt;  lifetime time 2 min;   # sec,min,hour&lt;br/&gt;  proposal_check obey;  # obey, strict or claim&lt;br/&gt;  proposal {&lt;br/&gt;          encryption_algorithm aes;&lt;br/&gt;          hash_algorithm sha256;&lt;br/&gt;          authentication_method pre_shared_key;&lt;br/&gt;          dh_group 2;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;sainfo anonymous&lt;br/&gt;{&lt;br/&gt;  lifetime time 10 min;&lt;br/&gt;  encryption_algorithm aes, 3des, blowfish 448, rijndael ;&lt;br/&gt;  authentication_algorithm hmac_sha512, hmac_sha1, hmac_md5 ;&lt;br/&gt;  compression_algorithm deflate ;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;padding&lt;br/&gt;{&lt;br/&gt;  randomize on;&lt;br/&gt;  randomize_length on;&lt;br/&gt;}&lt;br/&gt;EOF&lt;br/&gt;&lt;br/&gt;# Fix mode&lt;br/&gt;chmod u=rw,go= psk.txt&lt;br/&gt;&lt;br/&gt;# Run racoon&lt;br/&gt;racoon -F -v -f racoon.conf&lt;br/&gt;&lt;br/&gt;# Use setkey -FP to clean up the SPDs afterwards&lt;br/&gt;&lt;/pre&gt;</regular-body><tag>ipsec</tag><tag>racoon</tag><tag>fedora</tag><tag>presence</tag></post><post id="51491997663" url="https://dummdida.tumblr.com/post/51491997663" url-with-slug="https://dummdida.tumblr.com/post/51491997663/the-journal-or-system-wide-logging" type="regular" date-gmt="2011-11-19 12:09:00 GMT" date="Sat, 19 Nov 2011 13:09:00" unix-timestamp="1321704540" format="html" reblog-key="OcAfg5j5" slug="the-journal-or-system-wide-logging" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>The journal - or system wide logging.</regular-title><regular-body>&lt;p&gt;A couple of days ago I mentioned the idea of a &lt;a href="http://dummdida.blogspot.com/2011/11/session-wide-logging-in-gnome.html"&gt;session wide logging&lt;/a&gt; daemon.&lt;br/&gt;Today the folks around systemd introduced &amp;ldquo;&lt;a href="http://0pointer.de/blog/projects/the-journal.html"&gt;the journal&lt;/a&gt;&amp;rdquo;, an improved logging approach for systemd based systems.&lt;/p&gt;</regular-body><tag>gnome</tag><tag>logging</tag><tag>systemd</tag></post><post id="51491996635" url="https://dummdida.tumblr.com/post/51491996635" url-with-slug="https://dummdida.tumblr.com/post/51491996635/presence-is-up-for-review" type="regular" date-gmt="2011-11-16 20:11:00 GMT" date="Wed, 16 Nov 2011 21:11:00" unix-timestamp="1321474260" format="html" reblog-key="a1JQWjoO" slug="presence-is-up-for-review" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>presence is up for review.</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/bawpcwpn/2746639910/" title="becks beer von bawpcwpn bei Flickr"&gt;&lt;img src="http://farm4.static.flickr.com/3262/2746639910_13ea1cdd74_m.jpg" width="240" height="160" alt="becks beer"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;To get presence into Fedora a so called &amp;ldquo;review&amp;rdquo; is needed - as you might know. If not it&amp;rsquo;s a must &lt;a href="https://fedoraproject.org/wiki/Package_Review_Process"&gt;to do&lt;/a&gt; one. &lt;br/&gt;So if you needed something entertaining tonight, just grab a nice bottle of Beck&amp;rsquo;s beer (or Bionade Holunder) and a box of Pringles (or Rosinen) and enjoy the few spec file lines.&lt;br/&gt;&lt;br/&gt;Bug: &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=754554"&gt;https://bugzilla.redhat.com/show_bug.cgi?id=754554&lt;/a&gt;</regular-body><tag>vala</tag><tag>fedora</tag><tag>spec</tag><tag>gstreamer</tag><tag>presence</tag></post><post id="51491995762" url="https://dummdida.tumblr.com/post/51491995762" url-with-slug="https://dummdida.tumblr.com/post/51491995762/yum-update-fails-in-fedora-16-because-of-broken" type="regular" date-gmt="2011-11-13 12:24:00 GMT" date="Sun, 13 Nov 2011 13:24:00" unix-timestamp="1321187040" format="html" reblog-key="m9dYdrxh" slug="yum-update-fails-in-fedora-16-because-of-broken" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>yum update fails in Fedora 16 because of broken certificates</regular-title><regular-body>Today (and also the last days) I ran into trouble when updating my system.&lt;br/&gt;yum update ran silently in to the error:&lt;br/&gt;&lt;pre&gt;$ sudo yum update -y&lt;br/&gt;Geladene Plugins: auto-update-debuginfo, langpacks, presto, refresh-packagekit&lt;br/&gt;Fehler: Cannot retrieve repository metadata (repomd.xml) for repository:&lt;br/&gt;fedora. Please verify its path and try again&lt;br/&gt;&lt;/pre&gt;That didn&amp;rsquo;t tell me a lot about the error, also a yum clean metadata didn&amp;rsquo;t help. &lt;br/&gt;After a bit of googling I stumbled across the URLGRABBER_DEBUG variable which tells yum to debug all URL fetching stuff, this lead me to the error:&lt;br/&gt;&lt;pre&gt;$ sudo URLGRABBER_DEBUG=1 yum update -y&lt;br/&gt;Geladene Plugins: auto-update-debuginfo, langpacks, presto, refresh-packagekit&lt;br/&gt;...&lt;br/&gt;Could not get metalink &lt;a href="https://mirrors.fedoraproject.org/metalink?"&gt;https://mirrors.fedoraproject.org/metalink?&lt;/a&gt;&lt;br/&gt;repo=fedora-debug-16&amp;amp;arch=x86_64 error was&lt;br/&gt;14: Peer cert cannot be verified or peer cert invalid&lt;br/&gt;Fehler: Cannot retrieve repository metadata (repomd.xml) for repository: &lt;br/&gt;fedora. Please verify its path and try again&lt;br/&gt;&lt;/pre&gt;It was discovered last year that such errors are &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=576267"&gt;not passed to the user,&lt;/a&gt; but it might be a good idea to fix this. &lt;br/&gt;To get around the error you can temporarily disable the verification of hosts using yum&amp;rsquo;s setopt switch:&lt;br/&gt;&lt;pre&gt;$ sudo yum update --setopt=sslverify=false&lt;br/&gt;&lt;/pre&gt;</regular-body><tag>yum</tag><tag>fedora</tag></post><post id="51491994591" url="https://dummdida.tumblr.com/post/51491994591" url-with-slug="https://dummdida.tumblr.com/post/51491994591/session-wide-logging-in-gnome" type="regular" date-gmt="2011-11-11 20:47:00 GMT" date="Fri, 11 Nov 2011 21:47:00" unix-timestamp="1321044420" format="html" reblog-key="PKpvM98k" slug="session-wide-logging-in-gnome" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Session wide logging in GNOME.</regular-title><regular-body>&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center&gt;&lt;a href="http://www.flickr.com/photos/21729315@N00/5283540844/" title="Unbenannt von filmbase plus fog bei Flickr"&gt;&lt;img alt="" height="160" src="http://farm6.static.flickr.com/5088/5283540844_da1b51cf89_m.jpg" width="240"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;Currently each application in GNOME is using GLib&amp;rsquo;s logging functionality or something custom.&lt;br/&gt;Errors written to stdout get logged in &lt;i&gt;~/.xsession-errors&lt;/i&gt; - and other places we don&amp;rsquo;t know about.&lt;br/&gt;&lt;br/&gt;What I would like, is to have a central place for application related logging. This could have many benefits:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;Users have a single place to look out for errors applications didn&amp;rsquo;t (yet) tell them about.&lt;/li&gt;&lt;li&gt;A logging daemon can keep a history and this could help solving bugs, e.g. it could be added to &lt;i&gt;abrt&lt;/i&gt; reports.&lt;/li&gt;&lt;li&gt;Leads to less clutter in ~/.xsession-errors &lt;/li&gt;&lt;/ul&gt;If such a daemon is introduced, it should to be easy to integrate and be backwards compatible. In my eyes talking to this daemon can easily be realized by providing a &lt;i&gt;GLogFunc&lt;/i&gt;, which handles the appropriate communication with the daemon. Additional features - like searching or exporting - could also be provided by the DBus interface, bt this is not important for logging itself.&lt;br/&gt;&lt;br/&gt;And this is what I suggest:&lt;br/&gt;&lt;br/&gt;&lt;b&gt;slogd&lt;/b&gt; a simple logging daemon, providing a DBus interface to log messages.  This daemon also has an example backend which logs the messages into a sqlite database (via GDA).&lt;br/&gt;&lt;br/&gt;&lt;b&gt;libslogc&lt;/b&gt; a very tiny library to communicate with the daemon and &lt;b&gt;slogc&lt;/b&gt;, a small tool wrapping libslogc. libslogc also provides &lt;i&gt;slog_client_log (&amp;hellip;)&lt;/i&gt;, a GLogFunc to be used from C.&lt;br/&gt;&lt;br/&gt;And there is finally &lt;i&gt;simple.c&lt;/i&gt;, a small example on how to integrate libslogc. (Well, there ain&amp;rsquo;t much to do.)&lt;br/&gt;&lt;br/&gt;The code can be found at &lt;a href="https://gitorious.org/valastuff/slog"&gt;https://gitorious.org/valastuff/slog&lt;/a&gt;.&lt;br/&gt;This is a prototype to get some feedback and see what other people think about a central logging daemon.</regular-body><tag>gnome</tag><tag>dbus</tag><tag>vala</tag><tag>fedora</tag><tag>logging</tag><tag>glib</tag></post><post id="51491993097" url="https://dummdida.tumblr.com/post/51491993097" url-with-slug="https://dummdida.tumblr.com/post/51491993097/wrapping-opencl-in-vala" type="regular" date-gmt="2011-11-09 20:55:00 GMT" date="Wed, 09 Nov 2011 21:55:00" unix-timestamp="1320872100" format="html" reblog-key="dNC9aR0B" slug="wrapping-opencl-in-vala" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Wrapping OpenCL™ in Vala℠</regular-title><regular-body>&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://www.flickr.com/photos/thomwatson/2323636/" style="margin-left: 1em; margin-right: 1em;" title="soda straw wrapper von Thom Watson bei Flickr"&gt;&lt;img alt="soda straw wrapper" height="180" src="http://farm1.static.flickr.com/3/2323636_5474c9b20d_m.jpg" width="240"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;div style="clear: both;"&gt;&lt;/div&gt;&lt;br/&gt;Because of the recent stirs regarding &lt;a href="http://en.wikipedia.org/wiki/OpenCL"&gt;OpenCL&lt;/a&gt; in our FLOSS ecosystem (think about &lt;a href="http://cgit.freedesktop.org/%7Esteckdenis/clover/"&gt;clover&lt;/a&gt;, &lt;a href="https://launchpad.net/pocl"&gt;pocl&lt;/a&gt;, &lt;a href="http://www.pcc.me.uk/%7Epeter/libclc/"&gt;libclc&lt;/a&gt; and there is one I am missing &amp;hellip;) and some demand on my side, I tried to use OpenCL (in form of &lt;a href="http://software.intel.com/en-us/articles/opencl-sdk/"&gt;Intel&amp;rsquo;s OCL SDK&lt;/a&gt; - as clover and pocl require some bleeding edge clang/llvm) from Vala - my favorite language in the ecological niche of GNOME.&lt;br/&gt;&lt;br/&gt;My first attempt was a straight binding of the &lt;i&gt;cl.h&lt;/i&gt; without modeling the intended OO structures. Modeling the intended structure is possible, but there are more things to do, like run-time checks (ever heard of ErrorCode?) ..&lt;br/&gt;Yesterday I ended in writing a small set of wrapper classes in &lt;a href="http://live.gnome.org/Vala"&gt;vala&lt;/a&gt; (so effectively a GLib wrapper around the low-level OpenCL C API), calling the native C functions via the created low-level API.&lt;br/&gt;Today I got first &lt;a href="http://gitorious.org/valastuff/vapis/blobs/master/tests/opencl/simple.vala"&gt;basic kernel running&lt;/a&gt;, that&amp;rsquo;s nice progress (I just tested in on a CPU, GPUto go &amp;hellip;)&lt;br/&gt;This wrapper removes a lot of the boilerplate (and checks) needed to get OpenCL and a kernel running.&lt;br/&gt;&lt;br/&gt;There is still much room for improvement in the wrapper, much can be cleaned up and &lt;a href="http://gitorious.org/valastuff/vapis/blobs/master/tests/opencl/gopencl.vala"&gt;VAPI&lt;/a&gt; can be restructured to incorporate the OO structure of OpenCL.&lt;br/&gt;This could lead to a simpler wrapper.&lt;br/&gt;&lt;br/&gt;Well, it&amp;rsquo;s start - like the projects mentioned in the first paragraph &amp;hellip; &lt;br/&gt;Dig into it at &lt;a href="http://gitorious.org/valastuff/vapis/trees/master/tests/opencl"&gt;gitorious&lt;/a&gt;. &lt;br/&gt;&lt;br/&gt;</regular-body><tag>vala</tag><tag>fedora</tag><tag>opencl</tag><tag>glib</tag></post><post id="51491992374" url="https://dummdida.tumblr.com/post/51491992374" url-with-slug="https://dummdida.tumblr.com/post/51491992374/presence-and-adjustable-video-quality" type="regular" date-gmt="2011-11-09 20:11:00 GMT" date="Wed, 09 Nov 2011 21:11:00" unix-timestamp="1320869460" format="html" reblog-key="2glHMwir" slug="presence-and-adjustable-video-quality" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Presence and adjustable video quality.</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-GVbPBtK-abo/TrBQ6wfJ_lI/AAAAAAAAAHY/cqjASZaTQK4/s1600/presence-pip.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-GVbPBtK-abo/TrBQ6wfJ_lI/AAAAAAAAAHY/cqjASZaTQK4/s1600/presence-pip.png" width="550"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;&lt;a href="http://dummdida.blogspot.com/p/presence.html"&gt;Presence&lt;/a&gt; - a small vala, gstreamer, clutter and dirac/schroedinger - based bi-directional video tool, is configurable now.&lt;br/&gt;&lt;br/&gt;You can actually use it to establish uni- or bi-directional audio/video streams in trusted/local networks. Sometimes this can be handy, as those streams can be set-up to have a much better quality than generic VoIP solutions &amp;hellip;&lt;br/&gt;You can even receive more than one stream.&lt;br/&gt;&lt;br/&gt;Currently you can adjust the video size, the compression quality and the framerate to get the optimal balance between performance and capabilities of the underlying hardware.&lt;br/&gt;A next thing is to tune those parameters automagically - but I&amp;rsquo;ll need to find out how to detect dropped frames or an increased latency. Additional there should be a way to adjust the latency/buffer on the receiving side, to match the amount of data coming in.&lt;br/&gt;&lt;br/&gt;Find it on &lt;a href="https://gitorious.org/valastuff/presence"&gt;gitorious&lt;/a&gt;.</regular-body><tag>dirac</tag><tag>vala</tag><tag>fedora</tag><tag>gstreamer</tag><tag>presence</tag><tag>schroedinger</tag></post><post id="51491990736" url="https://dummdida.tumblr.com/post/51491990736" url-with-slug="https://dummdida.tumblr.com/post/51491990736/presence-now-has-picture-in-picture-pip-mode" type="regular" date-gmt="2011-11-01 19:50:00 GMT" date="Tue, 01 Nov 2011 20:50:00" unix-timestamp="1320177000" format="html" reblog-key="dMSF8vtQ" slug="presence-now-has-picture-in-picture-pip-mode" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Presence now has »picture in picture (PiP)« mode.</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-GVbPBtK-abo/TrBQ6wfJ_lI/AAAAAAAAAHY/cqjASZaTQK4/s1600/presence-pip.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-GVbPBtK-abo/TrBQ6wfJ_lI/AAAAAAAAAHY/cqjASZaTQK4/s1600/presence-pip.png" width="550"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br/&gt;The &lt;i&gt;next&lt;/i&gt; branch of &lt;a href="http://dummdida.blogspot.com/p/presence.html"&gt;presence&lt;/a&gt; gained PiP support, this allows the parallel view of &amp;ldquo;secondary&amp;rdquo; streams besdes the primary one. Some refactoring needs to be done, before it lands in &lt;i&gt;master&lt;/i&gt;. &lt;br/&gt;Another thing on the todo list are more convenient dialogs. Maybe someone has some styling ideas?  &lt;br/&gt;If you wonder how I got &lt;a href="http://www.bigbuckbunny.org/"&gt;Big Buck Bunny&lt;/a&gt; into presence, just continue reading.&lt;br/&gt;&lt;br/&gt;&lt;a name="more"&gt;&lt;/a&gt;&lt;pre&gt;# Encode big buck bunny:&lt;br/&gt;$ gst-launch \&lt;br/&gt;    filesrc location=big_buck_bunny_720p_stereo.ogg \&lt;br/&gt;      ! decodebin2 ! progressreport \&lt;br/&gt;      ! queue ! tee name=src   \&lt;br/&gt;    oggmux name=mux \&lt;br/&gt;      ! filesink location=big_buck_bunny_720p_stereo.dirac.ogv \&lt;br/&gt;    src. ! queue \&lt;br/&gt;      ! videoscale ! videorate \&lt;br/&gt;      ! video/x-raw-yuv,width=640,height=360,framerate=12/1 \&lt;br/&gt;      ! queue \&lt;br/&gt;      ! schroenc force-profile=vc2_simple quality=8 queue-depth=5 \&lt;br/&gt;      ! mux.    \&lt;br/&gt;    src. ! queue \&lt;br/&gt;      ! theoraenc ! queue \&lt;br/&gt;      ! mux.&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Use the gst-rtsp-server example test-launch and seed it (modify it to listen on port 8555 using &lt;code&gt;server_set_service (...)&lt;/code&gt;!):&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;$ ./test-launch " \&lt;br/&gt;   (filesrc location=big_buck_bunny_720p_stereo.dirac.ogv \&lt;br/&gt;     ! oggdemux ! queue ! tee name=src   \&lt;br/&gt;   src. ! queue ! rtpgstpay name=pay0 pt=96    \&lt;br/&gt;   src. ! queue ! rtpgstpay name=pay1 pt=97 )"&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;And finally publish it:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;$ avahi-publish-service presence2 _rtsp._tcp 8555 test&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;A new entry should appear in presences peers dialog, just connect to it.</regular-body><tag>avahi</tag><tag>bigbuckbunny</tag><tag>fedora</tag><tag>gstreamer</tag><tag>presence</tag></post><post id="51491988480" url="https://dummdida.tumblr.com/post/51491988480" url-with-slug="https://dummdida.tumblr.com/post/51491988480/insight-into-an-gobjects-lifetime" type="regular" date-gmt="2011-10-31 17:22:00 GMT" date="Mon, 31 Oct 2011 18:22:00" unix-timestamp="1320081720" format="html" reblog-key="40D1uSnn" slug="insight-into-an-gobjects-lifetime" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Insight into an GObject's lifetime.</regular-title><regular-body>&lt;center&gt;&lt;!--a href="http://www.flickr.com/photos/kielbryant/390075898/" title="Mir von Kiel Bryant bei Flickr"&gt;&lt;img src="http://farm1.static.flickr.com/137/390075898_55e26a2724_m.jpg" width="240" height="223" alt="Mir"/&gt;&lt;/a--&gt;&lt;a href="http://www.flickr.com/photos/jonathan-d/154113992/" title="My favourite Space Station von veritech_19 bei Flickr"&gt;&lt;img src="http://farm1.static.flickr.com/58/154113992_e3abbe0713_m.jpg" width="240" height="240" alt="My favourite Space Station"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;I just needed a quick way to get an overview over the lifetime of a specific instance of a &lt;a href="http://live.gnome.org/Vala"&gt;Vala&lt;/a&gt; class.&lt;br/&gt;Thus I need some informations about it&amp;rsquo;s creation - and more important - it&amp;rsquo;s destruction time.&lt;br/&gt;robster pointed me to &lt;a href="http://cgit.collabora.com/git/user/danni/gobject-list.git/"&gt;gobject-list&lt;/a&gt; a small library which is preloaded and tracks gobjects&amp;rsquo; &lt;i&gt;_ref&lt;/i&gt; and &lt;i&gt;_unref&lt;/i&gt; calls - so a great tool for vala code.&lt;br/&gt;&lt;br/&gt;It&amp;rsquo;s simple to get it up and running on Fedora: &lt;br/&gt;&lt;pre&gt;$ sudo yum install libunwind-devel glib2-devel&lt;br/&gt;$ git clone git://git.collabora.co.uk/git/user/danni/gobject-list.git&lt;br/&gt;$ make&lt;br/&gt;...&lt;br/&gt;$ cd /path/to/myapp/&lt;br/&gt;$ LD_PRELOAD=/path/to/libgobject-list.so myvalaapp | grep MyClass&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;More can be found in Danielle&amp;rsquo;s initial &lt;a href="http://blogs.gnome.org/danni/2011/02/17/ld_preload-gobject-lifetime-debugging-tool/"&gt;post&lt;/a&gt; and more about vala&amp;rsquo;s memory management can be found &lt;a href="https://live.gnome.org/Vala/ReferenceHandling%20"&gt;here&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;</regular-body><tag>vala</tag><tag>fedora</tag><tag>gobject</tag></post><post id="51491986677" url="https://dummdida.tumblr.com/post/51491986677" url-with-slug="https://dummdida.tumblr.com/post/51491986677/expressing-vapi-dependencies-in-automake" type="regular" date-gmt="2011-10-28 20:39:00 GMT" date="Fri, 28 Oct 2011 22:39:00" unix-timestamp="1319834340" format="html" reblog-key="w1dX4DsL" slug="expressing-vapi-dependencies-in-automake" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Expressing vapi dependencies in automake.</regular-title><regular-body>Today I ran into trouble defining dependencies between different vala files I use within &lt;a href="http://dummdida.blogspot.com/p/presence.html"&gt;presence&lt;/a&gt;.&lt;br/&gt;Automake allows to define dependencies based on targets (like a library &lt;i&gt;libui.a&lt;/i&gt; or sources &lt;i&gt;ui.c&lt;/i&gt;). But how can I add a dependency on a &lt;i&gt;.vapi&lt;/i&gt;? (This dependency might be needed, because &lt;i&gt;app&lt;/i&gt; is using some code from &lt;i&gt;libui&lt;/i&gt;.)&lt;br/&gt;&lt;br/&gt;If I just add a dependency on the library level, make fails when looking for the library while generating the C-Code. Look at the following example:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;app_SOURCES = main.vala&lt;br/&gt;app_LIBADD = libA.a libB.a&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;In the above example &lt;i&gt;main.vala&lt;/i&gt; already needs informations about &lt;i&gt;libA&lt;/i&gt; and &lt;i&gt;libB&lt;/i&gt; when &lt;i&gt;valac&lt;/i&gt; is generating the C-Code. But this doesn&amp;rsquo;t work in a parallel build, when &lt;i&gt;libA&lt;/i&gt; or &lt;i&gt;libB&lt;/i&gt;&amp;rsquo;s vapi is not yet generated.&lt;br/&gt;So I needed to tell automake/make somehow to depend on the &lt;i&gt;.vapi&lt;/i&gt; files of libA/libB - but how? Automake doesn&amp;rsquo;t know about vapis and doesn&amp;rsquo;t provide any targets for them.&lt;br/&gt;&lt;br/&gt;But it seems as this can be solved like this: You can tell automake to &lt;b&gt;depend on the &lt;i&gt;.c&lt;/i&gt; file&lt;/b&gt; corresponding to your &lt;i&gt;.vala&lt;/i&gt; (and so &lt;i&gt;.vapi&lt;/i&gt;) file, as the &lt;i&gt;.c&lt;/i&gt; file is generated at the same time the vapi is generated. And - oh wonder - automake has targets for the c files generated by valac, therefor it&amp;rsquo;s possible to use the &lt;i&gt;.c&lt;/i&gt; files as dependencies when you mention them in the &lt;i&gt;_SOURCES&lt;/i&gt; part of the target in question.&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;app_SOURCES = main.vala libA.c libB.c&lt;br/&gt;app_LIBADD = libA.a libB.a&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Adding the &lt;i&gt;.c&lt;/i&gt; files to the sources doesn&amp;rsquo;t do any harm, but allows &lt;i&gt;app&lt;/i&gt; to depend on the availability of (a) the vapis and (b) the libs for &lt;i&gt;libA&lt;/i&gt; and &lt;i&gt;libB&lt;/i&gt;. So dependencies on both levels (code generation and linking).&lt;br/&gt;&lt;br/&gt;Have a look at this &lt;a href="https://gitorious.org/valastuff/presence/blobs/master/presence/Makefile.am"&gt;Makefile.am&lt;/a&gt; for my real world example.&lt;br/&gt;&lt;br/&gt;There is a high probability that I&amp;rsquo;ve missunderstood or forgot something. Hints and comments are welcome.</regular-body><tag>automake</tag><tag>vala</tag><tag>fedora</tag><tag>presence</tag></post><post id="51491986273" url="https://dummdida.tumblr.com/post/51491986273" url-with-slug="https://dummdida.tumblr.com/post/51491986273/fixed-suspend-and-resume-on-lenovo-x121e" type="regular" date-gmt="2011-10-27 19:45:00 GMT" date="Thu, 27 Oct 2011 21:45:00" unix-timestamp="1319744700" format="html" reblog-key="CUPgv4wc" slug="fixed-suspend-and-resume-on-lenovo-x121e" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Fixed: Suspend and Resume on Lenovo x121e</regular-title><regular-body>&lt;p&gt;Lately - after using suspend and resume extensively - I&amp;rsquo;ve quickly noticed, that the wireless card doesn&amp;rsquo;t come back to live after resume. After filing a &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=742513"&gt;bug&lt;/a&gt; and getting help - it was somewhat dump not to update my bios after right away - I got the bug fixed using &lt;a href="http://support.lenovo.com/en_SE/downloads/detail.page?DocID=DS019252"&gt;this&lt;/a&gt; BIOS/EFI update from Lenovo. &lt;br/&gt;While burning the ISO onto a CD-ROM I found &lt;a href="https://bugzilla.gnome.org/show_bug.cgi?id=662840"&gt;this&lt;/a&gt; bug: When nautilus removes the CD drive from the system and doesn&amp;rsquo;t eject the CD-ROM when pressing the &amp;ldquo;eject&amp;rdquo; button in nautilus&amp;rsquo; sidebar. &lt;br/&gt;A last word regarding suspend and resume - I am not completely convinced that the wireless always returns from suspend &amp;hellip;&lt;/p&gt;</regular-body><tag>nautilus</tag><tag>gnome</tag><tag>lenovo</tag><tag>wireless</tag><tag>fedora</tag><tag>bugzilla</tag></post><post id="51491984880" url="https://dummdida.tumblr.com/post/51491984880" url-with-slug="https://dummdida.tumblr.com/post/51491984880/substanziell-backup-your-subatanceio-document" type="regular" date-gmt="2011-10-27 13:25:00 GMT" date="Thu, 27 Oct 2011 15:25:00" unix-timestamp="1319721900" format="html" reblog-key="8xtn3fcJ" slug="substanziell-backup-your-subatanceio-document" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>substanziell - Backup your subatance.io document.</regular-title><regular-body>&lt;a href="http://www.substance.io/"&gt;substance.io&lt;/a&gt; is a nice &lt;i&gt;document authoring and publishing for the web&lt;/i&gt; - but sometimes it has it hickups and you can loose parts of your document. No good, but - hey - let&amp;rsquo;s make backups. &lt;br/&gt;After exporting your cookies (using some Export cookies Firefox add-on), you can use the following &lt;b&gt;while&lt;/b&gt;-loop to backup your progress regularly into a a clean git repository. &lt;br/&gt;&lt;pre&gt;while true ; &lt;br/&gt;do \&lt;br/&gt;  curl -O -b cookies.txt \&lt;br/&gt;    &lt;a href="http://substance.io/%24USERNAME/%24DOCUMENTNAME.latex"&gt;http://substance.io/$USERNAME/$DOCUMENTNAME.latex&lt;/a&gt; ; \&lt;br/&gt;  git commit -asm"Auto-save." ; \&lt;br/&gt;  sleep 60 ; \&lt;br/&gt;done&lt;br/&gt;&lt;/pre&gt;And thanks to _mql for getting back some lost lines.</regular-body><tag>substance</tag></post><post id="51491984379" url="https://dummdida.tumblr.com/post/51491984379" url-with-slug="https://dummdida.tumblr.com/post/51491984379/da-sein-introducing-presence-a-tool-for" type="regular" date-gmt="2011-10-21 12:49:00 GMT" date="Fri, 21 Oct 2011 14:49:00" unix-timestamp="1319201340" format="html" reblog-key="vVeBHmay" slug="da-sein-introducing-presence-a-tool-for" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Da sein - Introducing presence a tool for »videoconferencing«</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-STnkcdwrgy0/TqFhQs0R9KI/AAAAAAAAAGw/NByJTrAapy8/s1600/presence-0.3.1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-STnkcdwrgy0/TqFhQs0R9KI/AAAAAAAAAGw/NByJTrAapy8/s320/presence-0.3.1.png" width="550"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;b&gt;Intended purpose&lt;/b&gt;: Use this application to transmitt audio and video in an n-to-m-peers fashion in quite high quality and with a hopefully low latency. This can be the case in scenarios like connecting video walls, e-lecture or simple bi-directional two people communication.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Intended audience and requirements:&lt;/b&gt; This application is designed for an elite circle of users who are in a situation with: &lt;br/&gt;&lt;ul&gt;&lt;li&gt;no NAT problems, e.g. IPv6 users&lt;/li&gt;&lt;li&gt;one multicast domain or access to their DNS records&lt;/li&gt;&lt;li&gt;quite high bandwidth, like 2 Mb/s&lt;/li&gt;&lt;li&gt;secured transport way, aka VPN or or non-public network&lt;/li&gt;&lt;li&gt;multi-core systems (single core Intel Atoms are a no-go), but something like an AMD E-350&lt;/li&gt;&lt;li&gt;Fedora 16 &lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;b&gt;Design:&lt;/b&gt; Trageting a very specific need (near-realtime bi-directional a/v transmission in a &lt;i&gt;good quality&lt;/i&gt;, not caring about bandwidth and security) this tool also doesn&amp;rsquo;t follow public standars like RFCs, but more builds ontop of available features (e.g. gstreamers &lt;i&gt;rtpgstpay&lt;/i&gt;). On the other side standards are use: &lt;br/&gt;&lt;ul&gt;&lt;li&gt;RTSP stream control&lt;/li&gt;&lt;li&gt;dirac video codec&lt;/li&gt;&lt;li&gt;vorbis audio codec&lt;/li&gt;&lt;li&gt;mdns service discovery&lt;/li&gt;&lt;li&gt;Mx based interface&lt;/li&gt;&lt;li&gt;Fulscreen mode&lt;/li&gt;&lt;li&gt;IPv6 support&lt;/li&gt;&lt;/ul&gt;Currently presence is some kind of beta. Find out more on the appropriate &lt;a href="http://dummdida.blogspot.com/p/presence.html"&gt;page&lt;/a&gt;.</regular-body><tag>clutter</tag><tag>mx</tag><tag>gnome</tag><tag>rtsp</tag><tag>dirac</tag><tag>ipv6</tag><tag>vala</tag><tag>fedora</tag><tag>presence</tag><tag>schroedinger</tag></post><post id="51491982989" url="https://dummdida.tumblr.com/post/51491982989" url-with-slug="https://dummdida.tumblr.com/post/51491982989/update-on-efi-and-fedora-16-live-images" type="regular" date-gmt="2011-10-18 13:36:00 GMT" date="Tue, 18 Oct 2011 15:36:00" unix-timestamp="1318944960" format="html" reblog-key="BjY89Xxe" slug="update-on-efi-and-fedora-16-live-images" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Update on EFI and Fedora 16 Live images.</regular-title><regular-body>&lt;p&gt;Somehow Fedora 16 re-gained EFI support - after it was lost in the beginning of the Fedora 16 process. The trouble seems to be introduced partly because of the migration to &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=735023"&gt;grub2&lt;/a&gt; or changes to anaconda.&lt;br/&gt;But as of &lt;a href="http://markmail.org/message/3zcvwwphbtbs3dxn"&gt;Fedora 16 TC1&lt;/a&gt; also the &lt;a href="http://dl.fedoraproject.org/pub/alt/stage/16.TC1/Live/x86_64/"&gt;Live CDs&lt;/a&gt; support EFI! Look &lt;a href="http://dummdida.blogspot.com/2011/10/efi-fedora.html"&gt;here&lt;/a&gt; to learn how to make a bootable USB media from the iso you downloaded.&lt;br/&gt;&lt;br/&gt;As we already know, the installation DVDs already support EFI, since rc3 (or so).&lt;br/&gt;Participate and provide some feedback (e.g. via IRC or &lt;a href="http://bugzilla.redhat.com/"&gt;bugzilla&lt;/a&gt;) on bugs when &lt;a href="https://fedoraproject.org/wiki/Test_Results:Current_Desktop_Test"&gt;testing&lt;/a&gt; out the &lt;a href="http://dl.fedoraproject.org/pub/alt/stage/16.TC1/Live/x86_64/"&gt;media&lt;/a&gt;.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>efi</tag></post><post id="51491982265" url="https://dummdida.tumblr.com/post/51491982265" url-with-slug="https://dummdida.tumblr.com/post/51491982265/building-gcc-434-on-fedora-15" type="regular" date-gmt="2011-10-13 07:39:00 GMT" date="Thu, 13 Oct 2011 09:39:00" unix-timestamp="1318491540" format="html" reblog-key="Nz5yzROc" slug="building-gcc-434-on-fedora-15" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Building gcc-4.3.4 on Fedora 15</regular-title><regular-body>Currently you need to rely on proprietary drivers to use CUDA or OpenCL on a GPU under Linux. &lt;br/&gt;&lt;br/&gt;There is &lt;a href="http://cgit.freedesktop.org/~steckdenis/clover/"&gt;clover&lt;/a&gt; a OpenCL implementation capable of running on a CPU - but in my case I had to use CUDA. And CUDA requires gcc 4.3.4, which is not available for Fedora 15 natively, so we have to build it our self.&lt;br/&gt;Actually it is quite straight to build it.&lt;br/&gt;Install some requirements: &lt;pre&gt;$ sudo yum install glibc-devel.i686 glibc-devel.x86_64 \&lt;br/&gt;    gmp-devel mpfr-devel&lt;br/&gt;&lt;/pre&gt;Fetch the source: &lt;pre&gt;$ mkdir gcc&lt;br/&gt;$ cd gcc&lt;br/&gt;$ curl -O \&lt;br/&gt;   "ftp://ftp.gwdg.de/pub/misc/gcc/releases/gcc-4.3.4/gcc-4.3.4.tar.bz2"&lt;br/&gt;&lt;/pre&gt;And finally configure, build and install it. It took around 20minutes on my machine. I installed this gcc version not in my native PATH, as I didn&amp;rsquo;t want any collisions, I choose &lt;i&gt;../build&lt;/i&gt; as a suitable destination. In this case you have to remember to modify your PATH and LD_LIBRARY_PATH environment variables. So the app (e.g. nvcc) in question is looking in the right path when calling gcc. &lt;pre&gt;&lt;br/&gt;$ export DST="${PWD}/../build"&lt;br/&gt;$ mkdir "$DST"&lt;br/&gt;$ nice ./configure --prefix="$DST" \&lt;br/&gt;    --with-gmp=/usr/lib/ --with-mpc=/usr/lib/ --with-mpfr=/usr/lib/&lt;br/&gt;$ nice make -j8&lt;br/&gt;$ make install&lt;br/&gt;&lt;/pre&gt;I can also consider adding the  &lt;i&gt;&amp;ndash;program-suffix=4.3.4&lt;/i&gt; to add the given suffix to all binaries, this makes sense when you install this build into %{_bindir} and %{_libdir}. &lt;br/&gt;Finally you can launch &lt;i&gt;nvcc&lt;/i&gt; or whatever application is requiring gcc-4.3.4. &lt;pre&gt;&lt;br/&gt;$ PATH="${DST}/bin:$PATH" LD_LIBRARY_PATH="${DST}/lib64:${DST}/lib" \&lt;br/&gt;    nvcc [...]&lt;br/&gt;&lt;/pre&gt;</regular-body><tag>clover</tag><tag>cuda</tag><tag>fedora</tag><tag>opencl</tag><tag>gcc</tag></post><post id="51491981011" url="https://dummdida.tumblr.com/post/51491981011" url-with-slug="https://dummdida.tumblr.com/post/51491981011/hinterher-tracing-vala-c-code-with-systemtap" type="regular" date-gmt="2011-10-12 11:06:00 GMT" date="Wed, 12 Oct 2011 13:06:00" unix-timestamp="1318417560" format="html" reblog-key="tXs6oHAE" slug="hinterher-tracing-vala-c-code-with-systemtap" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Hinterher - Tracing vala (c-) code with systemtap.</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/irulan/256241200/" title="Abfluss von irulandotnet bei Flickr"&gt;&lt;img src="http://farm1.static.flickr.com/85/256241200_2eb9f1640f_m.jpg" width="240" height="180" alt="Abfluss"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;As many others I&amp;rsquo;ve read Richard&amp;rsquo;s &lt;a href="http://rwmj.wordpress.com/2011/10/10/using-systemtap-to-trace-into-libraries/"&gt;post&lt;/a&gt; on tracing shared library calls using &lt;a href="https://en.wikipedia.org/wiki/SystemTap"&gt;SystemTap&lt;/a&gt; (stap). This reminded me about a problem with vala a while back, which was about how to profile vala code.&lt;br/&gt;Taking the following snippet, we will trace the calls to of methods of the &lt;i&gt;Foo&lt;/i&gt; class, for some profiling. &lt;br/&gt;&lt;pre&gt;&lt;br/&gt;$ cat  foo.vala&lt;br/&gt;using Gee;&lt;br/&gt;&lt;br/&gt;class Foo : Object&lt;br/&gt;{&lt;br/&gt;  public void do ()&lt;br/&gt;  {&lt;br/&gt;    print ("done");&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;void main()&lt;br/&gt;{&lt;br/&gt;  var map = new HashMap&lt;string&gt; ();&lt;br/&gt;  map["one"] = 1;&lt;br/&gt;  map["two"] = 2;&lt;br/&gt;  map["forty"] = 40;&lt;br/&gt;  print ("%d\n", map["forty"] + map["two"]);&lt;br/&gt;&lt;br/&gt;  var f = new Foo ();&lt;br/&gt;  f.do ();&lt;br/&gt;  f.do ();&lt;br/&gt;}&lt;br/&gt;EOF&lt;br/&gt;$ vala --pkg libgee-1.0 --debug --save-temps foo.vala&lt;br/&gt;&lt;/string&gt;&lt;/pre&gt;Have a look at the C-code derived from the vala snippet above and look at the function names, to build a regular expression for the to-be-watched function calls. It is important to compile the snippet using the &lt;i&gt;&amp;ndash;debug&lt;/i&gt; switch, this enables stap to look out for the functions in question. &lt;br/&gt;Additionally we need the following stap snippet (normally found in &lt;i&gt;.stp&lt;/i&gt; files), to add the appropriate hooks to the kernel. The following stap script get&amp;rsquo;s compiled into a kernel module and watches the mathod calls on instances of the &lt;i&gt;Foo&lt;/i&gt; class.  &lt;pre&gt;&lt;br/&gt;$ cat  foo.stp&lt;br/&gt;#!/usr/bin/stap&lt;br/&gt;&lt;br/&gt;global last;&lt;br/&gt;&lt;br/&gt;function display_time () {&lt;br/&gt;  now = gettimeofday_us ();&lt;br/&gt;  delta = 0;&lt;br/&gt;  if (last &amp;gt; 0)&lt;br/&gt;    delta = now - last;&lt;br/&gt;  last = now;&lt;br/&gt;&lt;br/&gt;  printf ("%d (+%d):", now, delta);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;probe begin {&lt;br/&gt;  last = 0;&lt;br/&gt;  printf ("ready\n");&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;# Modify to match the C signatures of teh methods in question&lt;br/&gt;probe process("/home/fabiand/tmp/sl")&lt;br/&gt;            .function("foo_[a-z]*") ? {&lt;br/&gt;  display_time();&lt;br/&gt;  printf ("\t%s %s\n", probefunc(), $$parms);&lt;br/&gt;}&lt;br/&gt;EOF&lt;br/&gt;&lt;/pre&gt;Now we&amp;rsquo;ve got the binary to trace and the script to watch the appropriate function calls, next is to compile/launch the script before we finally launch our binary. &lt;pre&gt;&lt;br/&gt;$ sudo stap -tv foo.stp&lt;br/&gt;ready&lt;br/&gt;&lt;/pre&gt;And on a different terminal run the binary: &lt;pre&gt;&lt;br/&gt;$ ./sl&lt;br/&gt;42&lt;br/&gt;&lt;/pre&gt;This should get the above stap call, to spit out the following (or comparable) lines: &lt;pre&gt;&lt;br/&gt;1318412226924288 (+0): foo_new &lt;br/&gt;1318412226924298 (+10): foo_get_type &lt;br/&gt;1318412226924309 (+11): foo_construct object_type=0x11afe30&lt;br/&gt;1318412226924317 (+8): foo_class_init klass=0x11aff30&lt;br/&gt;1318412226924324 (+7): foo_instance_init self=0x11a7180&lt;br/&gt;1318412226924330 (+6): foo_do self=0x11a7180&lt;br/&gt;1318412226924348 (+18): foo_do self=0x11a7180&lt;br/&gt;&lt;/pre&gt;First there is an absolute timestamp, followed by the delta between two (matched) function calls in brackets. The delta does not mean that the function call took so long, it is more the time between two function calls matching the regexp in the &lt;i&gt;.stp&lt;/i&gt; file, so there can be an arbitary number of function calls between two listed ones.</regular-body><tag>systemtap</tag><tag>vala</tag></post><post id="51491980211" url="https://dummdida.tumblr.com/post/51491980211" url-with-slug="https://dummdida.tumblr.com/post/51491980211/efi-fedora" type="regular" date-gmt="2011-10-09 19:17:00 GMT" date="Sun, 09 Oct 2011 21:17:00" unix-timestamp="1318187820" format="html" reblog-key="Z39rIDeq" slug="efi-fedora" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>EFI ➫ Fedora</regular-title><regular-body>Ain&amp;rsquo;t unicode chars nice? :)&lt;br/&gt;&lt;br/&gt;Finally, after much work EFI (much thanks to the anaconda team and all those testers) support is quite mature in Fedora 16 Beta. There are still some issues (➫ bugzilla) but in general it&amp;rsquo;s working.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Hardware&lt;/b&gt;: It&amp;rsquo;s not easy to see if your hardware supports EFI booting, best is took in your BIOS and see if the magic EFI keyword appears somewhere.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Boot media&lt;/b&gt;: If you want to try out an EFI boot media you&amp;rsquo;ve got two or three common ways of doing so.&lt;br/&gt;&lt;ol&gt;&lt;li&gt;First you try the Fedora 16 Beta DVD or netinst images.&lt;br/&gt;You can write those images to a DVD using nautilus (right click on the iso &amp;hellip;).&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt;: If you want to use them via a USB-stick you need to use the &lt;i&gt;livecd-iso-to-disk&lt;/i&gt; tool, part of the  livecd-tools package. Also remember to pass the &lt;i&gt;&amp;ndash;efi&lt;/i&gt; switch. In generall it should look somewhat like the following example:&lt;/li&gt;&lt;blockquote&gt;&lt;pre&gt;$ sudo livecd-iso-to-disk --format --efi \&lt;br/&gt;  Fedora16-DVD.iso  /dev/sdg&lt;/pre&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;li&gt;The other way is to use the &lt;i&gt;efidisk.img&lt;/i&gt; which can be found in the images directory of the DVD images. This image can be written to a USB-stick using dd: &lt;pre&gt;$ sudo dd if=efidisk.img of=/dev/sdg&lt;br/&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br/&gt;Also note that the LiveCD images are &lt;strike&gt;&lt;i&gt;not yet&lt;/i&gt;&lt;/strike&gt; &lt;a href="http://dummdida.blogspot.com/2011/10/update-on-efi-and-fedora-16-live-images.html"&gt;now&lt;/a&gt; bootable on a native EFI system.  Normally those systems will fall back to a legacy BIOS boot, which also makes it hard to determine if a system is booted via EFI or BIOS. (The path &lt;code&gt;/sys/firmware/efi&lt;/code&gt; exists on systems booted via EFI) &lt;br/&gt;&lt;br/&gt;EFI plus some &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;boot&lt;/a&gt; &lt;a href="http://www.harald-hoyer.de/personal/blog/fedora-15-8-services-you-can-most-likely-disable"&gt;optimizations&lt;/a&gt; can then finally lead to quick boot process.</regular-body><tag>fedora</tag><tag>efi</tag><tag>systemd</tag></post><post id="51491979292" url="https://dummdida.tumblr.com/post/51491979292" url-with-slug="https://dummdida.tumblr.com/post/51491979292/bodenständig-gswitcheroo-reached-some-point" type="regular" date-gmt="2011-10-09 18:56:00 GMT" date="Sun, 09 Oct 2011 20:56:00" unix-timestamp="1318186560" format="html" reblog-key="oD0nNluD" slug="bodenständig-gswitcheroo-reached-some-point" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Bodenständig - gswitcheroo reached some point.</regular-title><regular-body>&lt;p&gt;&lt;a href="http://dummdida.blogspot.com/search/label/gswitcheroo"&gt;Gswitcheroo&lt;/a&gt;, a &lt;a href="https://gitorious.org/valastuff/gswitcheroo"&gt;small daemon&lt;/a&gt; to handle vgaswitcheroo, is now in a state that helps me.&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-3PMpmEImtfs/TpHttVE7SKI/AAAAAAAAAGk/kJlgo6ni2OA/s1600/takeaswitch1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-3PMpmEImtfs/TpHttVE7SKI/AAAAAAAAAGk/kJlgo6ni2OA/s1600/takeaswitch1.png" width="550"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;Currently it suggests to switch to the discrete graphics card (an ATI card in my case), if an external monitor is detected non boot. If no external monitor is detected, it suggests to discable the discrete card, to save power. And because hybrid setups just appear in laptops, it usually makes sense to save some watts.&lt;br/&gt;&lt;br/&gt;During the last weeks I&amp;rsquo;ve learned that it is not possible, to determin if a monitor is connected, when the discrete card is disabled. If I wanted to detect a hot-plugged monitor, I would need to do some polling (including turning the discrete card on and off), but this didn&amp;rsquo;t seem to be to good, so I skipped it and just provided the basic functionality described above.</regular-body><tag>vgaswitcheroo</tag><tag>vala</tag><tag>fedora</tag><tag>gswitcheroo</tag></post><post id="51491978111" url="https://dummdida.tumblr.com/post/51491978111" url-with-slug="https://dummdida.tumblr.com/post/51491978111/from-vala-to-js-with-emscripten" type="regular" date-gmt="2011-10-05 15:42:00 GMT" date="Wed, 05 Oct 2011 17:42:00" unix-timestamp="1317829320" format="html" reblog-key="nkFwXCHI" slug="from-vala-to-js-with-emscripten" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>From vala to js - with emscripten.</regular-title><regular-body>Stumbling over &lt;a href="http://emscripten.org/"&gt;emscripten&lt;/a&gt; again. A fun tool to compile llvm bytecode to JavaScript.&lt;br/&gt;After installing some basic dependencies via &lt;pre&gt;&lt;br/&gt;$ sudo yum install vala clang js&lt;br/&gt;&lt;/pre&gt;and a bit of glue (see below) and you can quickly run code written in vala using a JavaScript interpreter. All this can be done with all code clang compiles, so there is no more magic than normal involved.&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;$ cd /tmp&lt;br/&gt;$ git clone &lt;a href="https://github.com/kripken/emscripten.git"&gt;https://github.com/kripken/emscripten.git&lt;/a&gt;&lt;br/&gt;$ wget &lt;a href="http://closure-compiler.googlecode.com/files/compiler-latest.zip"&gt;http://closure-compiler.googlecode.com/files/compiler-latest.zip&lt;/a&gt;&lt;br/&gt;$ unzip compiler-latest.zip&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Now that all software is in place, do some configurations by editing &lt;code&gt;~/.emscripten&lt;/code&gt;: &lt;br/&gt;&lt;br/&gt;&lt;pre&gt;$ cat # path where you cloned emscripten&lt;br/&gt;EMSCRIPTEN_ROOT=os.path.expanduser("~/tmp/emscripten") &lt;br/&gt;# I needed to link EMSCRIPTEN_ROOT/src/tmp to this path e.g. &lt;br/&gt;TEMP_DIR='/tmp' &lt;br/&gt;&lt;br/&gt;LLVM_ROOT=os.path.expanduser('/usr/bin/')&lt;br/&gt;#LLVM_GCC=... # we don't have that on fedora&lt;br/&gt;COMPILER_OPTS = ['-m64'] # Change to your arch!&lt;br/&gt;&lt;br/&gt;SPIDERMONKEY_ENGINE = [os.path.expanduser('/usr/bin/js'), '-m']&lt;br/&gt;COMPILER_ENGINE=SPIDERMONKEY_ENGINE&lt;br/&gt;JS_ENGINE=SPIDERMONKEY_ENGINE&lt;br/&gt;CLOSURE_COMPILER = os.path.expanduser('~/tmp/emscripten/closure-compiler.jar')&lt;br/&gt;&lt;br/&gt;TIMEOUT=None&lt;br/&gt;EOF&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Basically now everything is in place. Using the following snippet &lt;br/&gt;&lt;pre class="brush:csharp"&gt;struct FooBar&lt;br/&gt;{&lt;br/&gt;	int m;&lt;br/&gt;	public void wtf ()&lt;br/&gt;	{&lt;br/&gt;		stdout.printf ("Wtf!\n"); // The \n is important.&lt;br/&gt;	}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;void main()&lt;br/&gt;{&lt;br/&gt;	FooBar f = FooBar ();&lt;br/&gt;	f.wtf ();&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&amp;hellip; we can compile and execute the whoole thing using the following lines: &lt;br/&gt;&lt;br/&gt;&lt;pre&gt;$ valac --profile=posix --ccode vaem.vala&lt;br/&gt;$ clang -emit-llvm -S -o vaem.ll vaem.c&lt;br/&gt;$ ./emscripten.py va/vaem.ll -o vaem.js&lt;br/&gt;$ js -m vaem.js&lt;br/&gt;Wtf!&lt;br/&gt;$&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;We need to use the posix profile, otherwise we need to compile the whole glib/gobject system using emscripten. Another way of creating JavaScript from vala code is using &lt;a href="https://gitorious.org/lethal-works/maja"&gt;maja&lt;/a&gt;.</regular-body><tag>emscripten</tag><tag>llvm</tag><tag>vala</tag><tag>fedora</tag><tag>maja</tag></post><post id="51491977232" url="https://dummdida.tumblr.com/post/51491977232" url-with-slug="https://dummdida.tumblr.com/post/51491977232/displaylink-and-vgaswitcheroo" type="regular" date-gmt="2011-09-29 18:58:00 GMT" date="Thu, 29 Sep 2011 20:58:00" unix-timestamp="1317322680" format="html" reblog-key="h5ZSnKxD" slug="displaylink-and-vgaswitcheroo" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>DisplayLink and vgaswitcheroo.</regular-title><regular-body>&lt;b&gt;DisplayLink:&lt;/b&gt; Just something I wanted to share. The problem with current &amp;lsquo;modern&amp;rsquo; laptops can be, that they don&amp;rsquo;t provide a VGA port, which is often required to connect beamers (the reason why I needed one of those adapters). One way to to solve this, is to use some &lt;a href="http://en.wikipedia.org/wiki/DisplayLink"&gt;DisplayLink&lt;/a&gt; adapter, which allows to connect display via USB. &lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://upload.wikimedia.org/wikipedia/en/3/33/DisplayLink-Logo.png" imageanchor="1" style="margin-left:1em; margin-right:1em"&gt;&lt;img border="0" width="160" src="http://upload.wikimedia.org/wikipedia/en/3/33/DisplayLink-Logo.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;But it is hard to find &lt;i&gt;real&lt;/i&gt; DisplayLink adapters, it took me two random and one informed transaction to get a supported adapter:&lt;a href="http://www.logilink.eu/showproduct/UA0077.htm"&gt;LogiLink  USB to DVI/VGA/HDMI Multi-Display Adapter (UA0077)&lt;/a&gt;. &lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://www.logilink.eu/images/products/_500/UA0077.gif" imageanchor="1" style="margin-left:1em;" margin-bottom:1em&gt;&lt;img border="0" width="200" src="http://www.logilink.eu/images/products/_500/UA0077.gif"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;This adapter has quite good support in Fedora after installing the xorg-x11-driver-displaylink package. &lt;pre&gt;&lt;br/&gt;$ sudo yum install xorg-x11-driver-displaylink&lt;br/&gt;$ sudo modprobe sisusbvga&lt;br/&gt;&lt;/pre&gt;Use &lt;code&gt;dmesg&lt;/code&gt; to find out about the assigned framebuffer-device (fb). Now the driver is available and the appropriate kernel module loaded but you still need to dump the following file into &lt;code&gt;/etc/X11/xorg.conf.d/&lt;/code&gt;&lt;pre&gt;&lt;br/&gt;# /etc/X11/xorg.conf.d/displaylink.conf&lt;br/&gt;Section "Device"&lt;br/&gt;        Option       "fbdev"     "/dev/fb2"    # use the device given in dmesg&lt;br/&gt;	Identifier   "DLCard"&lt;br/&gt;	Driver       "displaylink"&lt;br/&gt;EndSection&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;b&gt;vgaswitcheroo:&lt;/b&gt; Well, I didn&amp;rsquo;t find out much more on the vgaswitcheroo side. I didn&amp;rsquo;t find a way to determin if a monitor is connected to the discrete card, when this card is turned of (it seems that on some setups the integrated card get&amp;rsquo;s &amp;ldquo;infos&amp;rdquo; about monitors connected to the discrete card, but not on mine). But I wont continue to poll for a monitor on the discrete card, so I&amp;rsquo;ll just provide some trayicon (or how i&amp;rsquo;s called in the shell slang), which enables the user to switch between the cards.</regular-body><tag>vgaswitcheroo</tag><tag>displaylink</tag><tag>fedora</tag><tag>multiseat</tag><tag>gswitcheroo</tag></post><post id="51491975946" url="https://dummdida.tumblr.com/post/51491975946" url-with-slug="https://dummdida.tumblr.com/post/51491975946/alliteration-fedora-fusion" type="regular" date-gmt="2011-09-28 12:49:00 GMT" date="Wed, 28 Sep 2011 14:49:00" unix-timestamp="1317214140" format="html" reblog-key="aJjBi2Mm" slug="alliteration-fedora-fusion" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Alliteration - Fedora Fusion</regular-title><regular-body>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://news.eu.lenovo.com/pr/lenovo-we/photo/ThinkPad_X121e_1-prv.jpg" imageanchor="1" style="margin-left:1em; margin-right:1em"&gt;&lt;img border="0" height="267" width="400" src="http://news.eu.lenovo.com/pr/lenovo-we/photo/ThinkPad_X121e_1-prv.jpg"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;I got my hands on a Lenovo x121e (5051) - an AMD Fusion E-350 powered laptop. So how does Fedora &lt;strike&gt;16 Alpha&lt;/strike&gt; 15 on that device?&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Reasons?&lt;/b&gt; Much new things to test: EFI, AMD Fusion E-350, HDMI + VGA. And a quite low price tag at about € 360.&lt;br/&gt;Like Fedora somewhat on the bleeding edge.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;What works?&lt;/b&gt; Everything I tested so far. Wireless (Atheros), Graphics (ATI Radeon), Harddrive, USB, &amp;hellip;&lt;br/&gt;And all those shiny things worked &lt;i&gt;out of the box (!)&lt;/i&gt;. No manual intervention needed, so a silent a cautious &lt;b style="color: #0b5394; font-family: Arial,Helvetica,sans-serif;"&gt;A+&lt;/b&gt;.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;What doesn&amp;rsquo;t?&lt;/b&gt; I just noticed some graphics glitches in gnome-shell, but maybe those will get fixed until the final release.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;EFI:&lt;/b&gt; I could boot into Fedora 16 Alpha Live Desktop using the legacy fallback. EFI seems to work, but there are currently &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=735023"&gt;issues&lt;/a&gt; booting Fedora 16 with EFI, so I went back and use Fedora 15 updates-testing booted via EFI and BTRFS partitions.</regular-body><tag>lenovo</tag><tag>fedora</tag><tag>efi</tag></post><post id="51491974011" url="https://dummdida.tumblr.com/post/51491974011" url-with-slug="https://dummdida.tumblr.com/post/51491974011/qemu-and-backing-images" type="regular" date-gmt="2011-09-26 19:00:00 GMT" date="Mon, 26 Sep 2011 21:00:00" unix-timestamp="1317063600" format="html" reblog-key="LrKKnQXW" slug="qemu-and-backing-images" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>qemu and backing images.</regular-title><regular-body>&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;center&gt;&lt;a href="http://www.flickr.com/photos/communiter/4057385947/" title="Cows cows cows von aWorldTourer bei Flickr"&gt;&lt;img alt="Cows cows cows" height="151" src="http://farm3.static.flickr.com/2556/4057385947_60861fa0e7_m.jpg" width="240"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;I always wondered but never really looked up how backing files can be used with qemu. I came back to this when stumbling across  the &lt;a href="http://curl.haxx.se/"&gt;curl&lt;/a&gt; &lt;a href="https://gitorious.org/qemu/qemu/blobs/history/master/block/curl.c"&gt;backend&lt;/a&gt; which brings http and ftp support to qemu and landed in fedora &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=737006"&gt;recently&lt;/a&gt;.&lt;br/&gt;The idea is basically to use some master image accessed via http, e.g. residing in some &lt;a href="https://admin.fedoraproject.org/pkgdb/acls/name/openstack-swift"&gt;object&lt;/a&gt; &lt;a href="https://admin.fedoraproject.org/pkgdb/acls/name/hail"&gt;store&lt;/a&gt;, as a backing file for the actual image. This is a quite flexible setup. No need for iscsi or so.&lt;br/&gt;Oh yes, the thing about a backing file is that all reads are happening on the backing file, until a block is written (also know as &lt;i&gt;cow&lt;/i&gt; [copy on write]).&lt;br/&gt;&lt;br/&gt;It turned out that the magic is happening while creating an image, not when running it:&lt;br/&gt;&lt;br/&gt;&lt;code&gt;$ qemu-img create -f qed -o backing_file=http://..../amaster.iso instance.qed 20G&lt;/code&gt;&lt;br/&gt;&lt;code&gt;$ sudo qemu-kvm -hda instance.qed&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;Sadly we can&amp;rsquo;t test this on stock Fedora, as curl is enabled but currently broken in qemu. Maybe this ain&amp;rsquo;t a bug at all or the bug is already fixed upstream (there are some fresh changes to curl), so this can be tested at some near point in the future.&lt;br/&gt;It is also to note, that backing files also integrates well with &lt;a href="http://libvirt.org/formatstorage.html#StorageVolBacking"&gt;libvirt&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;</regular-body><tag>hail</tag><tag>fedora</tag><tag>qemu</tag><tag>openstack</tag></post><post id="51491973611" url="https://dummdida.tumblr.com/post/51491973611" url-with-slug="https://dummdida.tumblr.com/post/51491973611/poll-no-poll-poll" type="regular" date-gmt="2011-09-23 07:37:00 GMT" date="Fri, 23 Sep 2011 09:37:00" unix-timestamp="1316763420" format="html" reblog-key="tR7LQB5w" slug="poll-no-poll-poll" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Poll, no poll, poll.</regular-title><regular-body>&lt;p&gt;While working on gswitcheroo I needed a reliable way to determine if a monitor get&amp;rsquo;s connected to the HDMI port of the discrete card. But monitoring the HDMI port when the corresponding discrete card is powered off, doesn&amp;rsquo;t seem to work.&lt;br/&gt;A temporary solution is to power on the discrete card once and again, to see if a some monitor got connected. &lt;a href="http://airlied.livejournal.com/"&gt;airlied&lt;/a&gt; point out, that maybe the integrated card is able to detect connected monitors. But in the first trial it didn&amp;rsquo;t really work.&lt;br/&gt;&lt;br/&gt;What also didn&amp;rsquo;t work, was monitoring status changes of the discrete (radeon) card using udev (using &lt;code&gt;udevadm monitor&lt;/code&gt;).  Time for more investigations.&lt;/p&gt;</regular-body><tag>vgaswitcheroo</tag><tag>gswitcheroo</tag></post><post id="51491971497" url="https://dummdida.tumblr.com/post/51491971497" url-with-slug="https://dummdida.tumblr.com/post/51491971497/zyklisch-gswitcheroo-is-up-and-quasi-working" type="regular" date-gmt="2011-09-19 21:30:00 GMT" date="Mon, 19 Sep 2011 23:30:00" unix-timestamp="1316467800" format="html" reblog-key="r2gQUQOm" slug="zyklisch-gswitcheroo-is-up-and-quasi-working" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Zyklisch - gswitcheroo is up and quasi working.</regular-title><regular-body>&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center&gt;&lt;a href="http://www.flickr.com/photos/drinksmachine/371312642/" title="Cycle Track von drinksmachine bei Flickr"&gt;&lt;img alt="Cycle Track" height="180" src="http://farm1.static.flickr.com/137/371312642_7af19fe86b_m.jpg" width="240"/&gt;&lt;/a&gt;&lt;/center&gt; Tonight I had a bit of time and got &lt;a href="https://gitorious.org/valastuff/gswitcheroo"&gt;gswitcheroo&lt;/a&gt; in a usable state.&lt;br/&gt;gswitcherd is launched by systemd and gswitcher is launched gnome-session-manager. All fine.&lt;br/&gt;&lt;br/&gt;If gswitcherd detects a connected HDMI port on boot it tries to turn on the discrete card (effectively turning off the integrated). Sadly there is currently a &lt;a href="https://bugs.freedesktop.org/show_bug.cgi?id=41002"&gt;bug&lt;/a&gt; (or so) in vgaswitcheroo which prevents the successful switching from one to another card between plymouth and gdm. Maybe this will be fixed at some point - or not be needed at all &amp;hellip;&lt;br/&gt;&lt;br/&gt;Another problem is about looking up the HDMI status (to automagically detect what card to use). This is just possible if the discrete card is powered on, but this ain&amp;rsquo;t the case when we are using the integrated card. The current solution is to power on the discrete card once and again, to determine the HDMI status.&lt;br/&gt;&lt;br/&gt;Beside all problems gswitcher will notify you about a freshly connected monitor and will ask you to log out (and back in). &lt;br/&gt;</regular-body><tag>vgaswitcheroo</tag><tag>vala</tag><tag>fedora</tag><tag>gswitcheroo</tag></post><post id="51491969572" url="https://dummdida.tumblr.com/post/51491969572" url-with-slug="https://dummdida.tumblr.com/post/51491969572/innendrin-a-vala-binding-for-tinycc" type="regular" date-gmt="2011-09-18 18:18:00 GMT" date="Sun, 18 Sep 2011 20:18:00" unix-timestamp="1316369880" format="html" reblog-key="TvlPq90W" slug="innendrin-a-vala-binding-for-tinycc" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Innendrin - A vala binding for TinyCC</regular-title><regular-body>Sunday night, best time to write some lines.&lt;br/&gt;&lt;blockquote&gt;&lt;a href="http://www.tinycc.org/"&gt;TinyCC&lt;/a&gt; (aka TCC) is a small but hyper fast C compiler. Unlike other C compilers, it is meant to be self-relying: you do not need an external assembler or linker because TCC does that for you.  &lt;/blockquote&gt;&lt;a href="https://gitorious.org/valastuff/vapis/blobs/master/vapis/tcc.vapi"&gt;This vapi&lt;/a&gt; allows to call tcc from within vala, a small example is given below. I used it in conjunction with genetic programming.&lt;br/&gt;&lt;br/&gt;&lt;pre class="brush:csharp"&gt;using TCC;&lt;br/&gt;void main(string[] args)&lt;br/&gt;{&lt;br/&gt;	State s = new State();&lt;br/&gt;	s.add_include_path (args[1] + "/include");&lt;br/&gt;	s.add_include_path ("/usr/include/");&lt;br/&gt;	s.set_lib_path (args[1]);&lt;br/&gt;	s.compile_string  ("""&lt;br/&gt;#include &lt;tcclib.h&gt;&lt;br/&gt;void main(int argc, char** argv) {&lt;br/&gt;	printf("Hello %s\n", argv[0]);&lt;br/&gt;}        &lt;br/&gt;""");&lt;br/&gt;	s.run ({"world."});&lt;br/&gt;}&lt;br/&gt;&lt;/tcclib.h&gt;&lt;/pre&gt;</regular-body><tag>vapi</tag><tag>vala</tag></post><post id="51491967201" url="https://dummdida.tumblr.com/post/51491967201" url-with-slug="https://dummdida.tumblr.com/post/51491967201/rollo-gswitcheroo-a-small-daemon-for" type="regular" date-gmt="2011-09-12 15:51:00 GMT" date="Mon, 12 Sep 2011 17:51:00" unix-timestamp="1315842660" format="html" reblog-key="oluFme2h" slug="rollo-gswitcheroo-a-small-daemon-for" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Rollo - gswitcheroo, a small daemon for vgaswitcheroo.</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/30342869@N05/3293769894/" title="VGA Port von alexshumaker bei Flickr"&gt;&lt;img src="http://farm4.static.flickr.com/3442/3293769894_885c422219_m.jpg" width="240" height="180" alt="VGA Port"/&gt;&lt;/a&gt;&lt;/center&gt;I&amp;rsquo;m working on a small library/daemo/client which wrap some functionallity of  vgaswitcheroo, a small kernel feature to handle hybrid graphic setups found in some laptops.&lt;br/&gt;&lt;br/&gt;The main intention is to allow the user to switch to the required card&lt;br/&gt;Sometimes this switch is required, because just one of the cards is connected to the external output of the laptop - which can be used to connect a beamer. &lt;br/&gt;&lt;br/&gt;The current code can be found at &lt;a href="https://gitorious.org/valastuff/gswitcheroo"&gt;https://gitorious.org/valastuff/gswitcheroo&lt;/a&gt;.&lt;br/&gt;daemon and client should be working by now, but the installation bits need some work.&lt;br/&gt;&lt;br/&gt;My intention is to add some configuration point to gnome-control-center. A first suggestion was to use the &amp;ldquo;System information&amp;rdquo; -&amp;gt; Graphics-Tab.&lt;br/&gt;Any suggestions and early adopters?</regular-body><tag>gnome</tag><tag>vgaswitcheroo</tag><tag>vala</tag><tag>fedora</tag></post><post id="51491965085" url="https://dummdida.tumblr.com/post/51491965085" url-with-slug="https://dummdida.tumblr.com/post/51491965085/efi-kvm" type="regular" date-gmt="2011-09-09 07:12:00 GMT" date="Fri, 09 Sep 2011 09:12:00" unix-timestamp="1315552320" format="html" reblog-key="MB1htQUt" slug="efi-kvm" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>EFI + KVM?</regular-title><regular-body>To test out the EFI support of some distributions (especially Fedora), I tried to get &lt;i&gt;qemu-kvm&lt;/i&gt; to use provide an EFI interface. This can be achieved by calling qemu with the -L switch, to use an alternate EFi bios file (like the one from &lt;a href="http://www.tianocore.org/"&gt;tianocore&lt;/a&gt;: OVMF), instead of the default bios. &lt;br/&gt;&lt;br/&gt; To get qemu-kvm up and running, try the following on a recent Fedora 15 setup:&lt;br/&gt;&lt;br/&gt;&lt;pre class="brush:bash"&gt;mkdir efiboot&lt;br/&gt;&lt;br/&gt;cd efiboot&lt;br/&gt;&lt;br/&gt;# Get ovmf, a binary providing the efi interface&lt;br/&gt;mkdir ovmf&lt;br/&gt;cd ovmf&lt;br/&gt;wget "http://downloads.sourceforge.net/project/edk2/OVMF/OVMF-X64-r11337-alpha.zip?r=http%3A%2F%2Fsourceforge.net%2Fapps%2Fmediawiki%2Ftianocore%2Findex.php%3Ftitle%3DOVMF&amp;amp;ts=1315395958&amp;amp;use_mirror=dfn"&lt;br/&gt;unzip OVMF-X64-r11337-alpha.zip&lt;br/&gt;&lt;br/&gt;cd ..&lt;br/&gt;&lt;br/&gt;# Create a seperate folder with all relevant binaries and replace some of them&lt;br/&gt;mkdir qemu&lt;br/&gt;cd qemu&lt;br/&gt;ln -s /usr/share/qemu/* .&lt;br/&gt;ln -s ../ovmf/OVMF.fd efi.bin&lt;br/&gt;ln -s ../ovmf/CirrusLogic5446.rom vgabios-cirrusefi.bin&lt;br/&gt;&lt;br/&gt;cd ..&lt;br/&gt;&lt;br/&gt;# Create an image and try the distribution in question ...&lt;br/&gt;qemu-img create -f qed a.img 10G&lt;br/&gt;qemu-kvm -L qemu/ -bios efi.bin -m 1024 -hda a.img \&lt;br/&gt;   -cdrom ../Fedora-16-Alpha-x86_64-DVD.iso&lt;br/&gt;# Expecting this to boot, but after the efi boot manager, the booting after grub (?) stalls ...&lt;br/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;It turns out that Fedora won&amp;rsquo;t boot on this qemu-kvm setup, instead &lt;a href="http://www.ubuntu.com/"&gt;Ubuntu&lt;/a&gt; worked like a charm - but someone &lt;a href="http://smackerelofopinion.blogspot.com/2009/11/qemu-efi-bios.html"&gt;already worked on this&lt;/a&gt; a couple of years ago.&lt;br/&gt;&lt;br/&gt;The Fedora &lt;a href="http://docs.fedoraproject.org/en-US/Fedora/15/html/Installation_Guide/Making_Minimal_Boot_Media.html#Making_Minimal_Boot_Media-UEFI"&gt;docs&lt;/a&gt; mention that the provided &lt;i&gt;efidisk.img&lt;/i&gt; should boot on an EFI based system, but this also did not work as expected. Any hints?</regular-body><tag>ubuntu</tag><tag>kvm</tag><tag>fedora</tag><tag>efi</tag><tag>qemu</tag><tag>ovmf</tag></post><post id="51491962945" url="https://dummdida.tumblr.com/post/51491962945" url-with-slug="https://dummdida.tumblr.com/post/51491962945/brüken-bauen-using-vala-code-from-javascript" type="regular" date-gmt="2011-09-07 08:54:00 GMT" date="Wed, 07 Sep 2011 10:54:00" unix-timestamp="1315385640" format="html" reblog-key="qbej4Qdw" slug="brüken-bauen-using-vala-code-from-javascript" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Brüken bauen - Using vala code from JavaScript</regular-title><regular-body>&lt;center&gt;&lt;a href="http://www.flickr.com/photos/underpuppy/256688760/" title="Police bridge von Underpuppy bei Flickr"&gt;&lt;img src="http://farm1.static.flickr.com/99/256688760_b6ddeb0425_m.jpg" width="240" height="180" alt="Police bridge"/&gt;&lt;/a&gt;&lt;/center&gt;&lt;br/&gt;GObject based libraries can be called - thanks GObject introspection - quite easy from &lt;a href="http://git.gnome.org/browse/gjs"&gt;javascript&lt;/a&gt; (as well as e.g. python). &lt;br/&gt;As vala builds on gobject, all code generated by vala can be introspected - when compiled with a fine selection of compiler switches. &lt;br/&gt;&lt;a href="http://developer.gnome.org/"&gt;&lt;/a&gt;&lt;br/&gt;Let&amp;rsquo;s pretend that we have &lt;a href="https://gitorious.org/valastuff/gi-example/blobs/master/src/testShared.vala"&gt;got&lt;/a&gt; a small library written in vala and want to use it from gjs - maybe because the that library is wrapping another non-gobject library or doing some heavy calculations.&lt;br/&gt;&lt;br/&gt;To build a introspectable library a good practice is, to just use &lt;i&gt;valac&lt;/i&gt; to generate the appropriate c-code and handle the build manually - or by using some build system.&lt;br/&gt;When invoking &lt;i&gt;valac&lt;/i&gt; it is important &lt;i&gt;to pass the two both&lt;/i&gt; of switches &lt;i&gt;&amp;ndash;library&lt;/i&gt; and &lt;i&gt;&amp;ndash;gir&lt;/i&gt;. It is also important to specify the GIR name (&lt;i&gt;&amp;ndash;gir&lt;/i&gt;) in the format &lt;i&gt;NAME-VERSION.gir&lt;/i&gt; whereas the library (&lt;i&gt;&amp;ndash;library&lt;/i&gt;) name expects just &lt;i&gt;NAME-VERSION&lt;/i&gt;.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Build&lt;/b&gt;&lt;br/&gt;Up to now it&amp;rsquo;s just theory. The following lines guide you trough this process, step by step (testShared.vala is taken from &lt;a href="https://gitorious.org/valastuff/gi-example"&gt;here&lt;/a&gt;):&lt;br/&gt;&lt;pre class="brush:bash"&gt;$ ls&lt;br/&gt;testShared.vala&lt;br/&gt;&lt;br/&gt;$ valac --ccode --header=testShared.h \&lt;br/&gt;   --gir=TestShared-0.1.gir \&lt;br/&gt;   --library=TestShared-0.1 \&lt;br/&gt;   --pkg=gio-2.0 testShared.vala&lt;br/&gt;&lt;br/&gt;$ ls&lt;br/&gt;TestShared-0.1.gir  TestShared-0.1.vapi&lt;br/&gt;testShared.c testShared.h&lt;br/&gt;testShared.vala&lt;br/&gt;&lt;br/&gt;$ gcc -fPIC -shared -o libTestShared.so \&lt;br/&gt;   $(pkg-config --libs --cflags gobject-2.0) \&lt;br/&gt;   testShared.c &lt;br/&gt;&lt;br/&gt;$ ls *.so&lt;br/&gt;libTestShared.so&lt;br/&gt; &lt;/pre&gt;&lt;br/&gt;&lt;b&gt;Typelib&lt;/b&gt;&lt;br/&gt;After building the library we finally need to build the introspection data using &lt;i&gt;g-ir-compiler&lt;/i&gt; (part of gobject-introspection-devel):&lt;br/&gt;&lt;pre class="brush:bash"&gt;$ g-ir-compiler --shared-library=libTestShared.so \&lt;br/&gt;   --output=TestShared-0.1.typelib TestShared-0.1.gir&lt;/pre&gt;&lt;pre class="brush:bash"&gt;$ ls *.gir *.typelib&lt;br/&gt;TestShared-0.1.gir&lt;br/&gt;TestShared-0.1.typelib&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;b&gt;Testing&lt;/b&gt;&lt;br/&gt;To finally test our introspectable data, why use &lt;i&gt;gjs&lt;/i&gt;. We import the library using the (&lt;i&gt;gjs&lt;/i&gt; specific) &amp;ldquo;imports.gi&amp;rdquo; keyword:  &lt;br/&gt;&lt;pre class="brush:javascript"&gt;const TestShared = imports.gi.TestShared;&lt;br/&gt;print('Square of 42: ' + TestShared.square (42));&lt;br/&gt;&lt;/pre&gt;On the commandline it looks like this: &lt;br/&gt;&lt;pre class="brush:bash"&gt;$ GI_TYPELIB_PATH=. LD_LIBRARY_PATH=. \&lt;br/&gt;   gjs --command="const TestShared = imports.gi.TestShared; \&lt;br/&gt;   print('Square of 42: ' + TestShared.square (42));"&lt;br/&gt;** (gjs:12175): DEBUG: Command line: gjs&lt;br/&gt;** (gjs:12175): DEBUG: Creating new context to eval console script&lt;br/&gt;Square of 42: 1764&lt;br/&gt;$&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Done. We managed to call a library function from &lt;i&gt;gjs&lt;/i&gt; using GObject introspection. The creation of the (important) typelib should be included in you favorite build tools, one example using cmake can be found (again) &lt;a href="https://gitorious.org/valastuff/gi-example"&gt;here&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;Oone final reminder: Not just vala code can be imported, but all gobject based libraries (e.g. libgtop2 for system informations, clutter for fancy UIs and more)&lt;br/&gt;&lt;br/&gt;Is there something I forgot? Tell me :)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;center&gt;❧ &lt;/center&gt;&lt;br/&gt;</regular-body><tag>gjs</tag><tag>introspection</tag><tag>vala</tag></post><post id="51491960933" url="https://dummdida.tumblr.com/post/51491960933" url-with-slug="https://dummdida.tumblr.com/post/51491960933/interpretieren-und-rechnen-vala-binding-for" type="regular" date-gmt="2011-09-05 15:33:00 GMT" date="Mon, 05 Sep 2011 17:33:00" unix-timestamp="1315236780" format="html" reblog-key="zaM2Eq7x" slug="interpretieren-und-rechnen-vala-binding-for" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Interpretieren und Rechnen - Vala binding for libmatheval.</regular-title><regular-body>&lt;blockquote&gt;&lt;a href="http://www.gnu.org/software/libmatheval/manual/libmatheval.html"&gt;libmatheval&lt;/a&gt; is small library of procedures for evaluating mathematical functions.&lt;/blockquote&gt;The appropriate vapi to use this library from vala can be found &lt;a href="https://gitorious.org/valastuff/vapis/blobs/master/vapis/libmatheval.vapi"&gt;around the corner&lt;/a&gt;.&lt;br/&gt;The usage of libmatheval is quite easy, here an example: &lt;pre class="brush:csharp"&gt;&lt;br/&gt;#!/usr/bin/vala --pkg libmatheval&lt;br/&gt;using matheval;&lt;br/&gt;void main ()&lt;br/&gt;{&lt;br/&gt;    var e = Evaluator.create ("x + y^2");&lt;br/&gt;    print("e.evaluate_x:\t%s = %g\t\t| x = 4\n", &lt;br/&gt;        e.get_string(), e.evaluate_x (4));&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;More functions calls can be found &lt;a href="https://gitorious.org/valastuff/vapis/blobs/master/tests/matheval.vala"&gt;here&lt;/a&gt;.</regular-body><tag>vapi</tag><tag>vala</tag><tag>libmatheval</tag></post><post id="51491959058" url="https://dummdida.tumblr.com/post/51491959058" url-with-slug="https://dummdida.tumblr.com/post/51491959058/klein-elementary-things" type="regular" date-gmt="2011-09-05 13:15:00 GMT" date="Mon, 05 Sep 2011 15:15:00" unix-timestamp="1315228500" format="html" reblog-key="Q9kFSzC5" slug="klein-elementary-things" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Klein - Elementary things.</regular-title><regular-body>&lt;p&gt;&lt;a href="http://elementaryos.org/"&gt;Elementary OS&lt;/a&gt; always caught or users attention because of it&amp;rsquo;s design principles, which lead to a very &lt;a href="http://elementaryos.org/discover"&gt;aesthetic appearance&lt;/a&gt; (including the gtk elementary theme) and some very nice applications like &lt;a href="http://elementaryos.org/journal/sneak-peek-postler-empathy-theme"&gt;postler&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;Anyhow, this time it got my attention because it&amp;rsquo;s &lt;a href="http://elementaryos.org/docs/apis/programming-languages"&gt;favored&lt;/a&gt; programming language seems to be vala. Surprise :)&lt;br/&gt;&lt;br/&gt;A part of this effort is also to improve the programming experience by providing an - in loose words - integrated development environment - an editor (scratch + vala plugin) and build system (cmake). Nice.&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://pix.toile-libre.org/upload/original/1315213243.png"&gt;&lt;img border="0" height="243" src="http://pix.toile-libre.org/upload/original/1315213243.png" width="400"/&gt;&lt;/a&gt;&lt;/div&gt;</regular-body><tag>cmake</tag><tag>vala</tag><tag>elementaryos</tag></post><post id="51491956760" url="https://dummdida.tumblr.com/post/51491956760" url-with-slug="https://dummdida.tumblr.com/post/51491956760/vereinfachte-ausgangsschrift-a-couple-of-code" type="regular" date-gmt="2011-08-28 10:32:00 GMT" date="Sun, 28 Aug 2011 12:32:00" unix-timestamp="1314527520" format="html" reblog-key="Yny5mnOx" slug="vereinfachte-ausgangsschrift-a-couple-of-code" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Vereinfachte Ausgangsschrift - A couple of code lines.</regular-title><regular-body>&lt;br/&gt;&lt;br/&gt;&lt;center&gt; &lt;br/&gt;&lt;a href="http://upload.wikimedia.org/wikipedia/commons/5/57/Vereinfachte_Ausgangsschrift.png" title="Wikimedia: Vereinfachte Ausgangsschrift"&gt;&lt;img alt="Indien: Kochi" height="163" src="http://upload.wikimedia.org/wikipedia/commons/5/57/Vereinfachte_Ausgangsschrift.png" width="200"/&gt;&lt;/a&gt; &lt;br/&gt;&lt;/center&gt; &lt;br/&gt;To get started with vala you need the vala-to-c-compiler valac, common development tools and libraries.&lt;br/&gt;Detailed instructions about the needed build tools can be found at the &lt;a href="https://live.gnome.org/DeveloperTools/Installation"&gt;GNOME Development Tools page&lt;/a&gt;. And the most recent vala compiler can be obtained from the &lt;a href="https://live.gnome.org/Vala"&gt;official vala page&lt;/a&gt;. Vala is packaged for all major distributions, e.g it can be installed on Fedora using yum:&lt;br/&gt;&lt;br/&gt;&lt;pre class="brush:bash"&gt;$ sudo yum install vala&lt;/pre&gt;&lt;br/&gt;If all requirements are met, put the lines below into a file named &lt;code&gt;printargs.vala&lt;/code&gt;:&lt;br/&gt;&lt;br/&gt;&lt;pre class="brush:csharp"&gt;void main (string[] args)&lt;br/&gt;{&lt;br/&gt;  foreach (var arg in args)&lt;br/&gt;  {&lt;br/&gt;    print ("Argument: %s\n", arg);&lt;br/&gt;  }&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;As we have got some code now, we need to compile it using &lt;i&gt;valac&lt;/i&gt;, the compiler which compiles vala to c and subsequently calls a c-compiler to build an executable.&lt;br/&gt;&lt;br/&gt;&lt;pre class="brush:bash"&gt;&lt;br/&gt;$ valac printargs.vala&lt;br/&gt;$ ./printargs some arguments&lt;br/&gt;Argument: ./printargs&lt;br/&gt;Argument: some&lt;br/&gt;Argument: arguments&lt;/pre&gt;&lt;br/&gt;If you wonder what C-Code valac generated, call valac with the following switches:&lt;br/&gt;&lt;br/&gt;&lt;pre class="brush:bash"&gt;&lt;br/&gt;$ valac --save-temps printargs.vala&lt;br/&gt;$ cat printargs.c&lt;br/&gt;&lt;/pre&gt;</regular-body><tag>vala</tag><tag>fedora</tag></post><post id="51491955279" url="https://dummdida.tumblr.com/post/51491955279" url-with-slug="https://dummdida.tumblr.com/post/51491955279/wenn-es-sich-bezieht-progress-on-openstack-in" type="regular" date-gmt="2011-08-26 10:18:00 GMT" date="Fri, 26 Aug 2011 12:18:00" unix-timestamp="1314353880" format="html" reblog-key="DAwGQ7sV" slug="wenn-es-sich-bezieht-progress-on-openstack-in" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Wenn es sich bezieht - Progress on OpenStack in Fedora</regular-title><regular-body>&lt;p&gt;Lately Mark McLoughlin &lt;a href="http://lists.fedoraproject.org/pipermail/cloud/2011-August/000733.html"&gt;made some great progress&lt;/a&gt; in packaging several &lt;a href="http://www.openstack.org"&gt;OpenStack&lt;/a&gt; components for Fedora. Because of his work, all important OpenStack components (Nova, Swift, Glance) will land in Fedora 16.&lt;/p&gt;</regular-body><tag>fedora</tag><tag>openstack</tag></post><post id="51491953095" url="https://dummdida.tumblr.com/post/51491953095" url-with-slug="https://dummdida.tumblr.com/post/51491953095/lose-enden-what-it-is-all-about" type="regular" date-gmt="2011-08-19 14:40:00 GMT" date="Fri, 19 Aug 2011 16:40:00" unix-timestamp="1313764800" format="html" reblog-key="SYt95MHR" slug="lose-enden-what-it-is-all-about" state="published" is_reblog="false" tumblelog="dummdida"><regular-title>Lose Enden - What it is all about.</regular-title><regular-body>&lt;center&gt; &lt;br/&gt;&lt;a href="http://www.flickr.com/photos/bupia/2400761127/" title="Indien: Kochi von patrikmloeff bei Flickr"&gt;&lt;img src="http://farm3.static.flickr.com/2219/2400761127_83c83b632a.jpg" alt="Indien: Kochi" height="334" width="500"/&gt;&lt;/a&gt; &lt;br/&gt;&lt;/center&gt; &lt;br/&gt;&lt;br/&gt;The release of &lt;a href="http://www.gnome3.org/"&gt;GNOME 3&lt;/a&gt; included more than a visual overhaul. The underlying libraries were partly cleaned up and gained new features. &lt;br/&gt;&lt;br/&gt;One of these features that gained more ground was gobject introspection (gi). Libraries using GObject can then easily be called from languages like python or Javascript if the support introspection. &lt;br/&gt;&lt;br/&gt;This is where vala jumps in. &lt;a href="http://live.gnome.org/Vala"&gt;Vala&lt;/a&gt; is language which tries to support the C# syntax but uses GObject and compiles to C, which then is compiled into binaries using common C compilers. &lt;br/&gt;&lt;br/&gt;So what is the benefit? As all executables and libraries created by vala or based on GObject, their functions and classes etc. can be called natively from gjs (a JavaScript interpreter) and python (using pygi) &lt;br/&gt;Also most GNOME related libraries are build using GObject. &lt;br/&gt;&lt;br/&gt;This leads us to the situation where you can use a scripting language and have access to a comprehensive stack of libraries regarding the GNOME desktop environment. &lt;br/&gt;&lt;ul&gt;&lt;li&gt;Rapid development? JavaScript.&lt;/li&gt;
 &lt;li&gt;Layout? Glade.&lt;/li&gt;
 &lt;li&gt;Style? CSS.&lt;/li&gt;
 &lt;li&gt;Library? Vala.&lt;/li&gt;
 &lt;/ul&gt;It&amp;rsquo;s not just theory. Look at &lt;a href="http://git.gnome.org/browse/gnome-shell"&gt;gnome-shell&lt;/a&gt; or &lt;a href="http://git.gnome.org/browse/gnome-documents"&gt;gnome-documents&lt;/a&gt;. &lt;br/&gt;</regular-body><tag>gjs</tag><tag>gnome</tag><tag>vala</tag></post></posts></tumblr>